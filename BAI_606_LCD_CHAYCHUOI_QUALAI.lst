CCS PCH C Compiler, Version 5.101, 43599               14-Mar-23 13:23

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_606_LCD_CHAYCHUOI_QUALAI.lst

               ROM used:   2466 bytes (8%)
                           Largest free fragment is 30302
               RAM used:   84 (4%) at main() level
                           102 (5%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   0842
.................... //!#DEFINE BOARD D501
.................... //!#include<tv_boards.c>
.................... //!#include<tv_lcd.c>
.................... //!unsigned char S[]="TRUONG DAI HOC SU PHAM KY THUAT TP.HCM";
.................... //!unsigned char RONG[]="                    ";
.................... //!unsigned int8 i=0,j=0,k=0;
.................... //!unsigned int1 dao=0;
.................... //!void main()
.................... //!{
.................... //!   system_init();
.................... //!   lcd_setup();
.................... //!   dao=0;
.................... //!   while(true)
.................... //!   { 
.................... //!        if(dao==0)
.................... //!        {
.................... //!           for(j=0;j<19;j++)
.................... //!           {
.................... //!               RONG[j]=RONG[j+1];
.................... //!           }
.................... //!           if(k<38)
.................... //!           {
.................... //!               RONG[19]=S[k];
.................... //!               k++;
.................... //!           }
.................... //!           else 
.................... //!           {
.................... //!               k=18;
.................... //!               dao=1;
.................... //!           }
.................... //!           lcd_goto(0,0);
.................... //!           for(i=0;i<19;i++) 
.................... //!           {
.................... //!               lcd_data(RONG[i]);
.................... //!           }
.................... //!           delay_ms(500);
.................... //!        }
.................... //!        if(dao==1)
.................... //!        {
.................... //!            for(j=19;j>0;j--)
.................... //!            {
.................... //!               RONG[j]=RONG[j-1];
.................... //!            }
.................... //!           if(k>0)
.................... //!           {
.................... //!               RONG[0]=S[k];
.................... //!               k--;
.................... //!           }
.................... //!           else 
.................... //!           {
.................... //!               k=0;
.................... //!               dao=0;
.................... //!               RONG[0]=S[0];
.................... //!           }
.................... //!           lcd_goto(0,0);
.................... //!           for(i=0;i<19;i++) 
.................... //!           {
.................... //!               lcd_data(RONG[i]);
.................... //!           }
.................... //!           delay_ms(500);
.................... //!        }
.................... //!   }
.................... //!}
.................... #define   BOARD     D501 
.................... #include<tv_boards.c> 
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
.................... #ifndef    __TV_D501_TH_C__
.................... #define    __TV_D501_TH_C__
.................... #include<TV_D501_TH.h>
.................... #ifndef    __TV_D501_TH_H__
.................... #define    __TV_D501_TH_H__
.................... #include     <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 07,0F
0016:  DATA 1F,1F
0018:  DATA 1F,1F
001A:  DATA 1F,1F
001C:  DATA 1F,1F
001E:  DATA 1F,00
0020:  DATA 00,00
0022:  DATA 00,00
0024:  DATA 1C,1E
0026:  DATA 1F,1F
0028:  DATA 1F,1F
002A:  DATA 1F,1F
002C:  DATA 00,00
002E:  DATA 00,00
0030:  DATA 00,1F
0032:  DATA 1F,1F
0034:  DATA 1F,1F
0036:  DATA 1F,1F
0038:  DATA 1F,1F
003A:  DATA 1E,1C
003C:  DATA 1F,1F
003E:  DATA 1F,1F
0040:  DATA 1F,1F
0042:  DATA 0F,07
0044:  DATA 1F,1F
0046:  DATA 1F,00
0048:  DATA 00,00
004A:  DATA 1F,1F
004C:  DATA 1F,1F
004E:  DATA 1F,1F
0050:  DATA 1F,1F
0052:  DATA 1F,1F
0054:  CLRF   FF7
0056:  ADDLW  64
0058:  MOVWF  FF6
005A:  MOVLW  00
005C:  ADDWFC FF7,F
005E:  TBLRD*+
0060:  MOVF   FF5,W
0062:  RETURN 0
0064:  DATA 80,C0
0066:  DATA 94,D4
0068:  DATA 20,00
006A:  DATA 20,00
006C:  DATA 44,45
006E:  DATA 4D,20
0070:  DATA 4C,45
0072:  DATA 4E,00
0074:  DATA 44,45
0076:  DATA 4D,20
0078:  DATA 58,55
007A:  DATA 4F,4E
007C:  DATA 47,00
*
03A0:  TBLRD*+
03A2:  MOVF   FF5,F
03A4:  BZ    03BE
03A6:  MOVFF  FF6,53
03AA:  MOVFF  FF7,54
03AE:  MOVFF  FF5,55
03B2:  RCALL  0316
03B4:  MOVFF  53,FF6
03B8:  MOVFF  54,FF7
03BC:  BRA    03A0
03BE:  RETURN 0
*
0408:  MOVF   56,W
040A:  CLRF   01
040C:  SUBWF  55,W
040E:  BC    0416
0410:  MOVFF  55,00
0414:  BRA    042E
0416:  CLRF   00
0418:  MOVLW  08
041A:  MOVWF  57
041C:  RLCF   55,F
041E:  RLCF   00,F
0420:  MOVF   56,W
0422:  SUBWF  00,W
0424:  BTFSC  FD8.0
0426:  MOVWF  00
0428:  RLCF   01,F
042A:  DECFSZ 57,F
042C:  BRA    041C
042E:  RETURN 0
0430:  MOVF   01,W
0432:  MOVFF  53,55
0436:  MOVLW  64
0438:  MOVWF  56
043A:  RCALL  0408
043C:  MOVFF  00,53
0440:  MOVF   01,W
0442:  MOVLW  30
0444:  BNZ   0454
0446:  BTFSS  54.1
0448:  BRA    0462
044A:  BTFSC  54.3
044C:  BRA    0462
044E:  BTFSC  54.4
0450:  MOVLW  20
0452:  BRA    045A
0454:  BCF    54.3
0456:  BCF    54.4
0458:  BSF    54.0
045A:  ADDWF  01,F
045C:  MOVFF  01,55
0460:  RCALL  0316
0462:  MOVFF  53,55
0466:  MOVLW  0A
0468:  MOVWF  56
046A:  RCALL  0408
046C:  MOVFF  00,53
0470:  MOVF   01,W
0472:  MOVLW  30
0474:  BNZ   0482
0476:  BTFSC  54.3
0478:  BRA    048A
047A:  BTFSS  54.0
047C:  BRA    048A
047E:  BTFSC  54.4
0480:  MOVLW  20
0482:  ADDWF  01,F
0484:  MOVFF  01,55
0488:  RCALL  0316
048A:  MOVLW  30
048C:  ADDWF  53,F
048E:  MOVFF  53,55
0492:  RCALL  0316
0494:  GOTO   092A (RETURN)
0498:  MOVF   55,W
049A:  ANDLW  07
049C:  MOVWF  00
049E:  RRCF   55,W
04A0:  MOVWF  01
04A2:  RRCF   01,F
04A4:  RRCF   01,F
04A6:  MOVLW  1F
04A8:  ANDWF  01,F
04AA:  MOVF   01,W
04AC:  ADDWF  57,W
04AE:  MOVWF  FE9
04B0:  MOVLW  00
04B2:  ADDWFC 58,W
04B4:  MOVWF  FEA
04B6:  CLRF   01
04B8:  INCF   01,F
04BA:  INCF   00,F
04BC:  BRA    04C0
04BE:  RLCF   01,F
04C0:  DECFSZ 00,F
04C2:  BRA    04BE
04C4:  MOVF   56,F
04C6:  BZ    04CE
04C8:  MOVF   01,W
04CA:  IORWF  FEF,F
04CC:  BRA    04D4
04CE:  COMF   01,F
04D0:  MOVF   01,W
04D2:  ANDWF  FEF,F
04D4:  RETURN 0
04D6:  MOVF   55,W
04D8:  ANDLW  07
04DA:  MOVWF  00
04DC:  RRCF   55,W
04DE:  MOVWF  01
04E0:  RRCF   01,F
04E2:  RRCF   01,F
04E4:  MOVLW  1F
04E6:  ANDWF  01,F
04E8:  MOVF   01,W
04EA:  ADDWF  56,W
04EC:  MOVWF  FE9
04EE:  MOVLW  00
04F0:  ADDWFC 57,W
04F2:  MOVWF  FEA
04F4:  MOVFF  FEF,01
04F8:  INCF   00,F
04FA:  BRA    04FE
04FC:  RRCF   01,F
04FE:  DECFSZ 00,F
0500:  BRA    04FC
0502:  MOVLW  01
0504:  ANDWF  01,F
0506:  RETURN 0
0508:  BTFSC  FD8.1
050A:  BRA    0512
050C:  CLRF   FEA
050E:  MOVLW  61
0510:  MOVWF  FE9
0512:  CLRF   00
0514:  CLRF   01
0516:  CLRF   02
0518:  CLRF   03
051A:  CLRF   x61
051C:  CLRF   x62
051E:  CLRF   x63
0520:  CLRF   x64
0522:  MOVF   x60,W
0524:  IORWF  5F,W
0526:  IORWF  5E,W
0528:  IORWF  5D,W
052A:  BZ    0584
052C:  MOVLW  20
052E:  MOVWF  x65
0530:  BCF    FD8.0
0532:  RLCF   59,F
0534:  RLCF   5A,F
0536:  RLCF   5B,F
0538:  RLCF   5C,F
053A:  RLCF   x61,F
053C:  RLCF   x62,F
053E:  RLCF   x63,F
0540:  RLCF   x64,F
0542:  MOVF   x60,W
0544:  SUBWF  x64,W
0546:  BNZ   0558
0548:  MOVF   5F,W
054A:  SUBWF  x63,W
054C:  BNZ   0558
054E:  MOVF   5E,W
0550:  SUBWF  x62,W
0552:  BNZ   0558
0554:  MOVF   5D,W
0556:  SUBWF  x61,W
0558:  BNC   0578
055A:  MOVF   5D,W
055C:  SUBWF  x61,F
055E:  MOVF   5E,W
0560:  BTFSS  FD8.0
0562:  INCFSZ 5E,W
0564:  SUBWF  x62,F
0566:  MOVF   5F,W
0568:  BTFSS  FD8.0
056A:  INCFSZ 5F,W
056C:  SUBWF  x63,F
056E:  MOVF   x60,W
0570:  BTFSS  FD8.0
0572:  INCFSZ x60,W
0574:  SUBWF  x64,F
0576:  BSF    FD8.0
0578:  RLCF   00,F
057A:  RLCF   01,F
057C:  RLCF   02,F
057E:  RLCF   03,F
0580:  DECFSZ x65,F
0582:  BRA    0530
0584:  MOVFF  61,FEF
0588:  MOVFF  62,FEC
058C:  MOVFF  63,FEC
0590:  MOVFF  64,FEC
0594:  RETURN 0
*
080A:  ADDWF  FE8,W
080C:  CLRF   FF7
080E:  RLCF   FF7,F
0810:  ADDLW  25
0812:  MOVWF  FF6
0814:  MOVLW  08
0816:  ADDWFC FF7,F
0818:  TBLRD*-
081A:  MOVF   FF5,W
081C:  MOVWF  FFA
081E:  TBLRD*
0820:  MOVF   FF5,W
0822:  MOVWF  FF9
0824:  DATA 9A,06
0826:  DATA D6,06
0828:  DATA 3C,07
082A:  DATA A2,07
.................... 
.................... #list
.................... 
.................... #device      adc=10
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use         delay(clock=20000000)
*
015C:  CLRF   FEA
015E:  MOVLW  55
0160:  MOVWF  FE9
0162:  MOVF   FEF,W
0164:  BZ    0180
0166:  MOVLW  06
0168:  MOVWF  01
016A:  CLRF   00
016C:  DECFSZ 00,F
016E:  BRA    016C
0170:  DECFSZ 01,F
0172:  BRA    016A
0174:  MOVLW  7B
0176:  MOVWF  00
0178:  DECFSZ 00,F
017A:  BRA    0178
017C:  DECFSZ FEF,F
017E:  BRA    0166
0180:  RETURN 0
*
02DE:  MOVLW  03
02E0:  SUBWF  57,F
02E2:  BNC   02F6
02E4:  CLRF   FEA
02E6:  MOVLW  57
02E8:  MOVWF  FE9
02EA:  MOVF   FEF,W
02EC:  BZ    02F6
02EE:  BRA    02F2
02F0:  BRA    02F2
02F2:  DECFSZ FEF,F
02F4:  BRA    02F0
02F6:  RETURN 0
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... #include     <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit         TIM3IF                 = 0xFA1.1
.................... #bit         SSDO                   = 0xF84.2
.................... #bit         SSCK                   = 0xF84.0
.................... #define      analog_pins            an0_to_an2
.................... #define      lm35a_channel          0
.................... #define      lm35b_channel          1
.................... #define      gp2d12_channel         2
.................... #define      photoresis_channel     3
.................... #define      DCMOTOR_IN1            PIN_c1
.................... #define      TOUCH_PIN              pin_a5
.................... #define      DHT11_PIN              pin_d1
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      SRF04_TRIGER           PIN_E2
.................... #define      soft_i2c_sda           pin_b0
.................... #define      soft_i2c_scl           pin_b1
.................... #define      bt0                    pin_b5
.................... #define      bt1                    pin_b4
.................... #define      bt2                    pin_b3
.................... #define      bt3                    pin_b2
.................... #define      on                     bt0      
.................... #define      off                    bt1
.................... #define      inv                    bt2
.................... #define      up                     bt0    
.................... #define      dw                     bt1
.................... #define      clr                    bt2
.................... #define      mod                    bt3
.................... #define      stop                   bt3
.................... #define      on1                    bt0     
.................... #define      off1                   bt1
.................... #define      on2                    bt2       
.................... #define      off2                   bt3
.................... #define      S7SEG_RCK              pin_d5
.................... #define      LED32_RCK              pin_d4
.................... #define      D7SEG_RCK              pin_d6
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte 
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct 
.................... {
....................       int1      STEP_MOTOR_ENABLE;
....................       int1      STEP_MOTOR_IN1;
....................       int1      STEP_MOTOR_IN2;
....................       int1      STEP_MOTOR_IN3;
....................       int1      STEP_MOTOR_IN4;
....................       int1      DC_MOTOR_ENABLE;
....................       int1      PWRKEY;
....................       int1      NC_PIN1;          
....................       int1      BUZZER;
....................       int1      TRIAC_1;
....................       int1      TRIAC_2;
....................       int1      RELAY_1;
....................       int1      RELAY_2 ;
....................       int1      NC_PIN2 ;  
....................       int1      NC_PIN3;   
....................       int1      NC_PIN4;  
.................... }RBDC_STRUCT;
.................... typedef union
.................... {
....................       RBDC_STRUCT         bit;
....................       unsigned int8       xbyte[2];
.................... }RBDC_UNION;
.................... 
.................... typedef struct 
.................... {
....................     RBDC_UNION           rbdc;
....................     unsigned int8        lcddata; 
....................     unsigned int8        lcdcontrol;
....................     unsigned int8        glcddata;
....................     unsigned int8        glcdcontrol;    
.................... }SYSTEM_VAR_STRUCT;
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0};
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[4];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT;
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on();
.................... result buzzer_off();
.................... result relay_1_on();
.................... result relay_1_off();
.................... result relay_2_on();
.................... result relay_2_off();
.................... result triac_1_on();
.................... result triac_1_off();
.................... result triac_2_on();
.................... result triac_2_off();
.................... result DCMOTOR_ENABLE();
.................... result STEPMOTOR_ENABLE();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... void SSPI_WRITE(unsigned int8 x);
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]);
*
010C:  MOVFF  11,5D
0110:  RCALL  007E
0112:  MOVFF  10,5D
0116:  RCALL  007E
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]);
0118:  MOVFF  0F,5D
011C:  RCALL  007E
011E:  MOVFF  0E,5D
0122:  RCALL  007E
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0124:  BCF    F95.4
0126:  BSF    F8C.4
0128:  BCF    F95.4
012A:  BCF    F8C.4
....................      return OK; 
012C:  MOVLW  00
012E:  MOVWF  01
0130:  GOTO   0298 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]);
0134:  MOVFF  12,5D
0138:  RCALL  007E
013A:  MOVFF  13,5D
013E:  RCALL  007E
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]);
0140:  MOVFF  14,5D
0144:  RCALL  007E
0146:  MOVFF  15,5D
014A:  RCALL  007E
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
014C:  BCF    F95.6
014E:  BSF    F8C.6
0150:  BCF    F95.6
0152:  BCF    F8C.6
....................       return OK;
0154:  MOVLW  00
0156:  MOVWF  01
0158:  GOTO   029A (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1)
*
0182:  MOVLW  80
0184:  MOVWF  53
0186:  CLRF   54
0188:  MOVF   54,W
018A:  SUBLW  07
018C:  BNC   01D0
....................       {
....................             SSPI_WRITE(i);
018E:  MOVFF  53,5D
0192:  RCALL  007E
....................             SSPI_WRITE(~s7seg.led[n]);     
0194:  CLRF   03
0196:  MOVF   54,W
0198:  ADDLW  16
019A:  MOVWF  FE9
019C:  MOVLW  00
019E:  ADDWFC 03,W
01A0:  MOVWF  FEA
01A2:  MOVF   FEF,W
01A4:  XORLW  FF
01A6:  MOVWF  55
01A8:  MOVWF  5D
01AA:  RCALL  007E
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
01AC:  BCF    F95.5
01AE:  BSF    F8C.5
01B0:  BCF    F95.5
01B2:  BCF    F8C.5
....................             delay_ms(1);
01B4:  MOVLW  01
01B6:  MOVWF  55
01B8:  RCALL  015C
....................             SSPI_WRITE(~0xff);
01BA:  CLRF   5D
01BC:  RCALL  007E
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
01BE:  BCF    F95.5
01C0:  BSF    F8C.5
01C2:  BCF    F95.5
01C4:  BCF    F8C.5
01C6:  MOVF   54,W
01C8:  INCF   54,F
01CA:  BCF    FD8.0
01CC:  RRCF   53,F
01CE:  BRA    0188
....................       }
....................       return OK;
01D0:  MOVLW  00
01D2:  MOVWF  01
01D4:  GOTO   029C (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {
....................      unsigned int8 cot;
....................      for(cot=0;cot<4;cot++)
....................      {
....................         output_bit(pin_b7,cot&0x02);
....................         output_bit(pin_b6,cot&0x01);
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);             
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);               
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);            
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4);
....................      }
....................      return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_glcd_lcd()
.................... {      
....................     SSPI_WRITE(system_var.glcdcontrol);             
01D8:  MOVFF  09,5D
01DC:  RCALL  007E
....................     SSPI_WRITE(system_var.glcddata);
01DE:  MOVFF  08,5D
01E2:  RCALL  007E
....................     SSPI_WRITE(system_var.lcdcontrol);       
01E4:  MOVFF  07,5D
01E8:  RCALL  007E
....................     SSPI_WRITE(system_var.lcddata);           
01EA:  MOVFF  06,5D
01EE:  RCALL  007E
....................     output_high(LCD_RCK);     
01F0:  BCF    F95.2
01F2:  BSF    F8C.2
....................     output_low(LCD_RCK);
01F4:  BCF    F95.2
01F6:  BCF    F8C.2
....................     return OK;
01F8:  MOVLW  00
01FA:  MOVWF  01
01FC:  RETURN 0
.................... }
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {     
....................     system_var.lcdcontrol = ~lcd_signal;
01FE:  MOVF   57,W
0200:  MOVWF  07
0202:  COMF   07,F
....................     system_var.lcddata    = ~lcd_ins_hthi;      
0204:  MOVFF  58,06
0208:  COMF   06,F
....................     private_write_glcd_lcd();
020A:  RCALL  01D8
....................     return OK;
020C:  MOVLW  00
020E:  MOVWF  01
0210:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     system_var.glcdcontrol = ~glcd_signal;
0212:  MOVF   53,W
0214:  MOVWF  09
0216:  COMF   09,F
....................     system_var.glcddata    = ~glcd_ins_hthi;     
0218:  MOVFF  54,08
021C:  COMF   08,F
....................     private_write_glcd_lcd();
021E:  RCALL  01D8
....................     return OK;
0220:  MOVLW  00
0222:  MOVWF  01
0224:  GOTO   02A8 (RETURN)
.................... }
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {     
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3);
0228:  CLRF   5C
022A:  MOVFF  5A,5D
022E:  RCALL  007E
0230:  MOVFF  59,5D
0234:  RCALL  007E
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2);
0236:  CLRF   5C
0238:  MOVFF  58,5D
023C:  RCALL  007E
023E:  MOVFF  57,5D
0242:  RCALL  007E
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1);
0244:  CLRF   5C
0246:  MOVFF  56,5D
024A:  RCALL  007E
024C:  MOVFF  55,5D
0250:  RCALL  007E
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang);
0252:  CLRF   5C
0254:  MOVFF  54,5D
0258:  RCALL  007E
025A:  MOVFF  53,5D
025E:  RCALL  007E
....................       output_high(matrix_rck);
0260:  BCF    F95.7
0262:  BSF    F8C.7
....................       output_low(matrix_rck); 
0264:  BCF    F95.7
0266:  BCF    F8C.7
....................       return OK;
0268:  MOVLW  00
026A:  MOVWF  01
026C:  GOTO   02BA (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_buzzer_relay()
.................... {       
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);      
*
00F0:  MOVFF  05,5D
00F4:  RCALL  007E
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]);
00F6:  MOVFF  04,5D
00FA:  RCALL  007E
....................       output_high(rbdc_rck);
00FC:  BCF    F95.3
00FE:  BSF    F8C.3
....................       output_low(rbdc_rck); 
0100:  BCF    F95.3
0102:  BCF    F8C.3
....................       return OK;
0104:  MOVLW  00
0106:  MOVWF  01
0108:  GOTO   028E (RETURN)
.................... }
.................... result buzzer_on()
.................... {    
....................       system_var.rbdc.bit.buzzer=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result buzzer_off()
.................... {     
....................       system_var.rbdc.bit.buzzer=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_1_on()
.................... {    
....................       system_var.rbdc.bit.relay_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_1_off()
.................... {    
....................       system_var.rbdc.bit.relay_1=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_2_on()
.................... {    
....................       system_var.rbdc.bit.relay_2=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_2_off()
.................... {    
....................       system_var.rbdc.bit.relay_2=0;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_on()
.................... {    
....................       system_var.rbdc.bit.triac_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_off()
.................... {    
....................       system_var.rbdc.bit.triac_1=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result triac_2_on()
.................... {    
....................       system_var.rbdc.bit.triac_2=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result triac_2_off()
.................... {    
....................       system_var.rbdc.bit.triac_2=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result DCMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1;
....................       private_write_buzzer_relay();  
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................       setup_ccp1(ccp_pwm);  
....................       setup_ccp2(ccp_pwm);  
....................       return OK;
.................... }
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  }
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  }
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  }
....................      return OK;
.................... }
.................... 
.................... result STEPMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.step_motor_enable=1;
....................       return OK;
.................... }
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07};
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0);
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1);
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2);
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3);
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................      output_high(ALLMODULE_G);  
*
0270:  BCF    F95.0
0272:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                   
0274:  MOVLW  FF
0276:  MOVWF  F92
0278:  MOVLW  3C
027A:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                               
027C:  MOVLW  F1
027E:  MOVWF  F94
0280:  MOVLW  00
0282:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00); 
0284:  MOVWF  F95
0286:  CLRF   F95
0288:  CLRF   F8C
....................      port_b_pullups(0xff); 
028A:  BCF    FF1.7
....................      private_write_buzzer_relay();
028C:  BRA    00F0
....................      led32.ledx32=0;
028E:  CLRF   11
0290:  CLRF   10
0292:  CLRF   0F
0294:  CLRF   0E
....................      led32_display();
0296:  BRA    010C
....................      d7seg_display();
0298:  BRA    0134
....................      s7seg_display();
029A:  BRA    0182
....................      write_lcd20x4(0xff,0xff);
029C:  SETF   57
029E:  SETF   58
02A0:  RCALL  01FE
....................      write_glcd128x64(0xff,0xff);
02A2:  SETF   53
02A4:  SETF   54
02A6:  BRA    0212
....................      write_ledmatrix(0,0,0,0); 
02A8:  CLRF   54
02AA:  CLRF   53
02AC:  CLRF   56
02AE:  CLRF   55
02B0:  CLRF   58
02B2:  CLRF   57
02B4:  CLRF   5A
02B6:  CLRF   59
02B8:  BRA    0228
....................      output_low(ALLMODULE_G);  
02BA:  BCF    F95.0
02BC:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);        
02BE:  MOVF   FC0,W
02C0:  ANDLW  C0
02C2:  IORLW  02
02C4:  MOVWF  FC0
02C6:  BSF    FC0.7
02C8:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);   
02CA:  MOVF   FC1,W
02CC:  ANDLW  C0
02CE:  IORLW  0C
02D0:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8);
02D2:  MOVLW  B5
02D4:  MOVWF  FB1
....................      return OK;
02D6:  MOVLW  00
02D8:  MOVWF  01
02DA:  GOTO   08EC (RETURN)
.................... }
.................... void SSPI_WRITE(unsigned int8 x)
.................... { 
....................          if(x&0x80) ssdo=1; 
*
007E:  BTFSS  5D.7
0080:  BRA    0086
0082:  BSF    F84.2
0084:  BRA    0088
....................          else       ssdo=0;
0086:  BCF    F84.2
....................          ssck=0;    ssck=1;   
0088:  BCF    F84.0
008A:  BSF    F84.0
....................          if(x&0x40) ssdo=1; 
008C:  BTFSS  5D.6
008E:  BRA    0094
0090:  BSF    F84.2
0092:  BRA    0096
....................          else       ssdo=0;
0094:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0096:  BCF    F84.0
0098:  BSF    F84.0
....................          if(x&0x20) ssdo=1; 
009A:  BTFSS  5D.5
009C:  BRA    00A2
009E:  BSF    F84.2
00A0:  BRA    00A4
....................          else       ssdo=0;
00A2:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00A4:  BCF    F84.0
00A6:  BSF    F84.0
....................          if(x&0x10) ssdo=1; 
00A8:  BTFSS  5D.4
00AA:  BRA    00B0
00AC:  BSF    F84.2
00AE:  BRA    00B2
....................          else       ssdo=0;
00B0:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00B2:  BCF    F84.0
00B4:  BSF    F84.0
....................          if(x&0x08) ssdo=1; 
00B6:  BTFSS  5D.3
00B8:  BRA    00BE
00BA:  BSF    F84.2
00BC:  BRA    00C0
....................          else       ssdo=0;
00BE:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00C0:  BCF    F84.0
00C2:  BSF    F84.0
....................          if(x&0x04) ssdo=1; 
00C4:  BTFSS  5D.2
00C6:  BRA    00CC
00C8:  BSF    F84.2
00CA:  BRA    00CE
....................          else       ssdo=0;
00CC:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00CE:  BCF    F84.0
00D0:  BSF    F84.0
....................          if(x&0x02) ssdo=1; 
00D2:  BTFSS  5D.1
00D4:  BRA    00DA
00D6:  BSF    F84.2
00D8:  BRA    00DC
....................          else       ssdo=0;
00DA:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00DC:  BCF    F84.0
00DE:  BSF    F84.0
....................          if(x&0x01) ssdo=1; 
00E0:  BTFSS  5D.0
00E2:  BRA    00E8
00E4:  BSF    F84.2
00E6:  BRA    00EA
....................          else       ssdo=0;
00E8:  BCF    F84.2
....................          ssck=0;    ssck=1;       
00EA:  BCF    F84.0
00EC:  BSF    F84.0
00EE:  RETURN 0
.................... }
.................... #endif
.................... 
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
0596:  MOVF   FB2,W
0598:  MOVFF  FB3,03
059C:  ADDWF  0A,F
059E:  MOVF   FB3,W
05A0:  ADDWFC 0B,F
05A2:  MOVLW  00
05A4:  ADDWFC 0C,F
05A6:  ADDWFC 0D,F
05A8:  CLRF   FB3
05AA:  MOVLW  02
05AC:  MOVWF  FB2
05AE:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
05B0:  BTFSS  FA1.1
05B2:  BRA    05BC
05B4:  MOVLW  01
05B6:  ADDWF  0C,F
05B8:  MOVLW  00
05BA:  ADDWFC 0D,F
05BC:  BCF    FA1.1
....................       return delay.timeline/625;
05BE:  BCF    FD8.1
05C0:  MOVFF  0D,5C
05C4:  MOVFF  0C,5B
05C8:  MOVFF  0B,5A
05CC:  MOVFF  0A,59
05D0:  CLRF   x60
05D2:  CLRF   5F
05D4:  MOVLW  02
05D6:  MOVWF  5E
05D8:  MOVLW  71
05DA:  MOVWF  5D
05DC:  RCALL  0508
05DE:  MOVFF  01,02
05E2:  MOVFF  00,01
05E6:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
05E8:  MOVF   FB2,W
05EA:  MOVFF  FB3,03
05EE:  ADDWF  0A,F
05F0:  MOVF   FB3,W
05F2:  ADDWFC 0B,F
05F4:  MOVLW  00
05F6:  ADDWFC 0C,F
05F8:  ADDWFC 0D,F
05FA:  CLRF   FB3
05FC:  MOVLW  02
05FE:  MOVWF  FB2
0600:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
0602:  BTFSS  FA1.1
0604:  BRA    060E
0606:  MOVLW  01
0608:  ADDWF  0C,F
060A:  MOVLW  00
060C:  ADDWFC 0D,F
060E:  BCF    FA1.1
....................       tam = delay.timeline/625;
0610:  BCF    FD8.1
0612:  MOVFF  0D,5C
0616:  MOVFF  0C,5B
061A:  MOVFF  0B,5A
061E:  MOVFF  0A,59
0622:  CLRF   x60
0624:  CLRF   5F
0626:  MOVLW  02
0628:  MOVWF  5E
062A:  MOVLW  71
062C:  MOVWF  5D
062E:  RCALL  0508
0630:  MOVFF  01,58
0634:  MOVFF  00,57
....................       if(t<=tam) return tam-t;
0638:  MOVF   56,W
063A:  SUBWF  58,W
063C:  BNC   065C
063E:  BNZ   0646
0640:  MOVF   55,W
0642:  SUBWF  57,W
0644:  BNC   065C
0646:  MOVF   55,W
0648:  SUBWF  57,W
064A:  MOVWF  00
064C:  MOVF   56,W
064E:  SUBWFB 58,W
0650:  MOVWF  03
0652:  MOVFF  00,01
0656:  MOVWF  02
0658:  BRA    0678
065A:  BRA    0678
....................       else       return 0xffff-t + tam;
065C:  MOVLW  FF
065E:  BSF    FD8.0
0660:  SUBFWB 55,W
0662:  MOVWF  59
0664:  MOVLW  FF
0666:  SUBFWB 56,W
0668:  MOVWF  5A
066A:  MOVF   57,W
066C:  ADDWF  59,W
066E:  MOVWF  01
0670:  MOVF   58,W
0672:  ADDWFC 5A,W
0674:  MOVWF  03
0676:  MOVWF  02
0678:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
067A:  MOVFF  53,55
067E:  MOVLW  01
0680:  MOVWF  56
0682:  MOVLW  0F
0684:  MOVWF  58
0686:  MOVLW  92
0688:  MOVWF  57
068A:  RCALL  0498
....................       switch (step)
068C:  MOVF   22,W
068E:  ADDLW  FC
0690:  BTFSC  FD8.0
0692:  BRA    0802
0694:  ADDLW  04
0696:  GOTO   080A
....................       {
....................           case 0:
....................                  if(input(pin)==0)
069A:  MOVFF  53,55
069E:  MOVLW  01
06A0:  MOVWF  56
06A2:  MOVLW  0F
06A4:  MOVWF  58
06A6:  MOVLW  92
06A8:  MOVWF  57
06AA:  RCALL  0498
06AC:  MOVFF  53,55
06B0:  MOVLW  0F
06B2:  MOVWF  57
06B4:  MOVLW  80
06B6:  MOVWF  56
06B8:  RCALL  04D6
06BA:  BTFSC  01.0
06BC:  BRA    06D4
....................                   {
....................                         oldpin   = pin;
06BE:  MOVFF  54,1F
06C2:  MOVFF  53,1E
....................                         t        = delay_start();
06C6:  RCALL  0596
06C8:  MOVFF  02,21
06CC:  MOVFF  01,20
....................                         step     = 1;
06D0:  MOVLW  01
06D2:  MOVWF  22
....................                   }
....................                  break;
06D4:  BRA    0802
....................            case 1:
....................                  if(input(oldpin))step = 0;
06D6:  MOVFF  1E,55
06DA:  MOVLW  01
06DC:  MOVWF  56
06DE:  MOVLW  0F
06E0:  MOVWF  58
06E2:  MOVLW  92
06E4:  MOVWF  57
06E6:  RCALL  0498
06E8:  MOVFF  1E,55
06EC:  MOVLW  0F
06EE:  MOVWF  57
06F0:  MOVLW  80
06F2:  MOVWF  56
06F4:  RCALL  04D6
06F6:  BTFSS  01.0
06F8:  BRA    06FE
06FA:  CLRF   22
06FC:  BRA    073A
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
06FE:  MOVF   1E,W
0700:  SUBWF  53,W
0702:  BNZ   073A
0704:  MOVF   1F,W
0706:  SUBWF  54,W
0708:  BNZ   073A
070A:  MOVFF  21,56
070E:  MOVFF  20,55
0712:  RCALL  05E8
0714:  MOVFF  02,56
0718:  MOVFF  01,55
071C:  MOVF   56,F
071E:  BNZ   0726
0720:  MOVF   55,W
0722:  SUBLW  1D
0724:  BC    073A
....................                    {
....................                       t    = delay_start();
0726:  RCALL  0596
0728:  MOVFF  02,21
072C:  MOVFF  01,20
....................                       step = 2;
0730:  MOVLW  02
0732:  MOVWF  22
....................                       return OK;
0734:  MOVLW  00
0736:  MOVWF  01
0738:  BRA    0806
....................                    }
....................                  break;
073A:  BRA    0802
....................             case 2:
....................                  if(input(oldpin))step = 0;
073C:  MOVFF  1E,55
0740:  MOVLW  01
0742:  MOVWF  56
0744:  MOVLW  0F
0746:  MOVWF  58
0748:  MOVLW  92
074A:  MOVWF  57
074C:  RCALL  0498
074E:  MOVFF  1E,55
0752:  MOVLW  0F
0754:  MOVWF  57
0756:  MOVLW  80
0758:  MOVWF  56
075A:  RCALL  04D6
075C:  BTFSS  01.0
075E:  BRA    0764
0760:  CLRF   22
0762:  BRA    07A0
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
0764:  MOVF   1E,W
0766:  SUBWF  53,W
0768:  BNZ   07A0
076A:  MOVF   1F,W
076C:  SUBWF  54,W
076E:  BNZ   07A0
0770:  MOVFF  21,56
0774:  MOVFF  20,55
0778:  RCALL  05E8
077A:  MOVFF  02,56
077E:  MOVFF  01,55
0782:  MOVF   02,W
0784:  SUBLW  00
0786:  BC    07A0
0788:  XORLW  FF
078A:  BNZ   0792
078C:  MOVF   55,W
078E:  SUBLW  F3
0790:  BC    07A0
....................                    {
....................                        t        = delay_start();
0792:  RCALL  0596
0794:  MOVFF  02,21
0798:  MOVFF  01,20
....................                        step     = 3;
079C:  MOVLW  03
079E:  MOVWF  22
....................                    } 
....................                  break;
07A0:  BRA    0802
....................             case 3:
....................                    if(input(oldpin))step = 0; 
07A2:  MOVFF  1E,55
07A6:  MOVLW  01
07A8:  MOVWF  56
07AA:  MOVLW  0F
07AC:  MOVWF  58
07AE:  MOVLW  92
07B0:  MOVWF  57
07B2:  RCALL  0498
07B4:  MOVFF  1E,55
07B8:  MOVLW  0F
07BA:  MOVWF  57
07BC:  MOVLW  80
07BE:  MOVWF  56
07C0:  RCALL  04D6
07C2:  BTFSS  01.0
07C4:  BRA    07CA
07C6:  CLRF   22
07C8:  BRA    0802
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
07CA:  MOVF   1E,W
07CC:  SUBWF  53,W
07CE:  BNZ   0802
07D0:  MOVF   1F,W
07D2:  SUBWF  54,W
07D4:  BNZ   0802
07D6:  MOVFF  21,56
07DA:  MOVFF  20,55
07DE:  RCALL  05E8
07E0:  MOVFF  02,56
07E4:  MOVFF  01,55
07E8:  MOVF   56,F
07EA:  BNZ   07F2
07EC:  MOVF   55,W
07EE:  SUBLW  63
07F0:  BC    0802
....................                        {
....................                           t  = delay_start();
07F2:  RCALL  0596
07F4:  MOVFF  02,21
07F8:  MOVFF  01,20
....................                           return OK;
07FC:  MOVLW  00
07FE:  MOVWF  01
0800:  BRA    0806
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
0802:  MOVLW  02
0804:  MOVWF  01
0806:  GOTO   0836 (RETURN)
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_lcd.c>
.................... #ifndef  __TV_LCD_C__
.................... #define  __TV_LCD_C__
.................... #include<TV_LCD.h>
.................... #ifndef __tv_lcd_h__
.................... #define __tv_lcd_h__
.................... typedef enum 
.................... {
....................       lcd_clear_display  = 0x01,
....................       lcd_shift_left     = 0x18,
....................       lcd_shift_right    = 0x1c,
.................... }LCD_COMMANDS;
.................... result lcd_command(int8 command);
.................... result lcd_data(int8 data);
.................... result lcd_setup(void);
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) ; 
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2);
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17);
.................... //xxxxxxxxxxxxxxxxxxxxxxxx Font xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 LCD_SO_X[11][6] ={       // Font 3x2
....................                   0,1,2,5,3,4,               // SO 0
....................                   1,2,32,3,7,3,              // SO 1
....................                   6,6,2,5,3,3,               // SO 2
....................                   6,6,2,3,3,4,               // SO 3
....................                   5,3,7,32,32,7,             // SO 4
....................                   7,6,6,3,3,4,               // SO 5
....................                   0,6,6,5,3,4,               // SO 6
....................                   1,1,7,32,32,7,             // SO 7
....................                   0,6,2,5,3,4,               // SO 8
....................                   0,6,2,3,3,4,               // SO 9
....................                   32,32,32,32,32,32          // XOA
....................                   };             
.................... const unsigned int8 LCD_SO_X1[11][12] ={           //Font 3x4
....................                   0,1,2,7,32,7,7,32,7,5,3,4,       //0   
....................                   1,2,32,32,7,32,32,7,32,3,7,3,    //1  
....................                   1,1,2,3,3,7,7,32,32,5,3,3,       //2           
....................                   0,1,2,32,3,4,32,32,2,5,3,4,      //3
....................                   7,32,7,5,3,7,32,32,7,32,32,7,    //4             
....................                   7,1,1,7,3,3,32,32,7,5,3,4,       //5           
....................                   0,1,2,7,3,3,7,32,7,5,3,4,        //6             
....................                   1,1,7,32,32,4,32,0,32,32,7,32,   //7             
....................                   0,1,2,5,3,4,0,32,2,5,3,4,        //8     
....................                   0,1,2,5,3,7,32,32,7,5,3,4,       //9 
....................                   32,32,32,32,32,32,32,32,32,32,32,32}; //XOA                  
....................                   
.................... const unsigned int8 LCD_MA_8DOAN[] = {
....................                   0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  
....................                   0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, 
....................                   0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07, 
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; 
....................    
.................... const unsigned char LCD_MA_TRAITAO[]={
....................                0,0,0,0x0c,0x1f,0x1f,0x1f,0x1f,
....................                0x0e,0x1c,0x10,0x06,0x1f,0x1f,0x1f,0x1f
....................                ,0x0f,0x07,0x03,0,0,0,0,0,
....................                0x1e,0x1c,0x18,0,0,0,0,0};
.................... #endif
.................... 
.................... result  lcd_command(int8 command)
.................... {    
....................       write_lcd20x4(0x01,command);     
*
02F8:  MOVLW  01
02FA:  MOVWF  57
02FC:  MOVFF  56,58
0300:  RCALL  01FE
....................       write_lcd20x4(0x00,command); 
0302:  CLRF   57
0304:  MOVFF  56,58
0308:  RCALL  01FE
....................       delay_us(200);
030A:  MOVLW  C8
030C:  MOVWF  57
030E:  RCALL  02DE
....................       return OK;
0310:  MOVLW  00
0312:  MOVWF  01
0314:  RETURN 0
.................... }
.................... result lcd_data(int8 data)
.................... {
....................       write_lcd20x4(0x05,data);     
0316:  MOVLW  05
0318:  MOVWF  57
031A:  MOVFF  55,58
031E:  RCALL  01FE
....................       write_lcd20x4(0x04,data); 
0320:  MOVLW  04
0322:  MOVWF  57
0324:  MOVFF  55,58
0328:  RCALL  01FE
....................       delay_us(200);
032A:  MOVLW  C8
032C:  MOVWF  57
032E:  RCALL  02DE
....................       return OK;
0330:  MOVLW  00
0332:  MOVWF  01
0334:  RETURN 0
.................... }
.................... result lcd_setup()
.................... {
....................       int8 n;
....................       lcd_command(0x3c);  delay_ms(5);
0336:  MOVLW  3C
0338:  MOVWF  56
033A:  RCALL  02F8
033C:  MOVLW  05
033E:  MOVWF  55
0340:  RCALL  015C
....................       lcd_command(0x3c);  delay_ms(5);
0342:  MOVLW  3C
0344:  MOVWF  56
0346:  RCALL  02F8
0348:  MOVLW  05
034A:  MOVWF  55
034C:  RCALL  015C
....................       lcd_command(0x0c);    
034E:  MOVLW  0C
0350:  MOVWF  56
0352:  RCALL  02F8
....................       lcd_command(0x06); 
0354:  MOVLW  06
0356:  MOVWF  56
0358:  RCALL  02F8
....................       lcd_command(0x40);                             // di chuyen den dia chi dau vung nho CGRAM
035A:  MOVLW  40
035C:  MOVWF  56
035E:  RCALL  02F8
....................       for(n=0;n<64;n++) lcd_data(LCD_MA_8DOAN[n]);   // ghi ma cua ky tu moi tao vao CGRAM
0360:  CLRF   53
0362:  MOVF   53,W
0364:  SUBLW  3F
0366:  BNC   0378
0368:  CLRF   03
036A:  MOVF   53,W
036C:  RCALL  0004
036E:  MOVWF  54
0370:  MOVWF  55
0372:  RCALL  0316
0374:  INCF   53,F
0376:  BRA    0362
....................       lcd_command(lcd_clear_display); delay_ms(2);
0378:  MOVLW  01
037A:  MOVWF  56
037C:  RCALL  02F8
037E:  MOVLW  02
0380:  MOVWF  55
0382:  RCALL  015C
....................       return OK;
0384:  MOVLW  00
0386:  MOVWF  01
0388:  GOTO   08EE (RETURN)
.................... }
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) 
.................... {
....................       const unsigned int8 dc[]={0x80,0xc0,0x94,0xd4};
....................        lcd_command(dc[row_0_3]+colum_0_19);
038C:  CLRF   03
038E:  MOVF   54,W
0390:  RCALL  0054
0392:  ADDWF  53,W
0394:  MOVWF  55
0396:  MOVWF  56
0398:  RCALL  02F8
....................        return OK;
039A:  MOVLW  00
039C:  MOVWF  01
039E:  RETURN 0
.................... }
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2)
.................... {     
....................       lcd_goto(colum_0_17,row_0_2);
....................       for (int8 i=0;i<6;i++)     
....................       {                  
....................         if (i==3)   lcd_goto(colum_0_17,row_0_2+1);             
....................         lcd_data(lcd_so_x[num_0_9][i]);     
....................       } 
....................       return OK;
.................... }
.................... 
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17)
.................... {
....................       for(int8 n=0;n<12;n++)
....................       {
....................             if(n%3==0)LCD_GOTO(colum_0_17,n/3); 
....................             LCD_DATA(LCD_SO_X1[num_0_9][n]);
....................       }
....................       return OK;
.................... }
.................... #endif
.................... 
.................... signed int8 giay=0,i,j,n=1,chieuchu=1;
.................... signed int8 chieu=1;
.................... unsigned int8 chuoi[]="TRUONG DAI HOC SU PHAM KY THUAT TP.HCM";
.................... void hienthi_muiten()
.................... {
....................    if(chieu==1)
*
03C0:  DECFSZ 28,W
03C2:  BRA    03E6
....................    {
....................       lcd_goto(0,1);
03C4:  CLRF   53
03C6:  MOVLW  01
03C8:  MOVWF  54
03CA:  RCALL  038C
....................       lcd_data(0x7e);
03CC:  MOVLW  7E
03CE:  MOVWF  55
03D0:  RCALL  0316
....................       lcd_goto(0,2);
03D2:  CLRF   53
03D4:  MOVLW  02
03D6:  MOVWF  54
03D8:  RCALL  038C
....................       lcd_data(" ");
03DA:  MOVLW  68
03DC:  MOVWF  FF6
03DE:  MOVLW  00
03E0:  MOVWF  FF7
03E2:  RCALL  03A0
....................    }
03E4:  BRA    0406
....................    else
....................    {
....................       lcd_goto(0,1);
03E6:  CLRF   53
03E8:  MOVLW  01
03EA:  MOVWF  54
03EC:  RCALL  038C
....................       lcd_data(" ");
03EE:  MOVLW  6A
03F0:  MOVWF  FF6
03F2:  MOVLW  00
03F4:  MOVWF  FF7
03F6:  RCALL  03A0
....................       lcd_goto(0,2);
03F8:  CLRF   53
03FA:  MOVLW  02
03FC:  MOVWF  54
03FE:  RCALL  038C
....................       lcd_data(0x7e);
0400:  MOVLW  7E
0402:  MOVWF  55
0404:  RCALL  0316
....................    }
0406:  RETURN 0
.................... }
.................... void kt_nutnhan()
.................... {
....................    if(inputcd(inv)==0)
*
082C:  MOVLW  7C
082E:  MOVWF  54
0830:  MOVLW  0B
0832:  MOVWF  53
0834:  BRA    067A
0836:  MOVF   01,F
0838:  BNZ   083E
....................    {
....................       chieu=-chieu;
083A:  NEGF   28
....................       hienthi_muiten();
083C:  RCALL  03C0
....................       break;
....................    }
083E:  GOTO   0952 (RETURN)
.................... }
.................... void main() 
0842:  CLRF   FF8
0844:  BCF    FD0.7
0846:  BSF    FB8.3
0848:  MOVLW  08
084A:  MOVWF  FAF
084C:  MOVLW  02
084E:  MOVWF  FB0
0850:  MOVLW  A6
0852:  MOVWF  FAC
0854:  MOVLW  90
0856:  MOVWF  FAB
0858:  CLRF   23
085A:  MOVLW  01
085C:  MOVWF  26
085E:  MOVWF  27
0860:  MOVWF  28
0862:  CLRF   51
0864:  CLRF   50
0866:  MOVF   FC1,W
0868:  ANDLW  C0
086A:  IORLW  0F
086C:  MOVWF  FC1
086E:  MOVLW  07
0870:  MOVWF  FB4
0872:  BRA    08AC
0874:  DATA 06,40
0876:  DATA 04,00
0878:  DATA 0E,40
087A:  DATA 12,FF
087C:  DATA 03,80
087E:  DATA 00,00
0880:  DATA 00,27
0882:  DATA 00,29
0884:  DATA 54,52
0886:  DATA 55,4F
0888:  DATA 4E,47
088A:  DATA 20,44
088C:  DATA 41,49
088E:  DATA 20,48
0890:  DATA 4F,43
0892:  DATA 20,53
0894:  DATA 55,20
0896:  DATA 50,48
0898:  DATA 41,4D
089A:  DATA 20,4B
089C:  DATA 59,20
089E:  DATA 54,48
08A0:  DATA 55,41
08A2:  DATA 54,20
08A4:  DATA 54,50
08A6:  DATA 2E,48
08A8:  DATA 43,4D
08AA:  DATA 00,00
08AC:  MOVLW  00
08AE:  MOVWF  FF8
08B0:  MOVLW  08
08B2:  MOVWF  FF7
08B4:  MOVLW  74
08B6:  MOVWF  FF6
08B8:  TBLRD*+
08BA:  MOVF   FF5,W
08BC:  MOVWF  00
08BE:  XORLW  00
08C0:  BZ    08E8
08C2:  TBLRD*+
08C4:  MOVF   FF5,W
08C6:  MOVWF  01
08C8:  BTFSC  FE8.7
08CA:  BRA    08D6
08CC:  ANDLW  3F
08CE:  MOVWF  FEA
08D0:  TBLRD*+
08D2:  MOVFF  FF5,FE9
08D6:  BTFSC  01.6
08D8:  TBLRD*+
08DA:  BTFSS  01.6
08DC:  TBLRD*+
08DE:  MOVFF  FF5,FEE
08E2:  DCFSNZ 00,F
08E4:  BRA    08B8
08E6:  BRA    08DA
08E8:  CLRF   FF8
.................... {
....................       system_init();  
08EA:  BRA    0270
....................       lcd_setup();
08EC:  BRA    0336
....................       lcd_goto(1,1);
08EE:  MOVLW  01
08F0:  MOVWF  53
08F2:  MOVWF  54
08F4:  RCALL  038C
....................       lcd_data("DEM LEN");
08F6:  MOVLW  6C
08F8:  MOVWF  FF6
08FA:  MOVLW  00
08FC:  MOVWF  FF7
08FE:  RCALL  03A0
....................       lcd_goto(1,2);
0900:  MOVLW  01
0902:  MOVWF  53
0904:  MOVLW  02
0906:  MOVWF  54
0908:  RCALL  038C
....................       lcd_data("DEM XUONG");
090A:  MOVLW  74
090C:  MOVWF  FF6
090E:  MOVLW  00
0910:  MOVWF  FF7
0912:  RCALL  03A0
....................       hienthi_muiten();
0914:  RCALL  03C0
....................       while(true)
....................       {                  
....................            lcd_goto(9,3);
0916:  MOVLW  09
0918:  MOVWF  53
091A:  MOVLW  03
091C:  MOVWF  54
091E:  RCALL  038C
....................            printf(lcd_data,"%02u",giay);
0920:  MOVFF  23,53
0924:  MOVLW  01
0926:  MOVWF  54
0928:  BRA    0430
....................            giay=giay+chieu;
092A:  MOVF   28,W
092C:  ADDWF  23,F
....................            if(giay>=60) giay=0;
092E:  BTFSC  23.7
0930:  BRA    093C
0932:  MOVF   23,W
0934:  SUBLW  3B
0936:  BC    093C
0938:  CLRF   23
093A:  BRA    0944
....................            else if(giay<0) giay=59;
093C:  BTFSS  23.7
093E:  BRA    0944
0940:  MOVLW  3B
0942:  MOVWF  23
....................            for(j=0;j<100;j++)
0944:  CLRF   25
0946:  BTFSC  25.7
0948:  BRA    0950
094A:  MOVF   25,W
094C:  SUBLW  63
094E:  BNC   095C
....................            {
....................                kt_nutnhan();
0950:  BRA    082C
....................                delay_ms(10);
0952:  MOVLW  0A
0954:  MOVWF  55
0956:  RCALL  015C
0958:  INCF   25,F
095A:  BRA    0946
....................            }
....................            if((n==0)||(n==(sizeof(chuoi)-21))) 
095C:  MOVF   26,F
095E:  BZ    0966
0960:  MOVF   26,W
0962:  SUBLW  12
0964:  BNZ   0968
....................            {
....................             chieuchu=-chieuchu;
0966:  NEGF   27
....................            }
....................            lcd_goto(0,0);
0968:  CLRF   53
096A:  CLRF   54
096C:  RCALL  038C
....................            for(int8 m=n;m<n+20;m++) lcd_data(chuoi[m]); 
096E:  MOVFF  26,52
0972:  MOVLW  14
0974:  ADDWF  26,W
0976:  MOVWF  00
0978:  BTFSC  FE8.7
097A:  BRA    099A
097C:  MOVF   00,W
097E:  SUBWF  52,W
0980:  BC    099A
0982:  CLRF   03
0984:  MOVF   52,W
0986:  ADDLW  29
0988:  MOVWF  FE9
098A:  MOVLW  00
098C:  ADDWFC 03,W
098E:  MOVWF  FEA
0990:  MOVFF  FEF,55
0994:  RCALL  0316
0996:  INCF   52,F
0998:  BRA    0972
....................            n=n+chieuchu;
099A:  MOVF   27,W
099C:  ADDWF  26,F
099E:  BRA    0916
....................       }
.................... }
.................... 
09A0:  SLEEP 
.................... 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
