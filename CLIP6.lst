CCS PCH C Compiler, Version 5.101, 43599               10-Mar-23 09:19

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\CLIP6.lst

               ROM used:   3092 bytes (2%)
                           Largest free fragment is 65536
               RAM used:   74 (2%) at main() level
                           93 (2%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   09F6
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   01A4
00068:  MOVFF  0E,00
0006C:  MOVFF  0F,01
00070:  MOVFF  10,02
00074:  MOVFF  11,03
00078:  MOVFF  0C,FE9
0007C:  MOVFF  07,FEA
00080:  BSF    07.7
00082:  MOVFF  08,FE1
00086:  MOVFF  09,FE2
0008A:  MOVFF  0A,FD9
0008E:  MOVFF  0B,FDA
00092:  MOVFF  12,FF3
00096:  MOVFF  13,FF4
0009A:  MOVFF  14,FFA
0009E:  MOVFF  15,FF5
000A2:  MOVFF  16,FF6
000A6:  MOVFF  17,FF7
000AA:  MOVFF  18,FF8
000AE:  MOVFF  19,FFB
000B2:  MOVF   04,W
000B4:  MOVFF  06,FE0
000B8:  MOVFF  05,FD8
000BC:  RETFIE 0
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
000BE:  CLRF   FF7
000C0:  ADDLW  D2
000C2:  MOVWF  FF6
000C4:  MOVLW  00
000C6:  ADDWFC FF7,F
000C8:  MOVLW  00
000CA:  MOVWF  FF8
000CC:  TBLRD*+
000CE:  MOVF   FF5,W
000D0:  RETURN 0
000D2:  DATA EF,DF
000D4:  DATA BF,7F
000D6:  CLRF   FF7
000D8:  ADDLW  EA
000DA:  MOVWF  FF6
000DC:  MOVLW  00
000DE:  ADDWFC FF7,F
000E0:  MOVLW  00
000E2:  MOVWF  FF8
000E4:  TBLRD*+
000E6:  MOVF   FF5,W
000E8:  RETURN 0
000EA:  DATA 07,0F
000EC:  DATA 1F,1F
000EE:  DATA 1F,1F
000F0:  DATA 1F,1F
000F2:  DATA 1F,1F
000F4:  DATA 1F,00
000F6:  DATA 00,00
000F8:  DATA 00,00
000FA:  DATA 1C,1E
000FC:  DATA 1F,1F
000FE:  DATA 1F,1F
00100:  DATA 1F,1F
00102:  DATA 00,00
00104:  DATA 00,00
00106:  DATA 00,1F
00108:  DATA 1F,1F
0010A:  DATA 1F,1F
0010C:  DATA 1F,1F
0010E:  DATA 1F,1F
00110:  DATA 1E,1C
00112:  DATA 1F,1F
00114:  DATA 1F,1F
00116:  DATA 1F,1F
00118:  DATA 0F,07
0011A:  DATA 1F,1F
0011C:  DATA 1F,00
0011E:  DATA 00,00
00120:  DATA 1F,1F
00122:  DATA 1F,1F
00124:  DATA 1F,1F
00126:  DATA 1F,1F
00128:  DATA 1F,1F
0012A:  CLRF   FF7
0012C:  ADDLW  3E
0012E:  MOVWF  FF6
00130:  MOVLW  01
00132:  ADDWFC FF7,F
00134:  MOVLW  00
00136:  MOVWF  FF8
00138:  TBLRD*+
0013A:  MOVF   FF5,W
0013C:  RETURN 0
0013E:  DATA 80,C0
00140:  DATA 94,D4
00142:  DATA 20,20
00144:  DATA 20,20
00146:  DATA 20,20
00148:  DATA 20,20
0014A:  DATA 20,20
0014C:  DATA 20,20
0014E:  DATA 20,20
00150:  DATA 20,20
00152:  DATA 20,20
00154:  DATA 20,20
00156:  DATA 00,00
00158:  DATA 20,20
0015A:  DATA 00,00
0015C:  DATA 43,48
0015E:  DATA 49,4E
00160:  DATA 48,20
00162:  DATA 47,49
00164:  DATA 4F,00
00166:  DATA 20,20
00168:  DATA 00,00
0016A:  DATA 43,48
0016C:  DATA 49,4E
0016E:  DATA 48,20
00170:  DATA 50,48
00172:  DATA 55,54
00174:  DATA 00,00
00176:  DATA 20,20
00178:  DATA 00,00
0017A:  DATA 43,48
0017C:  DATA 49,4E
0017E:  DATA 48,20
00180:  DATA 47,49
00182:  DATA 41,59
00184:  DATA 00,00
00186:  DATA 20,20
00188:  DATA 00,00
0018A:  DATA 43,41
0018C:  DATA 49,20
0018E:  DATA 47,49
00190:  DATA 4F,49
00192:  DATA 20,48
00194:  DATA 41,4E
00196:  DATA 20,53
00198:  DATA 50,00
0019A:  DATA 32,30
0019C:  DATA 31,34
0019E:  DATA 32,31
001A0:  DATA 35,37
001A2:  DATA 00,00
*
00472:  TBLRD*+
00474:  MOVF   FF5,F
00476:  BZ    0498
00478:  MOVFF  FF6,49
0047C:  MOVFF  FF7,4A
00480:  MOVFF  FF8,4B
00484:  MOVFF  FF5,4C
00488:  RCALL  03E8
0048A:  MOVFF  49,FF6
0048E:  MOVFF  4A,FF7
00492:  MOVFF  4B,FF8
00496:  BRA    0472
00498:  RETURN 0
*
00542:  BTFSC  FD8.1
00544:  BRA    054C
00546:  CLRF   FEA
00548:  MOVLW  55
0054A:  MOVWF  FE9
0054C:  CLRF   00
0054E:  CLRF   01
00550:  CLRF   02
00552:  CLRF   03
00554:  CLRF   55
00556:  CLRF   56
00558:  CLRF   57
0055A:  CLRF   58
0055C:  MOVF   54,W
0055E:  IORWF  53,W
00560:  IORWF  52,W
00562:  IORWF  51,W
00564:  BZ    05BE
00566:  MOVLW  20
00568:  MOVWF  59
0056A:  BCF    FD8.0
0056C:  RLCF   4D,F
0056E:  RLCF   4E,F
00570:  RLCF   4F,F
00572:  RLCF   50,F
00574:  RLCF   55,F
00576:  RLCF   56,F
00578:  RLCF   57,F
0057A:  RLCF   58,F
0057C:  MOVF   54,W
0057E:  SUBWF  58,W
00580:  BNZ   0592
00582:  MOVF   53,W
00584:  SUBWF  57,W
00586:  BNZ   0592
00588:  MOVF   52,W
0058A:  SUBWF  56,W
0058C:  BNZ   0592
0058E:  MOVF   51,W
00590:  SUBWF  55,W
00592:  BNC   05B2
00594:  MOVF   51,W
00596:  SUBWF  55,F
00598:  MOVF   52,W
0059A:  BTFSS  FD8.0
0059C:  INCFSZ 52,W
0059E:  SUBWF  56,F
005A0:  MOVF   53,W
005A2:  BTFSS  FD8.0
005A4:  INCFSZ 53,W
005A6:  SUBWF  57,F
005A8:  MOVF   54,W
005AA:  BTFSS  FD8.0
005AC:  INCFSZ 54,W
005AE:  SUBWF  58,F
005B0:  BSF    FD8.0
005B2:  RLCF   00,F
005B4:  RLCF   01,F
005B6:  RLCF   02,F
005B8:  RLCF   03,F
005BA:  DECFSZ 59,F
005BC:  BRA    056A
005BE:  MOVFF  55,FEF
005C2:  MOVFF  56,FEC
005C6:  MOVFF  57,FEC
005CA:  MOVFF  58,FEC
005CE:  RETURN 0
*
0078E:  ADDWF  FE8,W
00790:  CLRF   FF7
00792:  RLCF   FF7,F
00794:  ADDLW  AF
00796:  MOVWF  FF6
00798:  MOVLW  07
0079A:  ADDWFC FF7,F
0079C:  MOVLW  00
0079E:  MOVWF  FF8
007A0:  MOVWF  FFB
007A2:  TBLRD*-
007A4:  MOVF   FF5,W
007A6:  MOVWF  FFA
007A8:  TBLRD*
007AA:  MOVF   FF5,W
007AC:  MOVWF  FF9
007AE:  DATA C8,06
007B0:  DATA DE,06
007B2:  DATA 18,07
007B4:  DATA 52,07
*
009AE:  MOVF   4A,W
009B0:  XORWF  4B,W
009B2:  ANDLW  80
009B4:  MOVWF  4D
009B6:  BTFSS  4A.7
009B8:  BRA    09BE
009BA:  COMF   4A,F
009BC:  INCF   4A,F
009BE:  BTFSS  4B.7
009C0:  BRA    09C6
009C2:  COMF   4B,F
009C4:  INCF   4B,F
009C6:  MOVF   4B,W
009C8:  CLRF   01
009CA:  SUBWF  4A,W
009CC:  BC    09D4
009CE:  MOVFF  4A,00
009D2:  BRA    09EC
009D4:  CLRF   00
009D6:  MOVLW  08
009D8:  MOVWF  4C
009DA:  RLCF   4A,F
009DC:  RLCF   00,F
009DE:  MOVF   4B,W
009E0:  SUBWF  00,W
009E2:  BTFSC  FD8.0
009E4:  MOVWF  00
009E6:  RLCF   01,F
009E8:  DECFSZ 4C,F
009EA:  BRA    09DA
009EC:  BTFSS  4D.7
009EE:  BRA    09F4
009F0:  COMF   01,F
009F2:  INCF   01,F
009F4:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
001B6:  CLRF   FEA
001B8:  MOVLW  4B
001BA:  MOVWF  FE9
001BC:  MOVF   FEF,W
001BE:  BZ    01DA
001C0:  MOVLW  06
001C2:  MOVWF  01
001C4:  CLRF   00
001C6:  DECFSZ 00,F
001C8:  BRA    01C6
001CA:  DECFSZ 01,F
001CC:  BRA    01C4
001CE:  MOVLW  7B
001D0:  MOVWF  00
001D2:  DECFSZ 00,F
001D4:  BRA    01D2
001D6:  DECFSZ FEF,F
001D8:  BRA    01C0
001DA:  RETURN 0
*
003B0:  MOVLW  03
003B2:  SUBWF  4D,F
003B4:  BNC   03C8
003B6:  CLRF   FEA
003B8:  MOVLW  4D
003BA:  MOVWF  FE9
003BC:  MOVF   FEF,W
003BE:  BZ    03C8
003C0:  BRA    03C4
003C2:  BRA    03C4
003C4:  DECFSZ FEF,F
003C6:  BRA    03C2
003C8:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
00236:  MOVF   F66,W
00238:  MOVFF  22,F66
0023C:  RRCF   F64,W
0023E:  BNC   023C
00240:  MOVF   F66,W
00242:  MOVFF  21,F66
00246:  RRCF   F64,W
00248:  BNC   0246
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
0024A:  MOVF   F66,W
0024C:  MOVFF  20,F66
00250:  RRCF   F64,W
00252:  BNC   0250
00254:  MOVF   F66,W
00256:  MOVFF  1F,F66
0025A:  RRCF   F64,W
0025C:  BNC   025A
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0025E:  BCF    F95.5
00260:  BSF    F8C.5
00262:  BCF    F95.5
00264:  BCF    F8C.5
....................      return OK;
00266:  MOVLW  00
00268:  MOVWF  01
0026A:  GOTO   0378 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
0026E:  MOVF   F66,W
00270:  MOVFF  27,F66
00274:  RRCF   F64,W
00276:  BNC   0274
00278:  MOVF   F66,W
0027A:  MOVFF  28,F66
0027E:  RRCF   F64,W
00280:  BNC   027E
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
00282:  MOVF   F66,W
00284:  MOVFF  29,F66
00288:  RRCF   F64,W
0028A:  BNC   0288
0028C:  MOVF   F66,W
0028E:  MOVFF  2A,F66
00292:  RRCF   F64,W
00294:  BNC   0292
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
00296:  MOVF   F66,W
00298:  MOVFF  23,F66
0029C:  RRCF   F64,W
0029E:  BNC   029C
002A0:  MOVF   F66,W
002A2:  MOVFF  24,F66
002A6:  RRCF   F64,W
002A8:  BNC   02A6
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
002AA:  MOVF   F66,W
002AC:  MOVFF  25,F66
002B0:  RRCF   F64,W
002B2:  BNC   02B0
002B4:  MOVF   F66,W
002B6:  MOVFF  26,F66
002BA:  RRCF   F64,W
002BC:  BNC   02BA
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
002BE:  BCF    F95.7
002C0:  BSF    F8C.7
002C2:  BCF    F95.7
002C4:  BCF    F8C.7
....................       delay_ms(8);
002C6:  MOVLW  08
002C8:  MOVWF  4B
002CA:  RCALL  01B6
....................       return OK;
002CC:  MOVLW  00
002CE:  MOVWF  01
002D0:  GOTO   037A (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
002D4:  CLRF   49
002D6:  MOVF   49,W
002D8:  SUBLW  07
002DA:  BNC   032E
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
002DC:  CLRF   03
002DE:  MOVF   49,W
002E0:  ADDLW  2B
002E2:  MOVWF  FE9
002E4:  MOVLW  00
002E6:  ADDWFC 03,W
002E8:  MOVWF  FEA
002EA:  MOVFF  FEF,F8D
002EE:  CLRF   F96
002F0:  MOVLW  80
002F2:  MOVWF  4A
002F4:  MOVF   49,W
002F6:  MOVWF  01
002F8:  BZ    0302
002FA:  BCF    FD8.0
002FC:  RRCF   4A,F
002FE:  DECFSZ 01,F
00300:  BRA    02FA
00302:  MOVF   F66,W
00304:  MOVFF  4A,F66
00308:  RRCF   F64,W
0030A:  BNC   0308
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0030C:  BCF    F92.5
0030E:  BSF    F89.5
00310:  BCF    F92.5
00312:  BCF    F89.5
....................             delay_ms(1);
00314:  MOVLW  01
00316:  MOVWF  4B
00318:  RCALL  01B6
....................             spi_write2(0);
0031A:  MOVF   F66,W
0031C:  CLRF   F66
0031E:  RRCF   F64,W
00320:  BNC   031E
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
00322:  BCF    F92.5
00324:  BSF    F89.5
00326:  BCF    F92.5
00328:  BCF    F89.5
0032A:  INCF   49,F
0032C:  BRA    02D6
....................       }
....................       return OK;
0032E:  MOVLW  00
00330:  MOVWF  01
00332:  GOTO   037C (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
*
0049A:  CLRF   49
0049C:  MOVF   49,W
0049E:  SUBLW  03
004A0:  BNC   053A
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
004A2:  CLRF   03
004A4:  MOVF   49,W
004A6:  RCALL  00BE
004A8:  ANDLW  80
004AA:  BZ    04B0
004AC:  BSF    F93.7
004AE:  BRA    04B4
....................         else             output_low(pin_b7);
004B0:  BCF    F93.7
004B2:  BCF    F8A.7
....................         if(mq[cot]&0x40) output_float(pin_b6);
004B4:  CLRF   03
004B6:  MOVF   49,W
004B8:  RCALL  00BE
004BA:  ANDLW  40
004BC:  BZ    04C2
004BE:  BSF    F93.6
004C0:  BRA    04C6
....................         else             output_low(pin_b6);
004C2:  BCF    F93.6
004C4:  BCF    F8A.6
....................         if(mq[cot]&0x20) output_float(pin_b5);
004C6:  CLRF   03
004C8:  MOVF   49,W
004CA:  RCALL  00BE
004CC:  ANDLW  20
004CE:  BZ    04D4
004D0:  BSF    F93.5
004D2:  BRA    04D8
....................         else             output_low(pin_b5);
004D4:  BCF    F93.5
004D6:  BCF    F8A.5
....................         if(mq[cot]&0x10) output_float(pin_b4);
004D8:  CLRF   03
004DA:  MOVF   49,W
004DC:  RCALL  00BE
004DE:  ANDLW  10
004E0:  BZ    04E6
004E2:  BSF    F93.4
004E4:  BRA    04EA
....................         else             output_low(pin_b4);
004E6:  BCF    F93.4
004E8:  BCF    F8A.4
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
004EA:  BSF    F93.0
004EC:  BTFSC  F81.0
004EE:  BRA    04FC
004F0:  MOVF   49,W
004F2:  MULLW  04
004F4:  MOVFF  FF3,01
004F8:  BRA    053E
004FA:  BRA    0536
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
004FC:  BSF    F93.1
004FE:  BTFSC  F81.1
00500:  BRA    0510
00502:  MOVF   49,W
00504:  MULLW  04
00506:  MOVF   FF3,W
00508:  ADDLW  01
0050A:  MOVWF  01
0050C:  BRA    053E
0050E:  BRA    0536
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
00510:  BSF    F93.2
00512:  BTFSC  F81.2
00514:  BRA    0524
00516:  MOVF   49,W
00518:  MULLW  04
0051A:  MOVF   FF3,W
0051C:  ADDLW  02
0051E:  MOVWF  01
00520:  BRA    053E
00522:  BRA    0536
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
00524:  BSF    F93.3
00526:  BTFSC  F81.3
00528:  BRA    0536
0052A:  MOVF   49,W
0052C:  MULLW  04
0052E:  MOVF   FF3,W
00530:  ADDLW  03
00532:  MOVWF  01
00534:  BRA    053E
00536:  INCF   49,F
00538:  BRA    049C
....................     }
....................     return 0xff;
0053A:  MOVLW  FF
0053C:  MOVWF  01
0053E:  GOTO   06B6 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
*
0038C:  BTFSC  4D.0
0038E:  BRA    0394
00390:  BCF    F8E.5
00392:  BRA    0396
00394:  BSF    F8E.5
00396:  BCF    F97.5
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
00398:  BTFSC  4D.2
0039A:  BRA    03A0
0039C:  BCF    F8E.0
0039E:  BRA    03A2
003A0:  BSF    F8E.0
003A2:  BCF    F97.0
....................     output_lcd(lcd_ins_hthi);
003A4:  CLRF   F96
003A6:  MOVFF  4E,F8D
....................     return OK;
003AA:  MOVLW  00
003AC:  MOVWF  01
003AE:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
*
00336:  BCF    F97.7
00338:  BCF    F8E.7
0033A:  MOVLW  00
0033C:  MOVWF  01
0033E:  GOTO   037E (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
00342:  BCF    F97.6
00344:  BCF    F8E.6
00346:  MOVLW  00
00348:  MOVWF  01
0034A:  GOTO   0380 (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
0034E:  BRA    01DC
....................       set_tris_a(0xdf);
00350:  MOVLW  DF
00352:  MOVWF  F92
....................       set_tris_d(0x04);
00354:  MOVLW  04
00356:  MOVWF  F95
....................       set_tris_e(0);
00358:  MOVLW  00
0035A:  MOVWF  F96
....................       set_tris_f(0);
0035C:  MOVWF  F97
....................       set_tris_g(0);
0035E:  MOVWF  F98
....................       set_tris_c(0xff);
00360:  MOVLW  FF
00362:  MOVWF  F94
....................       port_b_pullups(0xFF);
00364:  BCF    FF1.7
....................       output_g(0);
00366:  CLRF   F98
00368:  CLRF   F8F
....................       output_high(pin_g0);
0036A:  BCF    F98.0
0036C:  BSF    F8F.0
....................       led32.ledx32=0;
0036E:  CLRF   22
00370:  CLRF   21
00372:  CLRF   20
00374:  CLRF   1F
....................       led32_display();
00376:  BRA    0236
....................       d7seg_display();
00378:  BRA    026E
....................       s7seg_display();
0037A:  BRA    02D4
....................       buzzer_off(); 
0037C:  BRA    0336
....................       triac_2_off();
0037E:  BRA    0342
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
00380:  MOVLW  BD
00382:  MOVWF  FB1
....................       return OK;
00384:  MOVLW  00
00386:  MOVWF  01
00388:  GOTO   0A60 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
001DC:  BSF    49.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
001DE:  CLRF   4A
001E0:  MOVF   4A,W
001E2:  SUBLW  09
001E4:  BNC   020E
....................       {     output_bit(pin_d0,tt);
001E6:  BTFSC  49.0
001E8:  BRA    01EE
001EA:  BCF    F8C.0
001EC:  BRA    01F0
001EE:  BSF    F8C.0
001F0:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
001F2:  BSF    F95.1
001F4:  MOVLW  00
001F6:  BTFSC  F83.1
001F8:  MOVLW  01
001FA:  MOVWF  4C
001FC:  MOVLW  00
001FE:  BTFSC  49.0
00200:  MOVLW  01
00202:  SUBWF  4C,W
00204:  BTFSS  FD8.2
00206:  BRA    020E
....................             tt=!tt;
00208:  BTG    49.0
0020A:  INCF   4A,F
0020C:  BRA    01E0
....................       }
....................       if(n<10) while(true)
0020E:  MOVF   4A,W
00210:  SUBLW  09
00212:  BNC   022E
....................       {    output_d(0xff);
00214:  CLRF   F95
00216:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
00218:  CLRF   F93
0021A:  SETF   F8A
0021C:  MOVLW  0A
0021E:  MOVWF  4B
00220:  RCALL  01B6
....................            output_b(0); delay_ms(10);
00222:  CLRF   F93
00224:  CLRF   F8A
00226:  MOVLW  0A
00228:  MOVWF  4B
0022A:  RCALL  01B6
0022C:  BRA    0214
....................       }
....................       return OK;
0022E:  MOVLW  00
00230:  MOVWF  01
00232:  GOTO   0350 (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
005D0:  MOVF   FB2,W
005D2:  MOVFF  FB3,03
005D6:  ADDWF  1B,F
005D8:  MOVF   FB3,W
005DA:  ADDWFC 1C,F
005DC:  MOVLW  00
005DE:  ADDWFC 1D,F
005E0:  ADDWFC 1E,F
005E2:  CLRF   FB3
005E4:  MOVLW  02
005E6:  MOVWF  FB2
005E8:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
005EA:  BTFSS  FA1.1
005EC:  BRA    05F6
005EE:  MOVLW  01
005F0:  ADDWF  1D,F
005F2:  MOVLW  00
005F4:  ADDWFC 1E,F
005F6:  BCF    FA1.1
....................       return delay.timeline/625;
005F8:  BCF    FD8.1
005FA:  MOVFF  1E,50
005FE:  MOVFF  1D,4F
00602:  MOVFF  1C,4E
00606:  MOVFF  1B,4D
0060A:  CLRF   54
0060C:  CLRF   53
0060E:  MOVLW  02
00610:  MOVWF  52
00612:  MOVLW  71
00614:  MOVWF  51
00616:  RCALL  0542
00618:  MOVFF  01,02
0061C:  MOVFF  00,01
00620:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
00622:  MOVF   FB2,W
00624:  MOVFF  FB3,03
00628:  ADDWF  1B,F
0062A:  MOVF   FB3,W
0062C:  ADDWFC 1C,F
0062E:  MOVLW  00
00630:  ADDWFC 1D,F
00632:  ADDWFC 1E,F
00634:  CLRF   FB3
00636:  MOVLW  02
00638:  MOVWF  FB2
0063A:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
0063C:  BTFSS  FA1.1
0063E:  BRA    0648
00640:  MOVLW  01
00642:  ADDWF  1D,F
00644:  MOVLW  00
00646:  ADDWFC 1E,F
00648:  BCF    FA1.1
....................       tam = delay.timeline/625;
0064A:  BCF    FD8.1
0064C:  MOVFF  1E,50
00650:  MOVFF  1D,4F
00654:  MOVFF  1C,4E
00658:  MOVFF  1B,4D
0065C:  CLRF   54
0065E:  CLRF   53
00660:  MOVLW  02
00662:  MOVWF  52
00664:  MOVLW  71
00666:  MOVWF  51
00668:  RCALL  0542
0066A:  MOVFF  01,4C
0066E:  MOVFF  00,4B
....................       if(t<=tam) return tam-t;
00672:  MOVF   4A,W
00674:  SUBWF  4C,W
00676:  BNC   0696
00678:  BNZ   0680
0067A:  MOVF   49,W
0067C:  SUBWF  4B,W
0067E:  BNC   0696
00680:  MOVF   49,W
00682:  SUBWF  4B,W
00684:  MOVWF  00
00686:  MOVF   4A,W
00688:  SUBWFB 4C,W
0068A:  MOVWF  03
0068C:  MOVFF  00,01
00690:  MOVWF  02
00692:  BRA    06B2
00694:  BRA    06B2
....................       else       return 0xffff-t + tam;
00696:  MOVLW  FF
00698:  BSF    FD8.0
0069A:  SUBFWB 49,W
0069C:  MOVWF  4D
0069E:  MOVLW  FF
006A0:  SUBFWB 4A,W
006A2:  MOVWF  4E
006A4:  MOVF   4B,W
006A6:  ADDWF  4D,W
006A8:  MOVWF  01
006AA:  MOVF   4C,W
006AC:  ADDWFC 4E,W
006AE:  MOVWF  03
006B0:  MOVWF  02
006B2:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
....................       switch (step)
....................       {
....................           case 0:
....................                  if(input(pin)==0)
....................                   {
....................                         oldpin   = pin;
....................                         t        = delay_start();
....................                         step     = 1;
....................                   }
....................                  break;
....................            case 1:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
....................                    {
....................                       t    = delay_start();
....................                       step = 2;
....................                       return OK;
....................                    }
....................                  break;
....................             case 2:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
....................                    {
....................                        t        = delay_start();
....................                        step     = 3;
....................                    } 
....................                  break;
....................             case 3:
....................                    if(input(oldpin))step = 0; 
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
....................                        {
....................                           t  = delay_start();
....................                           return OK;
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_lcd.c>
.................... #ifndef  __TV_LCD_C__
.................... #define  __TV_LCD_C__
.................... #include<TV_LCD.h>
.................... #ifndef __tv_lcd_h__
.................... #define __tv_lcd_h__
.................... typedef enum 
.................... {
....................       lcd_clear_display  = 0x01,
....................       lcd_shift_left     = 0x18,
....................       lcd_shift_right    = 0x1c,
.................... }LCD_COMMANDS;
.................... result lcd_command(int8 command);
.................... result lcd_data(int8 data);
.................... result lcd_setup(void);
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) ; 
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2);
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17);
.................... //xxxxxxxxxxxxxxxxxxxxxxxx Font xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 LCD_SO_X[11][6] ={       // Font 3x2
....................                   0,1,2,5,3,4,               // SO 0
....................                   1,2,32,3,7,3,              // SO 1
....................                   6,6,2,5,3,3,               // SO 2
....................                   6,6,2,3,3,4,               // SO 3
....................                   5,3,7,32,32,7,             // SO 4
....................                   7,6,6,3,3,4,               // SO 5
....................                   0,6,6,5,3,4,               // SO 6
....................                   1,1,7,32,32,7,             // SO 7
....................                   0,6,2,5,3,4,               // SO 8
....................                   0,6,2,3,3,4,               // SO 9
....................                   32,32,32,32,32,32          // XOA
....................                   };             
.................... const unsigned int8 LCD_SO_X1[11][12] ={           //Font 3x4
....................                   0,1,2,7,32,7,7,32,7,5,3,4,       //0   
....................                   1,2,32,32,7,32,32,7,32,3,7,3,    //1  
....................                   1,1,2,3,3,7,7,32,32,5,3,3,       //2           
....................                   0,1,2,32,3,4,32,32,2,5,3,4,      //3
....................                   7,32,7,5,3,7,32,32,7,32,32,7,    //4             
....................                   7,1,1,7,3,3,32,32,7,5,3,4,       //5           
....................                   0,1,2,7,3,3,7,32,7,5,3,4,        //6             
....................                   1,1,7,32,32,4,32,0,32,32,7,32,   //7             
....................                   0,1,2,5,3,4,0,32,2,5,3,4,        //8     
....................                   0,1,2,5,3,7,32,32,7,5,3,4,       //9 
....................                   32,32,32,32,32,32,32,32,32,32,32,32}; //XOA                  
....................                   
.................... const unsigned int8 LCD_MA_8DOAN[] = {
....................                   0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  
....................                   0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, 
....................                   0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07, 
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; 
....................    
.................... const unsigned char LCD_MA_TRAITAO[]={
....................                0,0,0,0x0c,0x1f,0x1f,0x1f,0x1f,
....................                0x0e,0x1c,0x10,0x06,0x1f,0x1f,0x1f,0x1f
....................                ,0x0f,0x07,0x03,0,0,0,0,0,
....................                0x1e,0x1c,0x18,0,0,0,0,0};
.................... #endif
.................... 
.................... result  lcd_command(int8 command)
.................... {    
....................       write_lcd20x4(0x01,command);     
*
003CA:  MOVLW  01
003CC:  MOVWF  4D
003CE:  MOVFF  4C,4E
003D2:  RCALL  038C
....................       write_lcd20x4(0x00,command); 
003D4:  CLRF   4D
003D6:  MOVFF  4C,4E
003DA:  RCALL  038C
....................       delay_us(200);
003DC:  MOVLW  C8
003DE:  MOVWF  4D
003E0:  RCALL  03B0
....................       return OK;
003E2:  MOVLW  00
003E4:  MOVWF  01
003E6:  RETURN 0
.................... }
.................... result lcd_data(int8 data)
.................... {
....................       write_lcd20x4(0x05,data);     
003E8:  MOVLW  05
003EA:  MOVWF  4D
003EC:  MOVFF  4C,4E
003F0:  RCALL  038C
....................       write_lcd20x4(0x04,data); 
003F2:  MOVLW  04
003F4:  MOVWF  4D
003F6:  MOVFF  4C,4E
003FA:  RCALL  038C
....................       delay_us(200);
003FC:  MOVLW  C8
003FE:  MOVWF  4D
00400:  RCALL  03B0
....................       return OK;
00402:  MOVLW  00
00404:  MOVWF  01
00406:  RETURN 0
.................... }
.................... result lcd_setup()
.................... {
....................       int8 n;
....................       lcd_command(0x3c);  delay_ms(5);
00408:  MOVLW  3C
0040A:  MOVWF  4C
0040C:  RCALL  03CA
0040E:  MOVLW  05
00410:  MOVWF  4B
00412:  RCALL  01B6
....................       lcd_command(0x3c);  delay_ms(5);
00414:  MOVLW  3C
00416:  MOVWF  4C
00418:  RCALL  03CA
0041A:  MOVLW  05
0041C:  MOVWF  4B
0041E:  RCALL  01B6
....................       lcd_command(0x0c);    
00420:  MOVLW  0C
00422:  MOVWF  4C
00424:  RCALL  03CA
....................       lcd_command(0x06); 
00426:  MOVLW  06
00428:  MOVWF  4C
0042A:  RCALL  03CA
....................       lcd_command(0x40);                             // di chuyen den dia chi dau vung nho CGRAM
0042C:  MOVLW  40
0042E:  MOVWF  4C
00430:  RCALL  03CA
....................       for(n=0;n<64;n++) lcd_data(LCD_MA_8DOAN[n]);   // ghi ma cua ky tu moi tao vao CGRAM
00432:  CLRF   49
00434:  MOVF   49,W
00436:  SUBLW  3F
00438:  BNC   044A
0043A:  CLRF   03
0043C:  MOVF   49,W
0043E:  RCALL  00D6
00440:  MOVWF  4A
00442:  MOVWF  4C
00444:  RCALL  03E8
00446:  INCF   49,F
00448:  BRA    0434
....................       lcd_command(lcd_clear_display); delay_ms(2);
0044A:  MOVLW  01
0044C:  MOVWF  4C
0044E:  RCALL  03CA
00450:  MOVLW  02
00452:  MOVWF  4B
00454:  RCALL  01B6
....................       return OK;
00456:  MOVLW  00
00458:  MOVWF  01
0045A:  GOTO   0A62 (RETURN)
.................... }
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) 
.................... {
....................       const unsigned int8 dc[]={0x80,0xc0,0x94,0xd4};
....................        lcd_command(dc[row_0_3]+colum_0_19);
0045E:  CLRF   03
00460:  MOVF   4A,W
00462:  RCALL  012A
00464:  ADDWF  49,W
00466:  MOVWF  4B
00468:  MOVWF  4C
0046A:  RCALL  03CA
....................        return OK;
0046C:  MOVLW  00
0046E:  MOVWF  01
00470:  RETURN 0
.................... }
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2)
.................... {     
....................       lcd_goto(colum_0_17,row_0_2);
....................       for (int8 i=0;i<6;i++)     
....................       {                  
....................         if (i==3)   lcd_goto(colum_0_17,row_0_2+1);             
....................         lcd_data(lcd_so_x[num_0_9][i]);     
....................       } 
....................       return OK;
.................... }
.................... 
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17)
.................... {
....................       for(int8 n=0;n<12;n++)
....................       {
....................             if(n%3==0)LCD_GOTO(colum_0_17,n/3); 
....................             LCD_DATA(LCD_SO_X1[num_0_9][n]);
....................       }
....................       return OK;
.................... }
.................... #endif
.................... 
.................... #include<tv_key4x4.c>
.................... #ifndef  __TV_KEY4x4_C__
.................... #define  __TV_KEY4x4_C__
.................... #include<tv_key4x4.h>
.................... #ifndef  __TV_KEY4x4_H__
.................... #define  __TV_KEY4x4_H__
.................... typedef struct
.................... {
....................       unsigned int8 key;
.................... }KEY4x4_STRUCT;
.................... KEY4x4_STRUCT  key4x4;
.................... result key4x4_read(void);
.................... #endif
.................... 
.................... result key4x4_read()
.................... {      
....................          static unsigned int8  step=0;
....................          static unsigned int16 t;
....................          key4x4.key = KEYREAD();
*
006B4:  BRA    049A
006B6:  MOVFF  01,38
....................          switch (step)
006BA:  MOVF   39,W
006BC:  ADDLW  FC
006BE:  BTFSC  FD8.0
006C0:  BRA    0786
006C2:  ADDLW  04
006C4:  GOTO   078E
....................          {
....................              case 0:
....................                    if( key4x4.key!=0xff)
006C8:  INCFSZ 38,W
006CA:  BRA    06CE
006CC:  BRA    06DC
....................                       {     t   = delay_start();
006CE:  RCALL  05D0
006D0:  MOVFF  02,3B
006D4:  MOVFF  01,3A
....................                             step=1;
006D8:  MOVLW  01
006DA:  MOVWF  39
....................                       } 
....................                     break;
006DC:  BRA    0786
....................               case 1:
....................                     if(key4x4.key==0xff)step =0;
006DE:  INCFSZ 38,W
006E0:  BRA    06E6
006E2:  CLRF   39
006E4:  BRA    0716
....................                     else if(delay_stop(t)>=30)
006E6:  MOVFF  3B,4A
006EA:  MOVFF  3A,49
006EE:  RCALL  0622
006F0:  MOVFF  02,4A
006F4:  MOVFF  01,49
006F8:  MOVF   4A,F
006FA:  BNZ   0702
006FC:  MOVF   49,W
006FE:  SUBLW  1D
00700:  BC    0716
....................                     {   step = 2;
00702:  MOVLW  02
00704:  MOVWF  39
....................                         t    = delay_start(); 
00706:  RCALL  05D0
00708:  MOVFF  02,3B
0070C:  MOVFF  01,3A
....................                         return OK;
00710:  MOVLW  00
00712:  MOVWF  01
00714:  BRA    078A
....................                     }
....................                     break; 
00716:  BRA    0786
....................               case 2:
....................                     if(key4x4.key==0xff)step =0;
00718:  INCFSZ 38,W
0071A:  BRA    0720
0071C:  CLRF   39
0071E:  BRA    0750
....................                     else if(delay_stop(t)>=500)
00720:  MOVFF  3B,4A
00724:  MOVFF  3A,49
00728:  RCALL  0622
0072A:  MOVFF  02,4A
0072E:  MOVFF  01,49
00732:  MOVF   02,W
00734:  SUBLW  00
00736:  BC    0750
00738:  XORLW  FF
0073A:  BNZ   0742
0073C:  MOVF   49,W
0073E:  SUBLW  F3
00740:  BC    0750
....................                        {
....................                            t    = delay_start(); 
00742:  RCALL  05D0
00744:  MOVFF  02,3B
00748:  MOVFF  01,3A
....................                            step = 3;
0074C:  MOVLW  03
0074E:  MOVWF  39
....................                        } 
....................                     break;
00750:  BRA    0786
....................               case 3:
....................                     if(key4x4.key==0xff)step =0;
00752:  INCFSZ 38,W
00754:  BRA    075A
00756:  CLRF   39
00758:  BRA    0786
....................                     else if(delay_stop(t)>=100)
0075A:  MOVFF  3B,4A
0075E:  MOVFF  3A,49
00762:  RCALL  0622
00764:  MOVFF  02,4A
00768:  MOVFF  01,49
0076C:  MOVF   4A,F
0076E:  BNZ   0776
00770:  MOVF   49,W
00772:  SUBLW  63
00774:  BC    0786
....................                       {
....................                          t    = delay_start(); 
00776:  RCALL  05D0
00778:  MOVFF  02,3B
0077C:  MOVFF  01,3A
....................                          return OK;
00780:  MOVLW  00
00782:  MOVWF  01
00784:  BRA    078A
....................                       }
....................                      break; 
....................          }
....................          return BUSY;
00786:  MOVLW  02
00788:  MOVWF  01
0078A:  GOTO   07B8 (RETURN)
.................... }
.................... #endif
.................... 
.................... signed int8 bdn=0, cd=0, i=0, caitg=0, gt_spcai=0, gio=0, phut=0, giay=0, dem=0;
.................... unsigned int16 k;
.................... void kt_nutnhan()
.................... {
....................    if(key4x4_read()==ok)
*
007B6:  BRA    06B4
007B8:  MOVF   01,F
007BA:  BNZ   0870
....................    {
....................       if(key4x4.key==15)
007BC:  MOVF   38,W
007BE:  SUBLW  0F
007C0:  BNZ   07E8
....................       {
....................          cd++;
007C2:  INCF   3D,F
....................          i=0;
007C4:  CLRF   3E
....................          if(cd>4) cd=0;
007C6:  BTFSC  3D.7
007C8:  BRA    07D2
007CA:  MOVF   3D,W
007CC:  SUBLW  04
007CE:  BC    07D2
007D0:  CLRF   3D
....................          lcd_goto(0,3);
007D2:  CLRF   49
007D4:  MOVLW  03
007D6:  MOVWF  4A
007D8:  RCALL  045E
....................          lcd_data("                    ");
007DA:  MOVLW  42
007DC:  MOVWF  FF6
007DE:  MOVLW  01
007E0:  MOVWF  FF7
007E2:  MOVLW  00
007E4:  MOVWF  FF8
007E6:  RCALL  0472
....................       }
....................       if(key4x4.key<10)
007E8:  MOVF   38,W
007EA:  SUBLW  09
007EC:  BNC   0870
....................       {
....................          if(i==0)
007EE:  MOVF   3E,F
007F0:  BNZ   0808
....................          {
....................             caitg=key4x4.key*10;
007F2:  MOVF   38,W
007F4:  MULLW  0A
007F6:  MOVFF  FF3,3F
....................             if(cd==4) gt_spcai=key4x4.key*10;
007FA:  MOVF   3D,W
007FC:  SUBLW  04
007FE:  BNZ   0808
00800:  MOVF   38,W
00802:  MULLW  0A
00804:  MOVFF  FF3,40
....................          }
....................          if(i==1)
00808:  DECFSZ 3E,W
0080A:  BRA    081A
....................          {
....................             caitg=caitg+key4x4.key;
0080C:  MOVF   38,W
0080E:  ADDWF  3F,F
....................             if(cd==4) gt_spcai=gt_spcai+key4x4.key;
00810:  MOVF   3D,W
00812:  SUBLW  04
00814:  BNZ   081A
00816:  MOVF   38,W
00818:  ADDWF  40,F
....................          }
....................          i++;
0081A:  INCF   3E,F
....................          if(i>=2) i=0;
0081C:  BTFSC  3E.7
0081E:  BRA    0828
00820:  MOVF   3E,W
00822:  SUBLW  01
00824:  BC    0828
00826:  CLRF   3E
....................          if(cd==1)
00828:  DECFSZ 3D,W
0082A:  BRA    0840
....................          {
....................             gio=caitg;
0082C:  MOVFF  3F,41
....................             if(gio>=13) 
00830:  BTFSC  41.7
00832:  BRA    0840
00834:  MOVF   41,W
00836:  SUBLW  0C
00838:  BC    0840
....................             {
....................                gio=1;
0083A:  MOVLW  01
0083C:  MOVWF  41
....................                i=0;
0083E:  CLRF   3E
....................             }
....................          }
....................          if(cd==2)
00840:  MOVF   3D,W
00842:  SUBLW  02
00844:  BNZ   0858
....................          {
....................             phut=caitg;
00846:  MOVFF  3F,42
....................             if(phut>=60)
0084A:  BTFSC  42.7
0084C:  BRA    0858
0084E:  MOVF   42,W
00850:  SUBLW  3B
00852:  BC    0858
....................             {
....................                phut=0;
00854:  CLRF   42
....................                i=0;
00856:  CLRF   3E
....................             }
....................          }
....................          if(cd==3)
00858:  MOVF   3D,W
0085A:  SUBLW  03
0085C:  BNZ   0870
....................          {
....................             giay=caitg;
0085E:  MOVFF  3F,43
....................             if(giay>=60)
00862:  BTFSC  43.7
00864:  BRA    0870
00866:  MOVF   43,W
00868:  SUBLW  3B
0086A:  BC    0870
....................             {
....................                giay=0;
0086C:  CLRF   43
....................                i=0;
0086E:  CLRF   3E
....................             }
....................          }
....................       }
....................    }
00870:  RETURN 0
.................... }
.................... void nhapnhay()
.................... {
....................    if(cd==1)
00872:  DECFSZ 3D,W
00874:  BRA    08C0
....................    {
....................       lcd_goto(6,1);
00876:  MOVLW  06
00878:  MOVWF  49
0087A:  MOVLW  01
0087C:  MOVWF  4A
0087E:  RCALL  045E
....................       lcd_data("  ");
00880:  MOVLW  58
00882:  MOVWF  FF6
00884:  MOVLW  01
00886:  MOVWF  FF7
00888:  MOVLW  00
0088A:  MOVWF  FF8
0088C:  RCALL  0472
....................       lcd_goto(0,3);
0088E:  CLRF   49
00890:  MOVLW  03
00892:  MOVWF  4A
00894:  RCALL  045E
....................       lcd_data("CHINH GIO");
00896:  MOVLW  5C
00898:  MOVWF  FF6
0089A:  MOVLW  01
0089C:  MOVWF  FF7
0089E:  MOVLW  00
008A0:  MOVWF  FF8
008A2:  RCALL  0472
....................       for(k=0;k<500;k++) kt_nutnhan();
008A4:  CLRF   46
008A6:  CLRF   45
008A8:  MOVF   46,W
008AA:  SUBLW  01
008AC:  BNC   08C0
008AE:  BNZ   08B6
008B0:  MOVF   45,W
008B2:  SUBLW  F3
008B4:  BNC   08C0
008B6:  RCALL  07B6
008B8:  INCF   45,F
008BA:  BTFSC  FD8.2
008BC:  INCF   46,F
008BE:  BRA    08A8
....................    }
....................    if(cd==2)
008C0:  MOVF   3D,W
008C2:  SUBLW  02
008C4:  BNZ   0910
....................    {
....................       lcd_goto(9,1);
008C6:  MOVLW  09
008C8:  MOVWF  49
008CA:  MOVLW  01
008CC:  MOVWF  4A
008CE:  RCALL  045E
....................       lcd_data("  ");
008D0:  MOVLW  66
008D2:  MOVWF  FF6
008D4:  MOVLW  01
008D6:  MOVWF  FF7
008D8:  MOVLW  00
008DA:  MOVWF  FF8
008DC:  RCALL  0472
....................       lcd_goto(0,3);
008DE:  CLRF   49
008E0:  MOVLW  03
008E2:  MOVWF  4A
008E4:  RCALL  045E
....................       lcd_data("CHINH PHUT");
008E6:  MOVLW  6A
008E8:  MOVWF  FF6
008EA:  MOVLW  01
008EC:  MOVWF  FF7
008EE:  MOVLW  00
008F0:  MOVWF  FF8
008F2:  RCALL  0472
....................       for(k=0;k<500;k++) kt_nutnhan();
008F4:  CLRF   46
008F6:  CLRF   45
008F8:  MOVF   46,W
008FA:  SUBLW  01
008FC:  BNC   0910
008FE:  BNZ   0906
00900:  MOVF   45,W
00902:  SUBLW  F3
00904:  BNC   0910
00906:  RCALL  07B6
00908:  INCF   45,F
0090A:  BTFSC  FD8.2
0090C:  INCF   46,F
0090E:  BRA    08F8
....................    }
....................    if(cd==3)
00910:  MOVF   3D,W
00912:  SUBLW  03
00914:  BNZ   0960
....................    {
....................       lcd_goto(12,1);
00916:  MOVLW  0C
00918:  MOVWF  49
0091A:  MOVLW  01
0091C:  MOVWF  4A
0091E:  RCALL  045E
....................       lcd_data("  ");
00920:  MOVLW  76
00922:  MOVWF  FF6
00924:  MOVLW  01
00926:  MOVWF  FF7
00928:  MOVLW  00
0092A:  MOVWF  FF8
0092C:  RCALL  0472
....................       lcd_goto(0,3);
0092E:  CLRF   49
00930:  MOVLW  03
00932:  MOVWF  4A
00934:  RCALL  045E
....................       lcd_data("CHINH GIAY");
00936:  MOVLW  7A
00938:  MOVWF  FF6
0093A:  MOVLW  01
0093C:  MOVWF  FF7
0093E:  MOVLW  00
00940:  MOVWF  FF8
00942:  RCALL  0472
....................       for(k=0;k<500;k++) kt_nutnhan();
00944:  CLRF   46
00946:  CLRF   45
00948:  MOVF   46,W
0094A:  SUBLW  01
0094C:  BNC   0960
0094E:  BNZ   0956
00950:  MOVF   45,W
00952:  SUBLW  F3
00954:  BNC   0960
00956:  RCALL  07B6
00958:  INCF   45,F
0095A:  BTFSC  FD8.2
0095C:  INCF   46,F
0095E:  BRA    0948
....................    }
....................    if(cd==4)
00960:  MOVF   3D,W
00962:  SUBLW  04
00964:  BNZ   09AA
....................    {
....................       lcd_goto(0,2);
00966:  CLRF   49
00968:  MOVLW  02
0096A:  MOVWF  4A
0096C:  RCALL  045E
....................       lcd_data("  ");
0096E:  MOVLW  86
00970:  MOVWF  FF6
00972:  MOVLW  01
00974:  MOVWF  FF7
00976:  MOVLW  00
00978:  MOVWF  FF8
0097A:  RCALL  0472
....................       lcd_goto(0,3);
0097C:  CLRF   49
0097E:  MOVLW  03
00980:  MOVWF  4A
00982:  RCALL  045E
....................       lcd_data("CAI GIOI HAN SP");
00984:  MOVLW  8A
00986:  MOVWF  FF6
00988:  MOVLW  01
0098A:  MOVWF  FF7
0098C:  MOVLW  00
0098E:  MOVWF  FF8
00990:  RCALL  0472
....................       for(k=0;k<200;k++) kt_nutnhan();
00992:  CLRF   46
00994:  CLRF   45
00996:  MOVF   46,F
00998:  BNZ   09AA
0099A:  MOVF   45,W
0099C:  SUBLW  C7
0099E:  BNC   09AA
009A0:  RCALL  07B6
009A2:  INCF   45,F
009A4:  BTFSC  FD8.2
009A6:  INCF   46,F
009A8:  BRA    0996
....................    }
009AA:  GOTO   0A9A (RETURN)
.................... }
.................... void main()
*
009F6:  CLRF   FF8
009F8:  BCF    FD0.7
009FA:  BSF    07.7
009FC:  BCF    F63.5
009FE:  MOVLW  00
00A00:  MOVWF  F64
00A02:  MOVLW  20
00A04:  MOVWF  F63
00A06:  BCF    F95.4
00A08:  BSF    F95.5
00A0A:  BCF    F95.6
00A0C:  CLRF   3C
00A0E:  CLRF   3D
00A10:  CLRF   3E
00A12:  CLRF   3F
00A14:  CLRF   40
00A16:  CLRF   41
00A18:  CLRF   42
00A1A:  CLRF   43
00A1C:  CLRF   44
00A1E:  CLRF   48
00A20:  CLRF   47
00A22:  MOVF   FC1,W
00A24:  ANDLW  C0
00A26:  IORLW  0F
00A28:  MOVWF  FC1
00A2A:  MOVLW  07
00A2C:  MOVWF  FB4
00A2E:  SETF   23
00A30:  SETF   24
00A32:  SETF   25
00A34:  SETF   26
00A36:  SETF   27
00A38:  SETF   28
00A3A:  SETF   29
00A3C:  SETF   2A
00A3E:  SETF   2B
00A40:  SETF   2C
00A42:  SETF   2D
00A44:  SETF   2E
00A46:  SETF   2F
00A48:  SETF   30
00A4A:  SETF   31
00A4C:  SETF   32
00A4E:  SETF   33
00A50:  SETF   34
00A52:  CLRF   35
00A54:  CLRF   36
00A56:  CLRF   37
00A58:  CLRF   39
00A5A:  CLRF   3A
00A5C:  CLRF   3B
.................... {
....................    system_init();
00A5E:  BRA    034E
....................    lcd_setup();
00A60:  BRA    0408
....................    lcd_goto(6,0);
00A62:  MOVLW  06
00A64:  MOVWF  49
00A66:  CLRF   4A
00A68:  RCALL  045E
....................    lcd_data("20142157");
00A6A:  MOVLW  9A
00A6C:  MOVWF  FF6
00A6E:  MOVLW  01
00A70:  MOVWF  FF7
00A72:  MOVLW  00
00A74:  MOVWF  FF8
00A76:  RCALL  0472
....................    setup_timer_1(T1_INTERNAL| T1_DIV_BY_8);
00A78:  MOVLW  B5
00A7A:  MOVWF  FCD
....................    set_timer1(3036);
00A7C:  MOVLW  0B
00A7E:  MOVWF  FCF
00A80:  MOVLW  DC
00A82:  MOVWF  FCE
00A84:  NOP   
....................    setup_timer_0(T0_EXT_L_TO_H| T0_DIV_1);
00A86:  MOVLW  A8
00A88:  MOVWF  FD5
....................    set_timer0(0);
00A8A:  CLRF   FD7
00A8C:  CLRF   FD6
00A8E:  NOP   
....................    enable_interrupts(int_timer1);
00A90:  BSF    F9D.0
....................    enable_interrupts(global);
00A92:  MOVLW  C0
00A94:  IORWF  FF2,F
....................    while(true)
....................    {
....................       kt_nutnhan();
00A96:  RCALL  07B6
....................       nhapnhay();
00A98:  BRA    0872
....................       /***********************************xu li thoi gian********************************/
....................       if(bdn>=10)
00A9A:  BTFSC  3C.7
00A9C:  BRA    0AD4
00A9E:  MOVF   3C,W
00AA0:  SUBLW  09
00AA2:  BC    0AD4
....................       {
....................          bdn=bdn-10;
00AA4:  MOVLW  0A
00AA6:  SUBWF  3C,F
....................          giay++;
00AA8:  INCF   43,F
....................          if(giay>=60)
00AAA:  BTFSC  43.7
00AAC:  BRA    0AD4
00AAE:  MOVF   43,W
00AB0:  SUBLW  3B
00AB2:  BC    0AD4
....................          {
....................             giay=0;
00AB4:  CLRF   43
....................             phut++;
00AB6:  INCF   42,F
....................             if(phut>=60)
00AB8:  BTFSC  42.7
00ABA:  BRA    0AD4
00ABC:  MOVF   42,W
00ABE:  SUBLW  3B
00AC0:  BC    0AD4
....................             {
....................               phut=0;
00AC2:  CLRF   42
....................               gio++;
00AC4:  INCF   41,F
....................               if(gio>=13) gio=1;
00AC6:  BTFSC  41.7
00AC8:  BRA    0AD4
00ACA:  MOVF   41,W
00ACC:  SUBLW  0C
00ACE:  BC    0AD4
00AD0:  MOVLW  01
00AD2:  MOVWF  41
....................             }
....................          }
....................       }
....................       /*********************************xu li dem san pham**************************/
....................       dem=get_timer0();
00AD4:  MOVF   FD6,W
00AD6:  MOVWF  44
....................       if(dem>gt_spcai) set_timer0(1);
00AD8:  MOVF   40,W
00ADA:  XORLW  80
00ADC:  MOVWF  00
00ADE:  MOVF   44,W
00AE0:  XORLW  80
00AE2:  SUBWF  00,W
00AE4:  BC    0AEE
00AE6:  CLRF   FD7
00AE8:  MOVLW  01
00AEA:  MOVWF  FD6
00AEC:  NOP   
....................       /*********************************xu li hien thi*****************************/
....................       lcd_goto(6,1);
00AEE:  MOVLW  06
00AF0:  MOVWF  49
00AF2:  MOVLW  01
00AF4:  MOVWF  4A
00AF6:  RCALL  045E
....................       lcd_data(gio/10%10+48);
00AF8:  MOVFF  41,4A
00AFC:  MOVLW  0A
00AFE:  MOVWF  4B
00B00:  RCALL  09AE
00B02:  MOVFF  01,4A
00B06:  MOVLW  0A
00B08:  MOVWF  4B
00B0A:  RCALL  09AE
00B0C:  MOVLW  30
00B0E:  ADDWF  00,W
00B10:  MOVWF  49
00B12:  MOVWF  4C
00B14:  RCALL  03E8
....................       lcd_data(gio%10+48);
00B16:  MOVFF  41,4A
00B1A:  MOVLW  0A
00B1C:  MOVWF  4B
00B1E:  RCALL  09AE
00B20:  MOVLW  30
00B22:  ADDWF  00,W
00B24:  MOVWF  49
00B26:  MOVWF  4C
00B28:  RCALL  03E8
....................       lcd_data(':');
00B2A:  MOVLW  3A
00B2C:  MOVWF  4C
00B2E:  RCALL  03E8
....................       lcd_data(phut/10%10+48);
00B30:  MOVFF  42,4A
00B34:  MOVLW  0A
00B36:  MOVWF  4B
00B38:  RCALL  09AE
00B3A:  MOVFF  01,4A
00B3E:  MOVLW  0A
00B40:  MOVWF  4B
00B42:  RCALL  09AE
00B44:  MOVLW  30
00B46:  ADDWF  00,W
00B48:  MOVWF  49
00B4A:  MOVWF  4C
00B4C:  RCALL  03E8
....................       lcd_data(phut%10+48);
00B4E:  MOVFF  42,4A
00B52:  MOVLW  0A
00B54:  MOVWF  4B
00B56:  RCALL  09AE
00B58:  MOVLW  30
00B5A:  ADDWF  00,W
00B5C:  MOVWF  49
00B5E:  MOVWF  4C
00B60:  RCALL  03E8
....................       lcd_data(':');
00B62:  MOVLW  3A
00B64:  MOVWF  4C
00B66:  RCALL  03E8
....................       lcd_data(giay/10%10+48);
00B68:  MOVFF  43,4A
00B6C:  MOVLW  0A
00B6E:  MOVWF  4B
00B70:  RCALL  09AE
00B72:  MOVFF  01,4A
00B76:  MOVLW  0A
00B78:  MOVWF  4B
00B7A:  RCALL  09AE
00B7C:  MOVLW  30
00B7E:  ADDWF  00,W
00B80:  MOVWF  49
00B82:  MOVWF  4C
00B84:  RCALL  03E8
....................       lcd_data(giay%10+48);
00B86:  MOVFF  43,4A
00B8A:  MOVLW  0A
00B8C:  MOVWF  4B
00B8E:  RCALL  09AE
00B90:  MOVLW  30
00B92:  ADDWF  00,W
00B94:  MOVWF  49
00B96:  MOVWF  4C
00B98:  RCALL  03E8
....................       lcd_goto(0,2);
00B9A:  CLRF   49
00B9C:  MOVLW  02
00B9E:  MOVWF  4A
00BA0:  RCALL  045E
....................       lcd_data(gt_spcai/10%10+48);
00BA2:  MOVFF  40,4A
00BA6:  MOVLW  0A
00BA8:  MOVWF  4B
00BAA:  RCALL  09AE
00BAC:  MOVFF  01,4A
00BB0:  MOVLW  0A
00BB2:  MOVWF  4B
00BB4:  RCALL  09AE
00BB6:  MOVLW  30
00BB8:  ADDWF  00,W
00BBA:  MOVWF  49
00BBC:  MOVWF  4C
00BBE:  RCALL  03E8
....................       lcd_data(gt_spcai%10+48);
00BC0:  MOVFF  40,4A
00BC4:  MOVLW  0A
00BC6:  MOVWF  4B
00BC8:  RCALL  09AE
00BCA:  MOVLW  30
00BCC:  ADDWF  00,W
00BCE:  MOVWF  49
00BD0:  MOVWF  4C
00BD2:  RCALL  03E8
....................       lcd_goto(18,2);
00BD4:  MOVLW  12
00BD6:  MOVWF  49
00BD8:  MOVLW  02
00BDA:  MOVWF  4A
00BDC:  RCALL  045E
....................       lcd_data(dem/10%10+48);
00BDE:  MOVFF  44,4A
00BE2:  MOVLW  0A
00BE4:  MOVWF  4B
00BE6:  RCALL  09AE
00BE8:  MOVFF  01,4A
00BEC:  MOVLW  0A
00BEE:  MOVWF  4B
00BF0:  RCALL  09AE
00BF2:  MOVLW  30
00BF4:  ADDWF  00,W
00BF6:  MOVWF  49
00BF8:  MOVWF  4C
00BFA:  CALL   03E8
....................       lcd_data(dem%10+48);
00BFE:  MOVFF  44,4A
00C02:  MOVLW  0A
00C04:  MOVWF  4B
00C06:  RCALL  09AE
00C08:  MOVLW  30
00C0A:  ADDWF  00,W
00C0C:  MOVWF  49
00C0E:  MOVWF  4C
00C10:  CALL   03E8
00C14:  BRA    0A96
....................    }
.................... }
.................... #int_timer1
.................... void ngat_timer1()
00C16:  SLEEP 
.................... {
....................    set_timer1(3036);
*
001A4:  MOVLW  0B
001A6:  MOVWF  FCF
001A8:  MOVLW  DC
001AA:  MOVWF  FCE
001AC:  NOP   
....................    bdn++;
001AE:  INCF   3C,F
001B0:  BCF    F9E.0
001B2:  GOTO   0068
.................... }

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
