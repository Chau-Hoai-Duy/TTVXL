CCS PCH C Compiler, Version 5.101, 43599               28-Feb-23 15:15

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_517_GIO_PHUT_GIAY_KEY_CAITIEN_NHAPNHAY.lst

               ROM used:   2474 bytes (8%)
                           Largest free fragment is 30290
               RAM used:   63 (3%) at main() level
                           82 (4%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0766
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   00CE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #DEFINE BOARD D501
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
.................... #ifndef    __TV_D501_TH_C__
.................... #define    __TV_D501_TH_C__
.................... #include<TV_D501_TH.h>
.................... #ifndef    __TV_D501_TH_H__
.................... #define    __TV_D501_TH_H__
.................... #include     <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA C0,F9
00C0:  DATA A4,B0
00C2:  DATA 99,92
00C4:  DATA 82,F8
00C6:  DATA 80,90
00C8:  DATA 88,83
00CA:  DATA C6,A1
00CC:  DATA 86,7F
*
0342:  MOVF   40,W
0344:  ANDLW  07
0346:  MOVWF  00
0348:  RRCF   40,W
034A:  MOVWF  01
034C:  RRCF   01,F
034E:  RRCF   01,F
0350:  MOVLW  1F
0352:  ANDWF  01,F
0354:  MOVF   01,W
0356:  ADDWF  42,W
0358:  MOVWF  FE9
035A:  MOVLW  00
035C:  ADDWFC 43,W
035E:  MOVWF  FEA
0360:  CLRF   01
0362:  INCF   01,F
0364:  INCF   00,F
0366:  BRA    036A
0368:  RLCF   01,F
036A:  DECFSZ 00,F
036C:  BRA    0368
036E:  MOVF   41,F
0370:  BZ    0378
0372:  MOVF   01,W
0374:  IORWF  FEF,F
0376:  BRA    037E
0378:  COMF   01,F
037A:  MOVF   01,W
037C:  ANDWF  FEF,F
037E:  RETURN 0
0380:  MOVF   40,W
0382:  ANDLW  07
0384:  MOVWF  00
0386:  RRCF   40,W
0388:  MOVWF  01
038A:  RRCF   01,F
038C:  RRCF   01,F
038E:  MOVLW  1F
0390:  ANDWF  01,F
0392:  MOVF   01,W
0394:  ADDWF  41,W
0396:  MOVWF  FE9
0398:  MOVLW  00
039A:  ADDWFC 42,W
039C:  MOVWF  FEA
039E:  MOVFF  FEF,01
03A2:  INCF   00,F
03A4:  BRA    03A8
03A6:  RRCF   01,F
03A8:  DECFSZ 00,F
03AA:  BRA    03A6
03AC:  MOVLW  01
03AE:  ANDWF  01,F
03B0:  RETURN 0
03B2:  BTFSC  FD8.1
03B4:  BRA    03BC
03B6:  CLRF   FEA
03B8:  MOVLW  4C
03BA:  MOVWF  FE9
03BC:  CLRF   00
03BE:  CLRF   01
03C0:  CLRF   02
03C2:  CLRF   03
03C4:  CLRF   4C
03C6:  CLRF   4D
03C8:  CLRF   4E
03CA:  CLRF   4F
03CC:  MOVF   4B,W
03CE:  IORWF  4A,W
03D0:  IORWF  49,W
03D2:  IORWF  48,W
03D4:  BZ    042E
03D6:  MOVLW  20
03D8:  MOVWF  50
03DA:  BCF    FD8.0
03DC:  RLCF   44,F
03DE:  RLCF   45,F
03E0:  RLCF   46,F
03E2:  RLCF   47,F
03E4:  RLCF   4C,F
03E6:  RLCF   4D,F
03E8:  RLCF   4E,F
03EA:  RLCF   4F,F
03EC:  MOVF   4B,W
03EE:  SUBWF  4F,W
03F0:  BNZ   0402
03F2:  MOVF   4A,W
03F4:  SUBWF  4E,W
03F6:  BNZ   0402
03F8:  MOVF   49,W
03FA:  SUBWF  4D,W
03FC:  BNZ   0402
03FE:  MOVF   48,W
0400:  SUBWF  4C,W
0402:  BNC   0422
0404:  MOVF   48,W
0406:  SUBWF  4C,F
0408:  MOVF   49,W
040A:  BTFSS  FD8.0
040C:  INCFSZ 49,W
040E:  SUBWF  4D,F
0410:  MOVF   4A,W
0412:  BTFSS  FD8.0
0414:  INCFSZ 4A,W
0416:  SUBWF  4E,F
0418:  MOVF   4B,W
041A:  BTFSS  FD8.0
041C:  INCFSZ 4B,W
041E:  SUBWF  4F,F
0420:  BSF    FD8.0
0422:  RLCF   00,F
0424:  RLCF   01,F
0426:  RLCF   02,F
0428:  RLCF   03,F
042A:  DECFSZ 50,F
042C:  BRA    03DA
042E:  MOVFF  4C,FEF
0432:  MOVFF  4D,FEC
0436:  MOVFF  4E,FEC
043A:  MOVFF  4F,FEC
043E:  RETURN 0
*
06B2:  ADDWF  FE8,W
06B4:  CLRF   FF7
06B6:  RLCF   FF7,F
06B8:  ADDLW  CD
06BA:  MOVWF  FF6
06BC:  MOVLW  06
06BE:  ADDWFC FF7,F
06C0:  TBLRD*-
06C2:  MOVF   FF5,W
06C4:  MOVWF  FFA
06C6:  TBLRD*
06C8:  MOVF   FF5,W
06CA:  MOVWF  FF9
06CC:  DATA 44,05
06CE:  DATA 80,05
06D0:  DATA E6,05
06D2:  DATA 4C,06
*
073E:  MOVF   40,W
0740:  CLRF   01
0742:  SUBWF  3F,W
0744:  BC    074C
0746:  MOVFF  3F,00
074A:  BRA    0764
074C:  CLRF   00
074E:  MOVLW  08
0750:  MOVWF  41
0752:  RLCF   3F,F
0754:  RLCF   00,F
0756:  MOVF   40,W
0758:  SUBWF  00,W
075A:  BTFSC  FD8.0
075C:  MOVWF  00
075E:  RLCF   01,F
0760:  DECFSZ 41,F
0762:  BRA    0752
0764:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device      adc=10
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use         delay(clock=20000000)
*
01BE:  CLRF   FEA
01C0:  MOVLW  40
01C2:  MOVWF  FE9
01C4:  MOVF   FEF,W
01C6:  BZ    01E2
01C8:  MOVLW  06
01CA:  MOVWF  01
01CC:  CLRF   00
01CE:  DECFSZ 00,F
01D0:  BRA    01CE
01D2:  DECFSZ 01,F
01D4:  BRA    01CC
01D6:  MOVLW  7B
01D8:  MOVWF  00
01DA:  DECFSZ 00,F
01DC:  BRA    01DA
01DE:  DECFSZ FEF,F
01E0:  BRA    01C8
01E2:  GOTO   021E (RETURN)
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... #include     <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit         TIM3IF                 = 0xFA1.1
.................... #bit         SSDO                   = 0xF84.2
.................... #bit         SSCK                   = 0xF84.0
.................... #define      analog_pins            an0_to_an2
.................... #define      lm35a_channel          0
.................... #define      lm35b_channel          1
.................... #define      gp2d12_channel         2
.................... #define      photoresis_channel     3
.................... #define      DCMOTOR_IN1            PIN_c1
.................... #define      TOUCH_PIN              pin_a5
.................... #define      DHT11_PIN              pin_d1
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      SRF04_TRIGER           PIN_E2
.................... #define      soft_i2c_sda           pin_b0
.................... #define      soft_i2c_scl           pin_b1
.................... #define      bt0                    pin_b5
.................... #define      bt1                    pin_b4
.................... #define      bt2                    pin_b3
.................... #define      bt3                    pin_b2
.................... #define      on                     bt0      
.................... #define      off                    bt1
.................... #define      inv                    bt2
.................... #define      up                     bt0    
.................... #define      dw                     bt1
.................... #define      clr                    bt2
.................... #define      mod                    bt3
.................... #define      stop                   bt3
.................... #define      on1                    bt0     
.................... #define      off1                   bt1
.................... #define      on2                    bt2       
.................... #define      off2                   bt3
.................... #define      S7SEG_RCK              pin_d5
.................... #define      LED32_RCK              pin_d4
.................... #define      D7SEG_RCK              pin_d6
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte 
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct 
.................... {
....................       int1      STEP_MOTOR_ENABLE;
....................       int1      STEP_MOTOR_IN1;
....................       int1      STEP_MOTOR_IN2;
....................       int1      STEP_MOTOR_IN3;
....................       int1      STEP_MOTOR_IN4;
....................       int1      DC_MOTOR_ENABLE;
....................       int1      PWRKEY;
....................       int1      NC_PIN1;          
....................       int1      BUZZER;
....................       int1      TRIAC_1;
....................       int1      TRIAC_2;
....................       int1      RELAY_1;
....................       int1      RELAY_2 ;
....................       int1      NC_PIN2 ;  
....................       int1      NC_PIN3;   
....................       int1      NC_PIN4;  
.................... }RBDC_STRUCT;
.................... typedef union
.................... {
....................       RBDC_STRUCT         bit;
....................       unsigned int8       xbyte[2];
.................... }RBDC_UNION;
.................... 
.................... typedef struct 
.................... {
....................     RBDC_UNION           rbdc;
....................     unsigned int8        lcddata; 
....................     unsigned int8        lcdcontrol;
....................     unsigned int8        glcddata;
....................     unsigned int8        glcdcontrol;    
.................... }SYSTEM_VAR_STRUCT;
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0};
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[4];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT;
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on();
.................... result buzzer_off();
.................... result relay_1_on();
.................... result relay_1_off();
.................... result relay_2_on();
.................... result relay_2_off();
.................... result triac_1_on();
.................... result triac_1_off();
.................... result triac_2_on();
.................... result triac_2_off();
.................... result DCMOTOR_ENABLE();
.................... result STEPMOTOR_ENABLE();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... void SSPI_WRITE(unsigned int8 x);
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]);
*
016E:  MOVFF  26,48
0172:  RCALL  00E0
0174:  MOVFF  25,48
0178:  RCALL  00E0
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]);
017A:  MOVFF  24,48
017E:  RCALL  00E0
0180:  MOVFF  23,48
0184:  RCALL  00E0
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0186:  BCF    F95.4
0188:  BSF    F8C.4
018A:  BCF    F95.4
018C:  BCF    F8C.4
....................      return OK; 
018E:  MOVLW  00
0190:  MOVWF  01
0192:  GOTO   02FC (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]);
0196:  MOVFF  27,48
019A:  RCALL  00E0
019C:  MOVFF  28,48
01A0:  RCALL  00E0
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]);
01A2:  MOVFF  29,48
01A6:  RCALL  00E0
01A8:  MOVFF  2A,48
01AC:  RCALL  00E0
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
01AE:  BCF    F95.6
01B0:  BSF    F8C.6
01B2:  BCF    F95.6
01B4:  BCF    F8C.6
....................       return OK;
01B6:  MOVLW  00
01B8:  MOVWF  01
01BA:  GOTO   02FE (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1)
*
01E6:  MOVLW  80
01E8:  MOVWF  3E
01EA:  CLRF   3F
01EC:  MOVF   3F,W
01EE:  SUBLW  07
01F0:  BNC   0234
....................       {
....................             SSPI_WRITE(i);
01F2:  MOVFF  3E,48
01F6:  RCALL  00E0
....................             SSPI_WRITE(~s7seg.led[n]);     
01F8:  CLRF   03
01FA:  MOVF   3F,W
01FC:  ADDLW  2B
01FE:  MOVWF  FE9
0200:  MOVLW  00
0202:  ADDWFC 03,W
0204:  MOVWF  FEA
0206:  MOVF   FEF,W
0208:  XORLW  FF
020A:  MOVWF  40
020C:  MOVWF  48
020E:  RCALL  00E0
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
0210:  BCF    F95.5
0212:  BSF    F8C.5
0214:  BCF    F95.5
0216:  BCF    F8C.5
....................             delay_ms(1);
0218:  MOVLW  01
021A:  MOVWF  40
021C:  BRA    01BE
....................             SSPI_WRITE(~0xff);
021E:  CLRF   48
0220:  RCALL  00E0
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0222:  BCF    F95.5
0224:  BSF    F8C.5
0226:  BCF    F95.5
0228:  BCF    F8C.5
022A:  MOVF   3F,W
022C:  INCF   3F,F
022E:  BCF    FD8.0
0230:  RRCF   3E,F
0232:  BRA    01EC
....................       }
....................       return OK;
0234:  MOVLW  00
0236:  MOVWF  01
0238:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {
....................      unsigned int8 cot;
....................      for(cot=0;cot<4;cot++)
....................      {
....................         output_bit(pin_b7,cot&0x02);
....................         output_bit(pin_b6,cot&0x01);
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);             
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);               
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);            
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4);
....................      }
....................      return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_glcd_lcd()
.................... {      
....................     SSPI_WRITE(system_var.glcdcontrol);             
023A:  MOVFF  1E,48
023E:  RCALL  00E0
....................     SSPI_WRITE(system_var.glcddata);
0240:  MOVFF  1D,48
0244:  RCALL  00E0
....................     SSPI_WRITE(system_var.lcdcontrol);       
0246:  MOVFF  1C,48
024A:  RCALL  00E0
....................     SSPI_WRITE(system_var.lcddata);           
024C:  MOVFF  1B,48
0250:  RCALL  00E0
....................     output_high(LCD_RCK);     
0252:  BCF    F95.2
0254:  BSF    F8C.2
....................     output_low(LCD_RCK);
0256:  BCF    F95.2
0258:  BCF    F8C.2
....................     return OK;
025A:  MOVLW  00
025C:  MOVWF  01
025E:  RETURN 0
.................... }
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {     
....................     system_var.lcdcontrol = ~lcd_signal;
0260:  MOVF   3E,W
0262:  MOVWF  1C
0264:  COMF   1C,F
....................     system_var.lcddata    = ~lcd_ins_hthi;      
0266:  MOVFF  3F,1B
026A:  COMF   1B,F
....................     private_write_glcd_lcd();
026C:  RCALL  023A
....................     return OK;
026E:  MOVLW  00
0270:  MOVWF  01
0272:  GOTO   0306 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     system_var.glcdcontrol = ~glcd_signal;
0276:  MOVF   3E,W
0278:  MOVWF  1E
027A:  COMF   1E,F
....................     system_var.glcddata    = ~glcd_ins_hthi;     
027C:  MOVFF  3F,1D
0280:  COMF   1D,F
....................     private_write_glcd_lcd();
0282:  RCALL  023A
....................     return OK;
0284:  MOVLW  00
0286:  MOVWF  01
0288:  GOTO   030C (RETURN)
.................... }
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {     
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3);
028C:  CLRF   47
028E:  MOVFF  45,48
0292:  RCALL  00E0
0294:  MOVFF  44,48
0298:  RCALL  00E0
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2);
029A:  CLRF   47
029C:  MOVFF  43,48
02A0:  RCALL  00E0
02A2:  MOVFF  42,48
02A6:  RCALL  00E0
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1);
02A8:  CLRF   47
02AA:  MOVFF  41,48
02AE:  RCALL  00E0
02B0:  MOVFF  40,48
02B4:  RCALL  00E0
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang);
02B6:  CLRF   47
02B8:  MOVFF  3F,48
02BC:  RCALL  00E0
02BE:  MOVFF  3E,48
02C2:  RCALL  00E0
....................       output_high(matrix_rck);
02C4:  BCF    F95.7
02C6:  BSF    F8C.7
....................       output_low(matrix_rck); 
02C8:  BCF    F95.7
02CA:  BCF    F8C.7
....................       return OK;
02CC:  MOVLW  00
02CE:  MOVWF  01
02D0:  GOTO   031E (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_buzzer_relay()
.................... {       
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);      
*
0152:  MOVFF  1A,48
0156:  RCALL  00E0
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]);
0158:  MOVFF  19,48
015C:  RCALL  00E0
....................       output_high(rbdc_rck);
015E:  BCF    F95.3
0160:  BSF    F8C.3
....................       output_low(rbdc_rck); 
0162:  BCF    F95.3
0164:  BCF    F8C.3
....................       return OK;
0166:  MOVLW  00
0168:  MOVWF  01
016A:  GOTO   02F2 (RETURN)
.................... }
.................... result buzzer_on()
.................... {    
....................       system_var.rbdc.bit.buzzer=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result buzzer_off()
.................... {     
....................       system_var.rbdc.bit.buzzer=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_1_on()
.................... {    
....................       system_var.rbdc.bit.relay_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_1_off()
.................... {    
....................       system_var.rbdc.bit.relay_1=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_2_on()
.................... {    
....................       system_var.rbdc.bit.relay_2=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_2_off()
.................... {    
....................       system_var.rbdc.bit.relay_2=0;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_on()
.................... {    
....................       system_var.rbdc.bit.triac_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_off()
.................... {    
....................       system_var.rbdc.bit.triac_1=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result triac_2_on()
.................... {    
....................       system_var.rbdc.bit.triac_2=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result triac_2_off()
.................... {    
....................       system_var.rbdc.bit.triac_2=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result DCMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1;
....................       private_write_buzzer_relay();  
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................       setup_ccp1(ccp_pwm);  
....................       setup_ccp2(ccp_pwm);  
....................       return OK;
.................... }
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  }
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  }
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  }
....................      return OK;
.................... }
.................... 
.................... result STEPMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.step_motor_enable=1;
....................       return OK;
.................... }
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07};
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0);
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1);
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2);
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3);
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................      output_high(ALLMODULE_G);  
*
02D4:  BCF    F95.0
02D6:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                   
02D8:  MOVLW  FF
02DA:  MOVWF  F92
02DC:  MOVLW  3C
02DE:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                               
02E0:  MOVLW  F1
02E2:  MOVWF  F94
02E4:  MOVLW  00
02E6:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00); 
02E8:  MOVWF  F95
02EA:  CLRF   F95
02EC:  CLRF   F8C
....................      port_b_pullups(0xff); 
02EE:  BCF    FF1.7
....................      private_write_buzzer_relay();
02F0:  BRA    0152
....................      led32.ledx32=0;
02F2:  CLRF   26
02F4:  CLRF   25
02F6:  CLRF   24
02F8:  CLRF   23
....................      led32_display();
02FA:  BRA    016E
....................      d7seg_display();
02FC:  BRA    0196
....................      s7seg_display();
02FE:  RCALL  01E6
....................      write_lcd20x4(0xff,0xff);
0300:  SETF   3E
0302:  SETF   3F
0304:  BRA    0260
....................      write_glcd128x64(0xff,0xff);
0306:  SETF   3E
0308:  SETF   3F
030A:  BRA    0276
....................      write_ledmatrix(0,0,0,0); 
030C:  CLRF   3F
030E:  CLRF   3E
0310:  CLRF   41
0312:  CLRF   40
0314:  CLRF   43
0316:  CLRF   42
0318:  CLRF   45
031A:  CLRF   44
031C:  BRA    028C
....................      output_low(ALLMODULE_G);  
031E:  BCF    F95.0
0320:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);        
0322:  MOVF   FC0,W
0324:  ANDLW  C0
0326:  IORLW  02
0328:  MOVWF  FC0
032A:  BSF    FC0.7
032C:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);   
032E:  MOVF   FC1,W
0330:  ANDLW  C0
0332:  IORLW  0C
0334:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8);
0336:  MOVLW  B5
0338:  MOVWF  FB1
....................      return OK;
033A:  MOVLW  00
033C:  MOVWF  01
033E:  GOTO   07C4 (RETURN)
.................... }
.................... void SSPI_WRITE(unsigned int8 x)
.................... { 
....................          if(x&0x80) ssdo=1; 
*
00E0:  BTFSS  48.7
00E2:  BRA    00E8
00E4:  BSF    F84.2
00E6:  BRA    00EA
....................          else       ssdo=0;
00E8:  BCF    F84.2
....................          ssck=0;    ssck=1;   
00EA:  BCF    F84.0
00EC:  BSF    F84.0
....................          if(x&0x40) ssdo=1; 
00EE:  BTFSS  48.6
00F0:  BRA    00F6
00F2:  BSF    F84.2
00F4:  BRA    00F8
....................          else       ssdo=0;
00F6:  BCF    F84.2
....................          ssck=0;    ssck=1;  
00F8:  BCF    F84.0
00FA:  BSF    F84.0
....................          if(x&0x20) ssdo=1; 
00FC:  BTFSS  48.5
00FE:  BRA    0104
0100:  BSF    F84.2
0102:  BRA    0106
....................          else       ssdo=0;
0104:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0106:  BCF    F84.0
0108:  BSF    F84.0
....................          if(x&0x10) ssdo=1; 
010A:  BTFSS  48.4
010C:  BRA    0112
010E:  BSF    F84.2
0110:  BRA    0114
....................          else       ssdo=0;
0112:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0114:  BCF    F84.0
0116:  BSF    F84.0
....................          if(x&0x08) ssdo=1; 
0118:  BTFSS  48.3
011A:  BRA    0120
011C:  BSF    F84.2
011E:  BRA    0122
....................          else       ssdo=0;
0120:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0122:  BCF    F84.0
0124:  BSF    F84.0
....................          if(x&0x04) ssdo=1; 
0126:  BTFSS  48.2
0128:  BRA    012E
012A:  BSF    F84.2
012C:  BRA    0130
....................          else       ssdo=0;
012E:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0130:  BCF    F84.0
0132:  BSF    F84.0
....................          if(x&0x02) ssdo=1; 
0134:  BTFSS  48.1
0136:  BRA    013C
0138:  BSF    F84.2
013A:  BRA    013E
....................          else       ssdo=0;
013C:  BCF    F84.2
....................          ssck=0;    ssck=1;  
013E:  BCF    F84.0
0140:  BSF    F84.0
....................          if(x&0x01) ssdo=1; 
0142:  BTFSS  48.0
0144:  BRA    014A
0146:  BSF    F84.2
0148:  BRA    014C
....................          else       ssdo=0;
014A:  BCF    F84.2
....................          ssck=0;    ssck=1;       
014C:  BCF    F84.0
014E:  BSF    F84.0
0150:  RETURN 0
.................... }
.................... #endif
.................... 
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
0440:  MOVF   FB2,W
0442:  MOVFF  FB3,03
0446:  ADDWF  1F,F
0448:  MOVF   FB3,W
044A:  ADDWFC 20,F
044C:  MOVLW  00
044E:  ADDWFC 21,F
0450:  ADDWFC 22,F
0452:  CLRF   FB3
0454:  MOVLW  02
0456:  MOVWF  FB2
0458:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
045A:  BTFSS  FA1.1
045C:  BRA    0466
045E:  MOVLW  01
0460:  ADDWF  21,F
0462:  MOVLW  00
0464:  ADDWFC 22,F
0466:  BCF    FA1.1
....................       return delay.timeline/625;
0468:  BCF    FD8.1
046A:  MOVFF  22,47
046E:  MOVFF  21,46
0472:  MOVFF  20,45
0476:  MOVFF  1F,44
047A:  CLRF   4B
047C:  CLRF   4A
047E:  MOVLW  02
0480:  MOVWF  49
0482:  MOVLW  71
0484:  MOVWF  48
0486:  RCALL  03B2
0488:  MOVFF  01,02
048C:  MOVFF  00,01
0490:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
0492:  MOVF   FB2,W
0494:  MOVFF  FB3,03
0498:  ADDWF  1F,F
049A:  MOVF   FB3,W
049C:  ADDWFC 20,F
049E:  MOVLW  00
04A0:  ADDWFC 21,F
04A2:  ADDWFC 22,F
04A4:  CLRF   FB3
04A6:  MOVLW  02
04A8:  MOVWF  FB2
04AA:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
04AC:  BTFSS  FA1.1
04AE:  BRA    04B8
04B0:  MOVLW  01
04B2:  ADDWF  21,F
04B4:  MOVLW  00
04B6:  ADDWFC 22,F
04B8:  BCF    FA1.1
....................       tam = delay.timeline/625;
04BA:  BCF    FD8.1
04BC:  MOVFF  22,47
04C0:  MOVFF  21,46
04C4:  MOVFF  20,45
04C8:  MOVFF  1F,44
04CC:  CLRF   4B
04CE:  CLRF   4A
04D0:  MOVLW  02
04D2:  MOVWF  49
04D4:  MOVLW  71
04D6:  MOVWF  48
04D8:  RCALL  03B2
04DA:  MOVFF  01,43
04DE:  MOVFF  00,42
....................       if(t<=tam) return tam-t;
04E2:  MOVF   41,W
04E4:  SUBWF  43,W
04E6:  BNC   0506
04E8:  BNZ   04F0
04EA:  MOVF   40,W
04EC:  SUBWF  42,W
04EE:  BNC   0506
04F0:  MOVF   40,W
04F2:  SUBWF  42,W
04F4:  MOVWF  00
04F6:  MOVF   41,W
04F8:  SUBWFB 43,W
04FA:  MOVWF  03
04FC:  MOVFF  00,01
0500:  MOVWF  02
0502:  BRA    0522
0504:  BRA    0522
....................       else       return 0xffff-t + tam;
0506:  MOVLW  FF
0508:  BSF    FD8.0
050A:  SUBFWB 40,W
050C:  MOVWF  44
050E:  MOVLW  FF
0510:  SUBFWB 41,W
0512:  MOVWF  45
0514:  MOVF   42,W
0516:  ADDWF  44,W
0518:  MOVWF  01
051A:  MOVF   43,W
051C:  ADDWFC 45,W
051E:  MOVWF  03
0520:  MOVWF  02
0522:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
0524:  MOVFF  3E,40
0528:  MOVLW  01
052A:  MOVWF  41
052C:  MOVLW  0F
052E:  MOVWF  43
0530:  MOVLW  92
0532:  MOVWF  42
0534:  RCALL  0342
....................       switch (step)
0536:  MOVF   37,W
0538:  ADDLW  FC
053A:  BTFSC  FD8.0
053C:  BRA    06AC
053E:  ADDLW  04
0540:  GOTO   06B2
....................       {
....................           case 0:
....................                  if(input(pin)==0)
0544:  MOVFF  3E,40
0548:  MOVLW  01
054A:  MOVWF  41
054C:  MOVLW  0F
054E:  MOVWF  43
0550:  MOVLW  92
0552:  MOVWF  42
0554:  RCALL  0342
0556:  MOVFF  3E,40
055A:  MOVLW  0F
055C:  MOVWF  42
055E:  MOVLW  80
0560:  MOVWF  41
0562:  RCALL  0380
0564:  BTFSC  01.0
0566:  BRA    057E
....................                   {
....................                         oldpin   = pin;
0568:  MOVFF  3F,34
056C:  MOVFF  3E,33
....................                         t        = delay_start();
0570:  RCALL  0440
0572:  MOVFF  02,36
0576:  MOVFF  01,35
....................                         step     = 1;
057A:  MOVLW  01
057C:  MOVWF  37
....................                   }
....................                  break;
057E:  BRA    06AC
....................            case 1:
....................                  if(input(oldpin))step = 0;
0580:  MOVFF  33,40
0584:  MOVLW  01
0586:  MOVWF  41
0588:  MOVLW  0F
058A:  MOVWF  43
058C:  MOVLW  92
058E:  MOVWF  42
0590:  RCALL  0342
0592:  MOVFF  33,40
0596:  MOVLW  0F
0598:  MOVWF  42
059A:  MOVLW  80
059C:  MOVWF  41
059E:  RCALL  0380
05A0:  BTFSS  01.0
05A2:  BRA    05A8
05A4:  CLRF   37
05A6:  BRA    05E4
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
05A8:  MOVF   33,W
05AA:  SUBWF  3E,W
05AC:  BNZ   05E4
05AE:  MOVF   34,W
05B0:  SUBWF  3F,W
05B2:  BNZ   05E4
05B4:  MOVFF  36,41
05B8:  MOVFF  35,40
05BC:  RCALL  0492
05BE:  MOVFF  02,41
05C2:  MOVFF  01,40
05C6:  MOVF   41,F
05C8:  BNZ   05D0
05CA:  MOVF   40,W
05CC:  SUBLW  1D
05CE:  BC    05E4
....................                    {
....................                       t    = delay_start();
05D0:  RCALL  0440
05D2:  MOVFF  02,36
05D6:  MOVFF  01,35
....................                       step = 2;
05DA:  MOVLW  02
05DC:  MOVWF  37
....................                       return OK;
05DE:  MOVLW  00
05E0:  MOVWF  01
05E2:  BRA    06B0
....................                    }
....................                  break;
05E4:  BRA    06AC
....................             case 2:
....................                  if(input(oldpin))step = 0;
05E6:  MOVFF  33,40
05EA:  MOVLW  01
05EC:  MOVWF  41
05EE:  MOVLW  0F
05F0:  MOVWF  43
05F2:  MOVLW  92
05F4:  MOVWF  42
05F6:  RCALL  0342
05F8:  MOVFF  33,40
05FC:  MOVLW  0F
05FE:  MOVWF  42
0600:  MOVLW  80
0602:  MOVWF  41
0604:  RCALL  0380
0606:  BTFSS  01.0
0608:  BRA    060E
060A:  CLRF   37
060C:  BRA    064A
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
060E:  MOVF   33,W
0610:  SUBWF  3E,W
0612:  BNZ   064A
0614:  MOVF   34,W
0616:  SUBWF  3F,W
0618:  BNZ   064A
061A:  MOVFF  36,41
061E:  MOVFF  35,40
0622:  RCALL  0492
0624:  MOVFF  02,41
0628:  MOVFF  01,40
062C:  MOVF   02,W
062E:  SUBLW  00
0630:  BC    064A
0632:  XORLW  FF
0634:  BNZ   063C
0636:  MOVF   40,W
0638:  SUBLW  F3
063A:  BC    064A
....................                    {
....................                        t        = delay_start();
063C:  RCALL  0440
063E:  MOVFF  02,36
0642:  MOVFF  01,35
....................                        step     = 3;
0646:  MOVLW  03
0648:  MOVWF  37
....................                    } 
....................                  break;
064A:  BRA    06AC
....................             case 3:
....................                    if(input(oldpin))step = 0; 
064C:  MOVFF  33,40
0650:  MOVLW  01
0652:  MOVWF  41
0654:  MOVLW  0F
0656:  MOVWF  43
0658:  MOVLW  92
065A:  MOVWF  42
065C:  RCALL  0342
065E:  MOVFF  33,40
0662:  MOVLW  0F
0664:  MOVWF  42
0666:  MOVLW  80
0668:  MOVWF  41
066A:  RCALL  0380
066C:  BTFSS  01.0
066E:  BRA    0674
0670:  CLRF   37
0672:  BRA    06AC
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
0674:  MOVF   33,W
0676:  SUBWF  3E,W
0678:  BNZ   06AC
067A:  MOVF   34,W
067C:  SUBWF  3F,W
067E:  BNZ   06AC
0680:  MOVFF  36,41
0684:  MOVFF  35,40
0688:  RCALL  0492
068A:  MOVFF  02,41
068E:  MOVFF  01,40
0692:  MOVF   41,F
0694:  BNZ   069C
0696:  MOVF   40,W
0698:  SUBLW  63
069A:  BC    06AC
....................                        {
....................                           t  = delay_start();
069C:  RCALL  0440
069E:  MOVFF  02,36
06A2:  MOVFF  01,35
....................                           return OK;
06A6:  MOVLW  00
06A8:  MOVWF  01
06AA:  BRA    06B0
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
06AC:  MOVLW  02
06AE:  MOVWF  01
06B0:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... unsigned int8 gio=0, phut=0, giay=0, bdn=0, cdo=0,i;
.................... void kt_nutnhan()
.................... {
....................    if(inputcd(mod)==0)
*
06D4:  MOVLW  7C
06D6:  MOVWF  3F
06D8:  MOVLW  0A
06DA:  MOVWF  3E
06DC:  RCALL  0524
06DE:  MOVF   01,F
06E0:  BNZ   06EC
....................    {
....................       cdo++;
06E2:  INCF   3C,F
....................       if(cdo>=4) cdo=0;
06E4:  MOVF   3C,W
06E6:  SUBLW  03
06E8:  BC    06EC
06EA:  CLRF   3C
....................    }
....................    if(inputcd(up)==0)
06EC:  MOVLW  7C
06EE:  MOVWF  3F
06F0:  MOVLW  0D
06F2:  MOVWF  3E
06F4:  RCALL  0524
06F6:  MOVF   01,F
06F8:  BNZ   0714
....................    {
....................       if(cdo==1) giay++;
06FA:  DECFSZ 3C,W
06FC:  BRA    0702
06FE:  INCF   3A,F
0700:  BRA    0714
....................       else if(cdo==2) phut++;
0702:  MOVF   3C,W
0704:  SUBLW  02
0706:  BNZ   070C
0708:  INCF   39,F
070A:  BRA    0714
....................       else if(cdo==3) gio++;
070C:  MOVF   3C,W
070E:  SUBLW  03
0710:  BNZ   0714
0712:  INCF   38,F
....................    }
....................    if(inputcd(dw)==0)
0714:  MOVLW  7C
0716:  MOVWF  3F
0718:  MOVLW  0C
071A:  MOVWF  3E
071C:  RCALL  0524
071E:  MOVF   01,F
0720:  BNZ   073C
....................    {
....................       if(cdo==1) giay--;
0722:  DECFSZ 3C,W
0724:  BRA    072A
0726:  DECF   3A,F
0728:  BRA    073C
....................       else if(cdo==2) phut--;
072A:  MOVF   3C,W
072C:  SUBLW  02
072E:  BNZ   0734
0730:  DECF   39,F
0732:  BRA    073C
....................       else if(cdo==3) gio--;
0734:  MOVF   3C,W
0736:  SUBLW  03
0738:  BNZ   073C
073A:  DECF   38,F
....................    }
073C:  RETURN 0
.................... }
.................... void main()
*
0766:  CLRF   FF8
0768:  BCF    FD0.7
076A:  BSF    07.7
076C:  BSF    FB8.3
076E:  MOVLW  08
0770:  MOVWF  FAF
0772:  MOVLW  02
0774:  MOVWF  FB0
0776:  MOVLW  A6
0778:  MOVWF  FAC
077A:  MOVLW  90
077C:  MOVWF  FAB
077E:  CLRF   38
0780:  CLRF   39
0782:  CLRF   3A
0784:  CLRF   3B
0786:  CLRF   3C
0788:  MOVF   FC1,W
078A:  ANDLW  C0
078C:  IORLW  0F
078E:  MOVWF  FC1
0790:  MOVLW  07
0792:  MOVWF  FB4
0794:  CLRF   19
0796:  CLRF   1A
0798:  CLRF   1B
079A:  CLRF   1C
079C:  CLRF   1D
079E:  CLRF   1E
07A0:  SETF   27
07A2:  SETF   28
07A4:  SETF   29
07A6:  SETF   2A
07A8:  SETF   2B
07AA:  SETF   2C
07AC:  SETF   2D
07AE:  SETF   2E
07B0:  SETF   2F
07B2:  SETF   30
07B4:  SETF   31
07B6:  SETF   32
07B8:  SETF   33
07BA:  SETF   34
07BC:  CLRF   35
07BE:  CLRF   36
07C0:  CLRF   37
.................... {
....................    system_init();
07C2:  BRA    02D4
....................    setup_timer_1(T1_INTERNAL| T1_DIV_BY_8);
07C4:  MOVLW  B5
07C6:  MOVWF  FCD
....................    set_timer1(3036);
07C8:  MOVLW  0B
07CA:  MOVWF  FCF
07CC:  MOVLW  DC
07CE:  MOVWF  FCE
07D0:  NOP   
....................    enable_interrupts(int_timer1);
07D2:  BSF    F9D.0
....................    enable_interrupts(global);
07D4:  MOVLW  C0
07D6:  IORWF  FF2,F
....................    while(true)
....................    {
....................       if(bdn>=10)
07D8:  MOVF   3B,W
07DA:  SUBLW  09
07DC:  BC    0802
....................       {
....................          bdn=bdn-10;
07DE:  MOVLW  0A
07E0:  SUBWF  3B,F
....................          giay++;
07E2:  INCF   3A,F
....................          if(giay>=60) 
07E4:  MOVF   3A,W
07E6:  SUBLW  3B
07E8:  BC    0802
....................          {
....................             giay=0;
07EA:  CLRF   3A
....................             phut++;
07EC:  INCF   39,F
....................             if(phut>=60)
07EE:  MOVF   39,W
07F0:  SUBLW  3B
07F2:  BC    0802
....................             {
....................                phut=0;
07F4:  CLRF   39
....................                gio++;
07F6:  INCF   38,F
....................                if(gio>=13) gio=1;
07F8:  MOVF   38,W
07FA:  SUBLW  0C
07FC:  BC    0802
07FE:  MOVLW  01
0800:  MOVWF  38
....................             }
....................          }
....................       }
....................       kt_nutnhan();
0802:  RCALL  06D4
....................       s7seg.led[0]=m7d[giay%10];
0804:  MOVFF  3A,3F
0808:  MOVLW  0A
080A:  MOVWF  40
080C:  RCALL  073E
080E:  CLRF   03
0810:  MOVF   00,W
0812:  RCALL  00AE
0814:  MOVWF  2B
....................       s7seg.led[1]=m7d[giay/10%10];
0816:  MOVFF  3A,3F
081A:  MOVLW  0A
081C:  MOVWF  40
081E:  RCALL  073E
0820:  MOVFF  01,3F
0824:  MOVLW  0A
0826:  MOVWF  40
0828:  RCALL  073E
082A:  CLRF   03
082C:  MOVF   00,W
082E:  RCALL  00AE
0830:  MOVWF  2C
....................       s7seg.led[2]=0xff-64;
0832:  MOVLW  BF
0834:  MOVWF  2D
....................       s7seg.led[3]=m7d[phut%10];
0836:  MOVFF  39,3F
083A:  MOVLW  0A
083C:  MOVWF  40
083E:  RCALL  073E
0840:  CLRF   03
0842:  MOVF   00,W
0844:  RCALL  00AE
0846:  MOVWF  2E
....................       s7seg.led[4]=m7d[phut/10%10];
0848:  MOVFF  39,3F
084C:  MOVLW  0A
084E:  MOVWF  40
0850:  RCALL  073E
0852:  MOVFF  01,3F
0856:  MOVLW  0A
0858:  MOVWF  40
085A:  RCALL  073E
085C:  CLRF   03
085E:  MOVF   00,W
0860:  RCALL  00AE
0862:  MOVWF  2F
....................       s7seg.led[5]=0xff-64;
0864:  MOVLW  BF
0866:  MOVWF  30
....................       s7seg.led[6]=m7d[gio%10];
0868:  MOVFF  38,3F
086C:  MOVLW  0A
086E:  MOVWF  40
0870:  RCALL  073E
0872:  CLRF   03
0874:  MOVF   00,W
0876:  RCALL  00AE
0878:  MOVWF  31
....................       s7seg.led[7]=m7d[gio/10%10];
087A:  MOVFF  38,3F
087E:  MOVLW  0A
0880:  MOVWF  40
0882:  RCALL  073E
0884:  MOVFF  01,3F
0888:  MOVLW  0A
088A:  MOVWF  40
088C:  RCALL  073E
088E:  CLRF   03
0890:  MOVF   00,W
0892:  RCALL  00AE
0894:  MOVWF  32
....................       if(cdo==1)
0896:  DECFSZ 3C,W
0898:  BRA    08F0
....................       {
....................          s7seg.led[0]=0xff;
089A:  SETF   2B
....................          s7seg.led[1]=0xff;
089C:  SETF   2C
....................          if(i<100)
089E:  MOVF   3D,W
08A0:  SUBLW  63
08A2:  BNC   08AC
....................          {
....................             s7seg_display();
08A4:  RCALL  01E6
....................             kt_nutnhan();
08A6:  RCALL  06D4
....................             i++;
08A8:  INCF   3D,F
....................          }
08AA:  BRA    08EE
....................          else if(i<200)
08AC:  MOVF   3D,W
08AE:  SUBLW  C7
08B0:  BNC   08EC
....................          {
....................             s7seg.led[0]=m7d[giay%10];
08B2:  MOVFF  3A,3F
08B6:  MOVLW  0A
08B8:  MOVWF  40
08BA:  RCALL  073E
08BC:  CLRF   03
08BE:  MOVF   00,W
08C0:  CALL   00AE
08C4:  MOVWF  2B
....................             s7seg.led[1]=m7d[giay/10%10];
08C6:  MOVFF  3A,3F
08CA:  MOVLW  0A
08CC:  MOVWF  40
08CE:  RCALL  073E
08D0:  MOVFF  01,3F
08D4:  MOVLW  0A
08D6:  MOVWF  40
08D8:  RCALL  073E
08DA:  CLRF   03
08DC:  MOVF   00,W
08DE:  CALL   00AE
08E2:  MOVWF  2C
....................             s7seg_display();
08E4:  RCALL  01E6
....................             kt_nutnhan();
08E6:  RCALL  06D4
....................             i++;
08E8:  INCF   3D,F
....................          }
08EA:  BRA    08EE
....................          else i=0;
08EC:  CLRF   3D
....................       }
08EE:  BRA    09AA
....................       else if(cdo==2)
08F0:  MOVF   3C,W
08F2:  SUBLW  02
08F4:  BNZ   094C
....................       {
....................          s7seg.led[3]=0xff;
08F6:  SETF   2E
....................          s7seg.led[4]=0xff;
08F8:  SETF   2F
....................          if(i<100)
08FA:  MOVF   3D,W
08FC:  SUBLW  63
08FE:  BNC   0908
....................          {
....................             s7seg_display();
0900:  RCALL  01E6
....................             kt_nutnhan();
0902:  RCALL  06D4
....................             i++;
0904:  INCF   3D,F
....................          }
0906:  BRA    094A
....................          else if(i<200)
0908:  MOVF   3D,W
090A:  SUBLW  C7
090C:  BNC   0948
....................          {
....................             s7seg.led[3]=m7d[phut%10];
090E:  MOVFF  39,3F
0912:  MOVLW  0A
0914:  MOVWF  40
0916:  RCALL  073E
0918:  CLRF   03
091A:  MOVF   00,W
091C:  CALL   00AE
0920:  MOVWF  2E
....................             s7seg.led[4]=m7d[phut/10%10];
0922:  MOVFF  39,3F
0926:  MOVLW  0A
0928:  MOVWF  40
092A:  RCALL  073E
092C:  MOVFF  01,3F
0930:  MOVLW  0A
0932:  MOVWF  40
0934:  RCALL  073E
0936:  CLRF   03
0938:  MOVF   00,W
093A:  CALL   00AE
093E:  MOVWF  2F
....................             s7seg_display();
0940:  RCALL  01E6
....................             kt_nutnhan();
0942:  RCALL  06D4
....................             i++;
0944:  INCF   3D,F
....................          }
0946:  BRA    094A
....................          else i=0;
0948:  CLRF   3D
....................       }
094A:  BRA    09AA
....................       else if(cdo==3)
094C:  MOVF   3C,W
094E:  SUBLW  03
0950:  BNZ   09A8
....................       {
....................          s7seg.led[6]=0xff;
0952:  SETF   31
....................          s7seg.led[7]=0xff;
0954:  SETF   32
....................          if(i<100)
0956:  MOVF   3D,W
0958:  SUBLW  63
095A:  BNC   0964
....................          {
....................             s7seg_display();
095C:  RCALL  01E6
....................             kt_nutnhan();
095E:  RCALL  06D4
....................             i++;
0960:  INCF   3D,F
....................          }
0962:  BRA    09A6
....................          else if(i<200)
0964:  MOVF   3D,W
0966:  SUBLW  C7
0968:  BNC   09A4
....................          {
....................             s7seg.led[6]=m7d[gio%10];
096A:  MOVFF  38,3F
096E:  MOVLW  0A
0970:  MOVWF  40
0972:  RCALL  073E
0974:  CLRF   03
0976:  MOVF   00,W
0978:  CALL   00AE
097C:  MOVWF  31
....................             s7seg.led[7]=m7d[gio/10%10];
097E:  MOVFF  38,3F
0982:  MOVLW  0A
0984:  MOVWF  40
0986:  RCALL  073E
0988:  MOVFF  01,3F
098C:  MOVLW  0A
098E:  MOVWF  40
0990:  RCALL  073E
0992:  CLRF   03
0994:  MOVF   00,W
0996:  CALL   00AE
099A:  MOVWF  32
....................             s7seg_display();
099C:  RCALL  01E6
....................             kt_nutnhan();
099E:  RCALL  06D4
....................             i++;
09A0:  INCF   3D,F
....................          }
09A2:  BRA    09A6
....................          else i=0;
09A4:  CLRF   3D
....................       }
09A6:  BRA    09AA
....................       else
....................       s7seg_display();
09A8:  RCALL  01E6
09AA:  BRA    07D8
....................    }
.................... }
.................... #int_timer1
.................... void ngat_timer1()
09AC:  SLEEP 
.................... {
....................    set_timer1(3036);
*
00CE:  MOVLW  0B
00D0:  MOVWF  FCF
00D2:  MOVLW  DC
00D4:  MOVWF  FCE
00D6:  NOP   
....................    bdn++;
00D8:  INCF   3B,F
00DA:  BCF    F9E.0
00DC:  GOTO   0060
.................... }

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
