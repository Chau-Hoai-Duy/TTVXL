CCS PCH C Compiler, Version 5.101, 43599               23-Feb-23 08:32

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\CLIP4.lst

               ROM used:   1852 bytes (1%)
                           Largest free fragment is 65536
               RAM used:   47 (1%) at main() level
                           66 (2%) worst case
               Stack used: 0 locations
               Stack size: 31

*
00000:  GOTO   05D0
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
00004:  CLRF   FF7
00006:  ADDLW  18
00008:  MOVWF  FF6
0000A:  MOVLW  00
0000C:  ADDWFC FF7,F
0000E:  MOVLW  00
00010:  MOVWF  FF8
00012:  TBLRD*+
00014:  MOVF   FF5,W
00016:  RETURN 0
00018:  DATA C0,F9
0001A:  DATA A4,B0
0001C:  DATA 99,92
0001E:  DATA 82,F8
00020:  DATA 80,90
00022:  DATA 88,83
00024:  DATA C6,A1
00026:  DATA 86,7F
00028:  CLRF   FF7
0002A:  ADDLW  3C
0002C:  MOVWF  FF6
0002E:  MOVLW  00
00030:  ADDWFC FF7,F
00032:  MOVLW  00
00034:  MOVWF  FF8
00036:  TBLRD*+
00038:  MOVF   FF5,W
0003A:  RETURN 0
0003C:  DATA EF,DF
0003E:  DATA BF,7F
*
002BC:  BTFSC  FD8.1
002BE:  BRA    02C6
002C0:  CLRF   FEA
002C2:  MOVLW  3A
002C4:  MOVWF  FE9
002C6:  CLRF   00
002C8:  CLRF   01
002CA:  CLRF   02
002CC:  CLRF   03
002CE:  CLRF   3A
002D0:  CLRF   3B
002D2:  CLRF   3C
002D4:  CLRF   3D
002D6:  MOVF   39,W
002D8:  IORWF  38,W
002DA:  IORWF  37,W
002DC:  IORWF  36,W
002DE:  BZ    0338
002E0:  MOVLW  20
002E2:  MOVWF  3E
002E4:  BCF    FD8.0
002E6:  RLCF   32,F
002E8:  RLCF   33,F
002EA:  RLCF   34,F
002EC:  RLCF   35,F
002EE:  RLCF   3A,F
002F0:  RLCF   3B,F
002F2:  RLCF   3C,F
002F4:  RLCF   3D,F
002F6:  MOVF   39,W
002F8:  SUBWF  3D,W
002FA:  BNZ   030C
002FC:  MOVF   38,W
002FE:  SUBWF  3C,W
00300:  BNZ   030C
00302:  MOVF   37,W
00304:  SUBWF  3B,W
00306:  BNZ   030C
00308:  MOVF   36,W
0030A:  SUBWF  3A,W
0030C:  BNC   032C
0030E:  MOVF   36,W
00310:  SUBWF  3A,F
00312:  MOVF   37,W
00314:  BTFSS  FD8.0
00316:  INCFSZ 37,W
00318:  SUBWF  3B,F
0031A:  MOVF   38,W
0031C:  BTFSS  FD8.0
0031E:  INCFSZ 38,W
00320:  SUBWF  3C,F
00322:  MOVF   39,W
00324:  BTFSS  FD8.0
00326:  INCFSZ 39,W
00328:  SUBWF  3D,F
0032A:  BSF    FD8.0
0032C:  RLCF   00,F
0032E:  RLCF   01,F
00330:  RLCF   02,F
00332:  RLCF   03,F
00334:  DECFSZ 3E,F
00336:  BRA    02E4
00338:  MOVFF  3A,FEF
0033C:  MOVFF  3B,FEC
00340:  MOVFF  3C,FEC
00344:  MOVFF  3D,FEC
00348:  RETURN 0
*
00508:  ADDWF  FE8,W
0050A:  CLRF   FF7
0050C:  RLCF   FF7,F
0050E:  ADDLW  29
00510:  MOVWF  FF6
00512:  MOVLW  05
00514:  ADDWFC FF7,F
00516:  MOVLW  00
00518:  MOVWF  FF8
0051A:  MOVWF  FFB
0051C:  TBLRD*-
0051E:  MOVF   FF5,W
00520:  MOVWF  FFA
00522:  TBLRD*
00524:  MOVF   FF5,W
00526:  MOVWF  FF9
00528:  DATA 42,04
0052A:  DATA 58,04
0052C:  DATA 92,04
0052E:  DATA CC,04
*
00588:  MOVF   2F,W
0058A:  XORWF  30,W
0058C:  ANDLW  80
0058E:  MOVWF  32
00590:  BTFSS  2F.7
00592:  BRA    0598
00594:  COMF   2F,F
00596:  INCF   2F,F
00598:  BTFSS  30.7
0059A:  BRA    05A0
0059C:  COMF   30,F
0059E:  INCF   30,F
005A0:  MOVF   30,W
005A2:  CLRF   01
005A4:  SUBWF  2F,W
005A6:  BC    05AE
005A8:  MOVFF  2F,00
005AC:  BRA    05C6
005AE:  CLRF   00
005B0:  MOVLW  08
005B2:  MOVWF  31
005B4:  RLCF   2F,F
005B6:  RLCF   00,F
005B8:  MOVF   30,W
005BA:  SUBWF  00,W
005BC:  BTFSC  FD8.0
005BE:  MOVWF  00
005C0:  RLCF   01,F
005C2:  DECFSZ 31,F
005C4:  BRA    05B4
005C6:  BTFSS  32.7
005C8:  BRA    05CE
005CA:  COMF   01,F
005CC:  INCF   01,F
005CE:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
00040:  CLRF   FEA
00042:  MOVLW  30
00044:  MOVWF  FE9
00046:  MOVF   FEF,W
00048:  BZ    0064
0004A:  MOVLW  06
0004C:  MOVWF  01
0004E:  CLRF   00
00050:  DECFSZ 00,F
00052:  BRA    0050
00054:  DECFSZ 01,F
00056:  BRA    004E
00058:  MOVLW  7B
0005A:  MOVWF  00
0005C:  DECFSZ 00,F
0005E:  BRA    005C
00060:  DECFSZ FEF,F
00062:  BRA    004A
00064:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
000C0:  MOVF   F66,W
000C2:  MOVFF  0B,F66
000C6:  RRCF   F64,W
000C8:  BNC   00C6
000CA:  MOVF   F66,W
000CC:  MOVFF  0A,F66
000D0:  RRCF   F64,W
000D2:  BNC   00D0
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
000D4:  MOVF   F66,W
000D6:  MOVFF  09,F66
000DA:  RRCF   F64,W
000DC:  BNC   00DA
000DE:  MOVF   F66,W
000E0:  MOVFF  08,F66
000E4:  RRCF   F64,W
000E6:  BNC   00E4
....................      output_high(LED32_RCK); output_low(LED32_RCK);
000E8:  BCF    F95.5
000EA:  BSF    F8C.5
000EC:  BCF    F95.5
000EE:  BCF    F8C.5
....................      return OK;
000F0:  MOVLW  00
000F2:  MOVWF  01
000F4:  GOTO   0200 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
000F8:  MOVF   F66,W
000FA:  MOVFF  10,F66
000FE:  RRCF   F64,W
00100:  BNC   00FE
00102:  MOVF   F66,W
00104:  MOVFF  11,F66
00108:  RRCF   F64,W
0010A:  BNC   0108
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
0010C:  MOVF   F66,W
0010E:  MOVFF  12,F66
00112:  RRCF   F64,W
00114:  BNC   0112
00116:  MOVF   F66,W
00118:  MOVFF  13,F66
0011C:  RRCF   F64,W
0011E:  BNC   011C
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
00120:  MOVF   F66,W
00122:  MOVFF  0C,F66
00126:  RRCF   F64,W
00128:  BNC   0126
0012A:  MOVF   F66,W
0012C:  MOVFF  0D,F66
00130:  RRCF   F64,W
00132:  BNC   0130
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
00134:  MOVF   F66,W
00136:  MOVFF  0E,F66
0013A:  RRCF   F64,W
0013C:  BNC   013A
0013E:  MOVF   F66,W
00140:  MOVFF  0F,F66
00144:  RRCF   F64,W
00146:  BNC   0144
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
00148:  BCF    F95.7
0014A:  BSF    F8C.7
0014C:  BCF    F95.7
0014E:  BCF    F8C.7
....................       delay_ms(8);
00150:  MOVLW  08
00152:  MOVWF  30
00154:  RCALL  0040
....................       return OK;
00156:  MOVLW  00
00158:  MOVWF  01
0015A:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
0015C:  CLRF   2E
0015E:  MOVF   2E,W
00160:  SUBLW  07
00162:  BNC   01B6
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
00164:  CLRF   03
00166:  MOVF   2E,W
00168:  ADDLW  14
0016A:  MOVWF  FE9
0016C:  MOVLW  00
0016E:  ADDWFC 03,W
00170:  MOVWF  FEA
00172:  MOVFF  FEF,F8D
00176:  CLRF   F96
00178:  MOVLW  80
0017A:  MOVWF  2F
0017C:  MOVF   2E,W
0017E:  MOVWF  01
00180:  BZ    018A
00182:  BCF    FD8.0
00184:  RRCF   2F,F
00186:  DECFSZ 01,F
00188:  BRA    0182
0018A:  MOVF   F66,W
0018C:  MOVFF  2F,F66
00190:  RRCF   F64,W
00192:  BNC   0190
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
00194:  BCF    F92.5
00196:  BSF    F89.5
00198:  BCF    F92.5
0019A:  BCF    F89.5
....................             delay_ms(1);
0019C:  MOVLW  01
0019E:  MOVWF  30
001A0:  RCALL  0040
....................             spi_write2(0);
001A2:  MOVF   F66,W
001A4:  CLRF   F66
001A6:  RRCF   F64,W
001A8:  BNC   01A6
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
001AA:  BCF    F92.5
001AC:  BSF    F89.5
001AE:  BCF    F92.5
001B0:  BCF    F89.5
001B2:  INCF   2E,F
001B4:  BRA    015E
....................       }
....................       return OK;
001B6:  MOVLW  00
001B8:  MOVWF  01
001BA:  GOTO   0204 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
*
00214:  CLRF   2E
00216:  MOVF   2E,W
00218:  SUBLW  03
0021A:  BNC   02B4
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
0021C:  CLRF   03
0021E:  MOVF   2E,W
00220:  RCALL  0028
00222:  ANDLW  80
00224:  BZ    022A
00226:  BSF    F93.7
00228:  BRA    022E
....................         else             output_low(pin_b7);
0022A:  BCF    F93.7
0022C:  BCF    F8A.7
....................         if(mq[cot]&0x40) output_float(pin_b6);
0022E:  CLRF   03
00230:  MOVF   2E,W
00232:  RCALL  0028
00234:  ANDLW  40
00236:  BZ    023C
00238:  BSF    F93.6
0023A:  BRA    0240
....................         else             output_low(pin_b6);
0023C:  BCF    F93.6
0023E:  BCF    F8A.6
....................         if(mq[cot]&0x20) output_float(pin_b5);
00240:  CLRF   03
00242:  MOVF   2E,W
00244:  RCALL  0028
00246:  ANDLW  20
00248:  BZ    024E
0024A:  BSF    F93.5
0024C:  BRA    0252
....................         else             output_low(pin_b5);
0024E:  BCF    F93.5
00250:  BCF    F8A.5
....................         if(mq[cot]&0x10) output_float(pin_b4);
00252:  CLRF   03
00254:  MOVF   2E,W
00256:  RCALL  0028
00258:  ANDLW  10
0025A:  BZ    0260
0025C:  BSF    F93.4
0025E:  BRA    0264
....................         else             output_low(pin_b4);
00260:  BCF    F93.4
00262:  BCF    F8A.4
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
00264:  BSF    F93.0
00266:  BTFSC  F81.0
00268:  BRA    0276
0026A:  MOVF   2E,W
0026C:  MULLW  04
0026E:  MOVFF  FF3,01
00272:  BRA    02B8
00274:  BRA    02B0
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
00276:  BSF    F93.1
00278:  BTFSC  F81.1
0027A:  BRA    028A
0027C:  MOVF   2E,W
0027E:  MULLW  04
00280:  MOVF   FF3,W
00282:  ADDLW  01
00284:  MOVWF  01
00286:  BRA    02B8
00288:  BRA    02B0
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
0028A:  BSF    F93.2
0028C:  BTFSC  F81.2
0028E:  BRA    029E
00290:  MOVF   2E,W
00292:  MULLW  04
00294:  MOVF   FF3,W
00296:  ADDLW  02
00298:  MOVWF  01
0029A:  BRA    02B8
0029C:  BRA    02B0
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
0029E:  BSF    F93.3
002A0:  BTFSC  F81.3
002A2:  BRA    02B0
002A4:  MOVF   2E,W
002A6:  MULLW  04
002A8:  MOVF   FF3,W
002AA:  ADDLW  03
002AC:  MOVWF  01
002AE:  BRA    02B8
002B0:  INCF   2E,F
002B2:  BRA    0216
....................     }
....................     return 0xff;
002B4:  MOVLW  FF
002B6:  MOVWF  01
002B8:  GOTO   0430 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
....................     output_lcd(lcd_ins_hthi);
....................     return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
*
001BE:  BCF    F97.7
001C0:  BCF    F8E.7
001C2:  MOVLW  00
001C4:  MOVWF  01
001C6:  GOTO   0206 (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
001CA:  BCF    F97.6
001CC:  BCF    F8E.6
001CE:  MOVLW  00
001D0:  MOVWF  01
001D2:  GOTO   0208 (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
001D6:  BRA    0066
....................       set_tris_a(0xdf);
001D8:  MOVLW  DF
001DA:  MOVWF  F92
....................       set_tris_d(0x04);
001DC:  MOVLW  04
001DE:  MOVWF  F95
....................       set_tris_e(0);
001E0:  MOVLW  00
001E2:  MOVWF  F96
....................       set_tris_f(0);
001E4:  MOVWF  F97
....................       set_tris_g(0);
001E6:  MOVWF  F98
....................       set_tris_c(0xff);
001E8:  MOVLW  FF
001EA:  MOVWF  F94
....................       port_b_pullups(0xFF);
001EC:  BCF    FF1.7
....................       output_g(0);
001EE:  CLRF   F98
001F0:  CLRF   F8F
....................       output_high(pin_g0);
001F2:  BCF    F98.0
001F4:  BSF    F8F.0
....................       led32.ledx32=0;
001F6:  CLRF   0B
001F8:  CLRF   0A
001FA:  CLRF   09
001FC:  CLRF   08
....................       led32_display();
001FE:  BRA    00C0
....................       d7seg_display();
00200:  RCALL  00F8
....................       s7seg_display();
00202:  BRA    015C
....................       buzzer_off(); 
00204:  BRA    01BE
....................       triac_2_off();
00206:  BRA    01CA
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
00208:  MOVLW  BD
0020A:  MOVWF  FB1
....................       return OK;
0020C:  MOVLW  00
0020E:  MOVWF  01
00210:  GOTO   0630 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
00066:  BSF    2E.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
00068:  CLRF   2F
0006A:  MOVF   2F,W
0006C:  SUBLW  09
0006E:  BNC   0098
....................       {     output_bit(pin_d0,tt);
00070:  BTFSC  2E.0
00072:  BRA    0078
00074:  BCF    F8C.0
00076:  BRA    007A
00078:  BSF    F8C.0
0007A:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
0007C:  BSF    F95.1
0007E:  MOVLW  00
00080:  BTFSC  F83.1
00082:  MOVLW  01
00084:  MOVWF  31
00086:  MOVLW  00
00088:  BTFSC  2E.0
0008A:  MOVLW  01
0008C:  SUBWF  31,W
0008E:  BTFSS  FD8.2
00090:  BRA    0098
....................             tt=!tt;
00092:  BTG    2E.0
00094:  INCF   2F,F
00096:  BRA    006A
....................       }
....................       if(n<10) while(true)
00098:  MOVF   2F,W
0009A:  SUBLW  09
0009C:  BNC   00B8
....................       {    output_d(0xff);
0009E:  CLRF   F95
000A0:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
000A2:  CLRF   F93
000A4:  SETF   F8A
000A6:  MOVLW  0A
000A8:  MOVWF  30
000AA:  RCALL  0040
....................            output_b(0); delay_ms(10);
000AC:  CLRF   F93
000AE:  CLRF   F8A
000B0:  MOVLW  0A
000B2:  MOVWF  30
000B4:  RCALL  0040
000B6:  BRA    009E
....................       }
....................       return OK;
000B8:  MOVLW  00
000BA:  MOVWF  01
000BC:  GOTO   01D8 (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
0034A:  MOVF   FB2,W
0034C:  MOVFF  FB3,03
00350:  ADDWF  04,F
00352:  MOVF   FB3,W
00354:  ADDWFC 05,F
00356:  MOVLW  00
00358:  ADDWFC 06,F
0035A:  ADDWFC 07,F
0035C:  CLRF   FB3
0035E:  MOVLW  02
00360:  MOVWF  FB2
00362:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
00364:  BTFSS  FA1.1
00366:  BRA    0370
00368:  MOVLW  01
0036A:  ADDWF  06,F
0036C:  MOVLW  00
0036E:  ADDWFC 07,F
00370:  BCF    FA1.1
....................       return delay.timeline/625;
00372:  BCF    FD8.1
00374:  MOVFF  07,35
00378:  MOVFF  06,34
0037C:  MOVFF  05,33
00380:  MOVFF  04,32
00384:  CLRF   39
00386:  CLRF   38
00388:  MOVLW  02
0038A:  MOVWF  37
0038C:  MOVLW  71
0038E:  MOVWF  36
00390:  RCALL  02BC
00392:  MOVFF  01,02
00396:  MOVFF  00,01
0039A:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
0039C:  MOVF   FB2,W
0039E:  MOVFF  FB3,03
003A2:  ADDWF  04,F
003A4:  MOVF   FB3,W
003A6:  ADDWFC 05,F
003A8:  MOVLW  00
003AA:  ADDWFC 06,F
003AC:  ADDWFC 07,F
003AE:  CLRF   FB3
003B0:  MOVLW  02
003B2:  MOVWF  FB2
003B4:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
003B6:  BTFSS  FA1.1
003B8:  BRA    03C2
003BA:  MOVLW  01
003BC:  ADDWF  06,F
003BE:  MOVLW  00
003C0:  ADDWFC 07,F
003C2:  BCF    FA1.1
....................       tam = delay.timeline/625;
003C4:  BCF    FD8.1
003C6:  MOVFF  07,35
003CA:  MOVFF  06,34
003CE:  MOVFF  05,33
003D2:  MOVFF  04,32
003D6:  CLRF   39
003D8:  CLRF   38
003DA:  MOVLW  02
003DC:  MOVWF  37
003DE:  MOVLW  71
003E0:  MOVWF  36
003E2:  RCALL  02BC
003E4:  MOVFF  01,31
003E8:  MOVFF  00,30
....................       if(t<=tam) return tam-t;
003EC:  MOVF   2F,W
003EE:  SUBWF  31,W
003F0:  BNC   0410
003F2:  BNZ   03FA
003F4:  MOVF   2E,W
003F6:  SUBWF  30,W
003F8:  BNC   0410
003FA:  MOVF   2E,W
003FC:  SUBWF  30,W
003FE:  MOVWF  00
00400:  MOVF   2F,W
00402:  SUBWFB 31,W
00404:  MOVWF  03
00406:  MOVFF  00,01
0040A:  MOVWF  02
0040C:  BRA    042C
0040E:  BRA    042C
....................       else       return 0xffff-t + tam;
00410:  MOVLW  FF
00412:  BSF    FD8.0
00414:  SUBFWB 2E,W
00416:  MOVWF  32
00418:  MOVLW  FF
0041A:  SUBFWB 2F,W
0041C:  MOVWF  33
0041E:  MOVF   30,W
00420:  ADDWF  32,W
00422:  MOVWF  01
00424:  MOVF   31,W
00426:  ADDWFC 33,W
00428:  MOVWF  03
0042A:  MOVWF  02
0042C:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
....................       switch (step)
....................       {
....................           case 0:
....................                  if(input(pin)==0)
....................                   {
....................                         oldpin   = pin;
....................                         t        = delay_start();
....................                         step     = 1;
....................                   }
....................                  break;
....................            case 1:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
....................                    {
....................                       t    = delay_start();
....................                       step = 2;
....................                       return OK;
....................                    }
....................                  break;
....................             case 2:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
....................                    {
....................                        t        = delay_start();
....................                        step     = 3;
....................                    } 
....................                  break;
....................             case 3:
....................                    if(input(oldpin))step = 0; 
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
....................                        {
....................                           t  = delay_start();
....................                           return OK;
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_key4x4.c>
.................... #ifndef  __TV_KEY4x4_C__
.................... #define  __TV_KEY4x4_C__
.................... #include<tv_key4x4.h>
.................... #ifndef  __TV_KEY4x4_H__
.................... #define  __TV_KEY4x4_H__
.................... typedef struct
.................... {
....................       unsigned int8 key;
.................... }KEY4x4_STRUCT;
.................... KEY4x4_STRUCT  key4x4;
.................... result key4x4_read(void);
.................... #endif
.................... 
.................... result key4x4_read()
.................... {      
....................          static unsigned int8  step=0;
....................          static unsigned int16 t;
....................          key4x4.key = KEYREAD();
0042E:  BRA    0214
00430:  MOVFF  01,21
....................          switch (step)
00434:  MOVF   22,W
00436:  ADDLW  FC
00438:  BTFSC  FD8.0
0043A:  BRA    0500
0043C:  ADDLW  04
0043E:  GOTO   0508
....................          {
....................              case 0:
....................                    if( key4x4.key!=0xff)
00442:  INCFSZ 21,W
00444:  BRA    0448
00446:  BRA    0456
....................                       {     t   = delay_start();
00448:  RCALL  034A
0044A:  MOVFF  02,24
0044E:  MOVFF  01,23
....................                             step=1;
00452:  MOVLW  01
00454:  MOVWF  22
....................                       } 
....................                     break;
00456:  BRA    0500
....................               case 1:
....................                     if(key4x4.key==0xff)step =0;
00458:  INCFSZ 21,W
0045A:  BRA    0460
0045C:  CLRF   22
0045E:  BRA    0490
....................                     else if(delay_stop(t)>=30)
00460:  MOVFF  24,2F
00464:  MOVFF  23,2E
00468:  RCALL  039C
0046A:  MOVFF  02,2F
0046E:  MOVFF  01,2E
00472:  MOVF   2F,F
00474:  BNZ   047C
00476:  MOVF   2E,W
00478:  SUBLW  1D
0047A:  BC    0490
....................                     {   step = 2;
0047C:  MOVLW  02
0047E:  MOVWF  22
....................                         t    = delay_start(); 
00480:  RCALL  034A
00482:  MOVFF  02,24
00486:  MOVFF  01,23
....................                         return OK;
0048A:  MOVLW  00
0048C:  MOVWF  01
0048E:  BRA    0504
....................                     }
....................                     break; 
00490:  BRA    0500
....................               case 2:
....................                     if(key4x4.key==0xff)step =0;
00492:  INCFSZ 21,W
00494:  BRA    049A
00496:  CLRF   22
00498:  BRA    04CA
....................                     else if(delay_stop(t)>=500)
0049A:  MOVFF  24,2F
0049E:  MOVFF  23,2E
004A2:  RCALL  039C
004A4:  MOVFF  02,2F
004A8:  MOVFF  01,2E
004AC:  MOVF   02,W
004AE:  SUBLW  00
004B0:  BC    04CA
004B2:  XORLW  FF
004B4:  BNZ   04BC
004B6:  MOVF   2E,W
004B8:  SUBLW  F3
004BA:  BC    04CA
....................                        {
....................                            t    = delay_start(); 
004BC:  RCALL  034A
004BE:  MOVFF  02,24
004C2:  MOVFF  01,23
....................                            step = 3;
004C6:  MOVLW  03
004C8:  MOVWF  22
....................                        } 
....................                     break;
004CA:  BRA    0500
....................               case 3:
....................                     if(key4x4.key==0xff)step =0;
004CC:  INCFSZ 21,W
004CE:  BRA    04D4
004D0:  CLRF   22
004D2:  BRA    0500
....................                     else if(delay_stop(t)>=100)
004D4:  MOVFF  24,2F
004D8:  MOVFF  23,2E
004DC:  RCALL  039C
004DE:  MOVFF  02,2F
004E2:  MOVFF  01,2E
004E6:  MOVF   2F,F
004E8:  BNZ   04F0
004EA:  MOVF   2E,W
004EC:  SUBLW  63
004EE:  BC    0500
....................                       {
....................                          t    = delay_start(); 
004F0:  RCALL  034A
004F2:  MOVFF  02,24
004F6:  MOVFF  01,23
....................                          return OK;
004FA:  MOVLW  00
004FC:  MOVWF  01
004FE:  BRA    0504
....................                       }
....................                      break; 
....................          }
....................          return BUSY;
00500:  MOVLW  02
00502:  MOVWF  01
00504:  GOTO   0532 (RETURN)
.................... }
.................... #endif
.................... 
.................... signed int8 i=0, gtcaibd=0, dem=0, gtcaisau=0, j=0, jcu=0;
.................... unsigned int16 k;
.................... unsigned int1 cdo=0;
.................... void kt_nutnhan()
.................... {
....................    if(key4x4_read()==ok)
*
00530:  BRA    042E
00532:  MOVF   01,F
00534:  BNZ   0584
....................    {
....................       if((key4x4.key<=9)&&(key4x4.key!=13))
00536:  MOVF   21,W
00538:  SUBLW  09
0053A:  BNC   057C
0053C:  MOVF   21,W
0053E:  SUBLW  0D
00540:  BZ    057C
....................       {
....................          if(i==0)
00542:  MOVF   25,F
00544:  BNZ   0556
....................          {
....................             gtcaibd=key4x4.key*10;
00546:  MOVF   21,W
00548:  MULLW  0A
0054A:  MOVFF  FF3,26
....................             d7seg.led[3]=m7d[key4x4.key];
0054E:  CLRF   03
00550:  MOVF   21,W
00552:  RCALL  0004
00554:  MOVWF  0F
....................          }
....................          if(i==1)
00556:  DECFSZ 25,W
00558:  BRA    056C
....................          {
....................             gtcaibd=gtcaibd+key4x4.key;
0055A:  MOVF   21,W
0055C:  ADDWF  26,F
....................             d7seg.led[2]=m7d[key4x4.key];
0055E:  CLRF   03
00560:  MOVF   21,W
00562:  RCALL  0004
00564:  MOVWF  0E
....................             dem=0;
00566:  CLRF   27
....................             gtcaisau=gtcaibd;
00568:  MOVFF  26,28
....................          }
....................          i++;
0056C:  INCF   25,F
....................          if(i>=2) i=0;
0056E:  BTFSC  25.7
00570:  BRA    057A
00572:  MOVF   25,W
00574:  SUBLW  01
00576:  BC    057A
00578:  CLRF   25
....................       }
0057A:  BRA    0584
....................       else if(key4x4.key==13) cdo=~cdo;
0057C:  MOVF   21,W
0057E:  SUBLW  0D
00580:  BNZ   0584
00582:  BTG    2D.0
....................       else;
....................    }
....................    d7seg_display();
00584:  RCALL  00F8
00586:  RETURN 0
.................... }
.................... void main()
*
005D0:  CLRF   FF8
005D2:  BCF    FD0.7
005D4:  BCF    F63.5
005D6:  MOVLW  00
005D8:  MOVWF  F64
005DA:  MOVLW  20
005DC:  MOVWF  F63
005DE:  BCF    F95.4
005E0:  BSF    F95.5
005E2:  BCF    F95.6
005E4:  CLRF   25
005E6:  CLRF   26
005E8:  CLRF   27
005EA:  CLRF   28
005EC:  CLRF   29
005EE:  CLRF   2A
005F0:  BCF    2D.0
005F2:  MOVF   FC1,W
005F4:  ANDLW  C0
005F6:  IORLW  0F
005F8:  MOVWF  FC1
005FA:  MOVLW  07
005FC:  MOVWF  FB4
005FE:  SETF   0C
00600:  SETF   0D
00602:  SETF   0E
00604:  SETF   0F
00606:  SETF   10
00608:  SETF   11
0060A:  SETF   12
0060C:  SETF   13
0060E:  SETF   14
00610:  SETF   15
00612:  SETF   16
00614:  SETF   17
00616:  SETF   18
00618:  SETF   19
0061A:  SETF   1A
0061C:  SETF   1B
0061E:  SETF   1C
00620:  SETF   1D
00622:  CLRF   1E
00624:  CLRF   1F
00626:  CLRF   20
00628:  CLRF   22
0062A:  CLRF   23
0062C:  CLRF   24
.................... {
....................    system_init();
0062E:  BRA    01D6
....................    setup_timer_0(T0_EXT_L_TO_H| T0_DIV_1);
00630:  MOVLW  A8
00632:  MOVWF  FD5
....................    set_timer0(0);
00634:  CLRF   FD7
00636:  CLRF   FD6
00638:  NOP   
....................    d7seg.led[0]=m7d[0];
0063A:  MOVLW  C0
0063C:  MOVWF  0C
....................    d7seg.led[1]=m7d[0];
0063E:  MOVWF  0D
....................    d7seg.led[2]=m7d[0];
00640:  MOVWF  0E
....................    d7seg.led[3]=m7d[0];
00642:  MOVWF  0F
....................    while(true)
....................    {
....................       kt_nutnhan();
00644:  RCALL  0530
....................       j=get_timer0();
00646:  MOVF   FD6,W
00648:  MOVWF  29
....................       if(j>100) 
0064A:  BTFSC  29.7
0064C:  BRA    065E
0064E:  MOVF   29,W
00650:  SUBLW  64
00652:  BC    065E
....................       {
....................          set_timer0(0);
00654:  CLRF   FD7
00656:  CLRF   FD6
00658:  NOP   
....................          j=get_timer0();
0065A:  MOVF   FD6,W
0065C:  MOVWF  29
....................       }
....................       if(cdo==0)
0065E:  BTFSC  2D.0
00660:  BRA    0682
....................       {
....................          if(j!=jcu)
00662:  MOVF   2A,W
00664:  SUBWF  29,W
00666:  BZ    0680
....................          {
....................             jcu=j;
00668:  MOVFF  29,2A
....................             dem++;
0066C:  INCF   27,F
....................             if(dem>gtcaisau) dem=1;
0066E:  MOVF   28,W
00670:  XORLW  80
00672:  MOVWF  00
00674:  MOVF   27,W
00676:  XORLW  80
00678:  SUBWF  00,W
0067A:  BC    0680
0067C:  MOVLW  01
0067E:  MOVWF  27
....................          }
....................       }
00680:  BRA    0696
....................       else
....................       {
....................          if(j!=jcu)
00682:  MOVF   2A,W
00684:  SUBWF  29,W
00686:  BZ    0696
....................          {
....................             jcu=j;
00688:  MOVFF  29,2A
....................             dem--;
0068C:  DECF   27,F
....................             if(dem<0) dem=gtcaisau;
0068E:  BTFSS  27.7
00690:  BRA    0696
00692:  MOVFF  28,27
....................          }
....................       }
....................       if(i!=1)
00696:  DECFSZ 25,W
00698:  BRA    069C
0069A:  BRA    06E0
....................       {
....................          for(k=0;k<=1;k++)
0069C:  CLRF   2C
0069E:  CLRF   2B
006A0:  MOVF   2C,F
006A2:  BNZ   06E0
006A4:  MOVF   2B,W
006A6:  SUBLW  01
006A8:  BNC   06E0
....................          {
....................             d7seg.led[2]=m7d[gtcaibd%10];
006AA:  MOVFF  26,2F
006AE:  MOVLW  0A
006B0:  MOVWF  30
006B2:  RCALL  0588
006B4:  CLRF   03
006B6:  MOVF   00,W
006B8:  BTFSC  00.7
006BA:  DECF   03,F
006BC:  RCALL  0004
006BE:  MOVWF  0E
....................             delay_ms(1); kt_nutnhan();
006C0:  MOVLW  01
006C2:  MOVWF  30
006C4:  RCALL  0040
006C6:  RCALL  0530
....................             d7seg_display();
006C8:  RCALL  00F8
....................             d7seg.led[2]=0xff-128;
006CA:  MOVLW  7F
006CC:  MOVWF  0E
....................             delay_ms(1); kt_nutnhan();
006CE:  MOVLW  01
006D0:  MOVWF  30
006D2:  RCALL  0040
006D4:  RCALL  0530
....................             d7seg_display();
006D6:  RCALL  00F8
006D8:  INCF   2B,F
006DA:  BTFSC  FD8.2
006DC:  INCF   2C,F
006DE:  BRA    06A0
....................          }
....................       }
....................       d7seg.led[0]=m7d[dem%10];
006E0:  MOVFF  27,2F
006E4:  MOVLW  0A
006E6:  MOVWF  30
006E8:  RCALL  0588
006EA:  CLRF   03
006EC:  MOVF   00,W
006EE:  BTFSC  00.7
006F0:  DECF   03,F
006F2:  RCALL  0004
006F4:  MOVWF  0C
....................       d7seg.led[1]=m7d[dem/10%10];
006F6:  MOVFF  27,2F
006FA:  MOVLW  0A
006FC:  MOVWF  30
006FE:  RCALL  0588
00700:  MOVFF  01,2F
00704:  MOVLW  0A
00706:  MOVWF  30
00708:  RCALL  0588
0070A:  CLRF   03
0070C:  MOVF   00,W
0070E:  BTFSC  00.7
00710:  DECF   03,F
00712:  RCALL  0004
00714:  MOVWF  0D
....................       d7seg.led[3]=m7d[gtcaibd/10%10];
00716:  MOVFF  26,2F
0071A:  MOVLW  0A
0071C:  MOVWF  30
0071E:  RCALL  0588
00720:  MOVFF  01,2F
00724:  MOVLW  0A
00726:  MOVWF  30
00728:  RCALL  0588
0072A:  CLRF   03
0072C:  MOVF   00,W
0072E:  BTFSC  00.7
00730:  DECF   03,F
00732:  RCALL  0004
00734:  MOVWF  01
00736:  MOVWF  0F
00738:  BRA    0644
....................    }
.................... }
.................... 
0073A:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
