CCS PCH C Compiler, Version 5.101, 43599               06-Mar-23 21:35

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_521_3MODULE_123.lst

               ROM used:   3806 bytes (3%)
                           Largest free fragment is 65536
               RAM used:   77 (2%) at main() level
                           96 (2%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   0B76
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00FA
00068:  MOVFF  0E,00
0006C:  MOVFF  0F,01
00070:  MOVFF  10,02
00074:  MOVFF  11,03
00078:  MOVFF  0C,FE9
0007C:  MOVFF  07,FEA
00080:  BSF    07.7
00082:  MOVFF  08,FE1
00086:  MOVFF  09,FE2
0008A:  MOVFF  0A,FD9
0008E:  MOVFF  0B,FDA
00092:  MOVFF  12,FF3
00096:  MOVFF  13,FF4
0009A:  MOVFF  14,FFA
0009E:  MOVFF  15,FF5
000A2:  MOVFF  16,FF6
000A6:  MOVFF  17,FF7
000AA:  MOVFF  18,FF8
000AE:  MOVFF  19,FFB
000B2:  MOVF   04,W
000B4:  MOVFF  06,FE0
000B8:  MOVFF  05,FD8
000BC:  RETFIE 0
.................... //#define   BOARD     D501 
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
000BE:  CLRF   FF7
000C0:  ADDLW  D2
000C2:  MOVWF  FF6
000C4:  MOVLW  00
000C6:  ADDWFC FF7,F
000C8:  MOVLW  00
000CA:  MOVWF  FF8
000CC:  TBLRD*+
000CE:  MOVF   FF5,W
000D0:  RETURN 0
000D2:  DATA C0,F9
000D4:  DATA A4,B0
000D6:  DATA 99,92
000D8:  DATA 82,F8
000DA:  DATA 80,90
000DC:  DATA 88,83
000DE:  DATA C6,A1
000E0:  DATA 86,7F
000E2:  CLRF   FF7
000E4:  ADDLW  F6
000E6:  MOVWF  FF6
000E8:  MOVLW  00
000EA:  ADDWFC FF7,F
000EC:  MOVLW  00
000EE:  MOVWF  FF8
000F0:  TBLRD*+
000F2:  MOVF   FF5,W
000F4:  RETURN 0
000F6:  DATA EF,DF
000F8:  DATA BF,7F
*
002DC:  CLRF   01
002DE:  CLRF   02
002E0:  CLRF   00
002E2:  CLRF   03
002E4:  MOVF   54,W
002E6:  BNZ   02EC
002E8:  MOVF   53,W
002EA:  BZ    031C
002EC:  MOVLW  10
002EE:  MOVWF  55
002F0:  BCF    FD8.0
002F2:  RLCF   51,F
002F4:  RLCF   52,F
002F6:  RLCF   00,F
002F8:  RLCF   03,F
002FA:  MOVF   54,W
002FC:  SUBWF  03,W
002FE:  BNZ   0304
00300:  MOVF   53,W
00302:  SUBWF  00,W
00304:  BNC   0314
00306:  MOVF   53,W
00308:  SUBWF  00,F
0030A:  BTFSS  FD8.0
0030C:  DECF   03,F
0030E:  MOVF   54,W
00310:  SUBWF  03,F
00312:  BSF    FD8.0
00314:  RLCF   01,F
00316:  RLCF   02,F
00318:  DECFSZ 55,F
0031A:  BRA    02F0
0031C:  RETURN 0
*
0043A:  BTFSC  FD8.1
0043C:  BRA    0444
0043E:  CLRF   FEA
00440:  MOVLW  5A
00442:  MOVWF  FE9
00444:  CLRF   00
00446:  CLRF   01
00448:  CLRF   02
0044A:  CLRF   03
0044C:  CLRF   5A
0044E:  CLRF   5B
00450:  CLRF   5C
00452:  CLRF   5D
00454:  MOVF   59,W
00456:  IORWF  58,W
00458:  IORWF  57,W
0045A:  IORWF  56,W
0045C:  BZ    04B6
0045E:  MOVLW  20
00460:  MOVWF  5E
00462:  BCF    FD8.0
00464:  RLCF   52,F
00466:  RLCF   53,F
00468:  RLCF   54,F
0046A:  RLCF   55,F
0046C:  RLCF   5A,F
0046E:  RLCF   5B,F
00470:  RLCF   5C,F
00472:  RLCF   5D,F
00474:  MOVF   59,W
00476:  SUBWF  5D,W
00478:  BNZ   048A
0047A:  MOVF   58,W
0047C:  SUBWF  5C,W
0047E:  BNZ   048A
00480:  MOVF   57,W
00482:  SUBWF  5B,W
00484:  BNZ   048A
00486:  MOVF   56,W
00488:  SUBWF  5A,W
0048A:  BNC   04AA
0048C:  MOVF   56,W
0048E:  SUBWF  5A,F
00490:  MOVF   57,W
00492:  BTFSS  FD8.0
00494:  INCFSZ 57,W
00496:  SUBWF  5B,F
00498:  MOVF   58,W
0049A:  BTFSS  FD8.0
0049C:  INCFSZ 58,W
0049E:  SUBWF  5C,F
004A0:  MOVF   59,W
004A2:  BTFSS  FD8.0
004A4:  INCFSZ 59,W
004A6:  SUBWF  5D,F
004A8:  BSF    FD8.0
004AA:  RLCF   00,F
004AC:  RLCF   01,F
004AE:  RLCF   02,F
004B0:  RLCF   03,F
004B2:  DECFSZ 5E,F
004B4:  BRA    0462
004B6:  MOVFF  5A,FEF
004BA:  MOVFF  5B,FEC
004BE:  MOVFF  5C,FEC
004C2:  MOVFF  5D,FEC
004C6:  RETURN 0
*
00686:  ADDWF  FE8,W
00688:  CLRF   FF7
0068A:  RLCF   FF7,F
0068C:  ADDLW  A7
0068E:  MOVWF  FF6
00690:  MOVLW  06
00692:  ADDWFC FF7,F
00694:  MOVLW  00
00696:  MOVWF  FF8
00698:  MOVWF  FFB
0069A:  TBLRD*-
0069C:  MOVF   FF5,W
0069E:  MOVWF  FFA
006A0:  TBLRD*
006A2:  MOVF   FF5,W
006A4:  MOVWF  FF9
006A6:  DATA C0,05
006A8:  DATA D6,05
006AA:  DATA 10,06
006AC:  DATA 4A,06
006AE:  MOVF   4E,W
006B0:  ANDLW  07
006B2:  MOVWF  00
006B4:  RRCF   4E,W
006B6:  MOVWF  01
006B8:  RRCF   01,F
006BA:  RRCF   01,F
006BC:  MOVLW  1F
006BE:  ANDWF  01,F
006C0:  MOVF   01,W
006C2:  ADDWF  50,W
006C4:  MOVWF  FE9
006C6:  MOVLW  00
006C8:  ADDWFC 51,W
006CA:  MOVWF  FEA
006CC:  CLRF   01
006CE:  INCF   01,F
006D0:  INCF   00,F
006D2:  BRA    06D6
006D4:  RLCF   01,F
006D6:  DECFSZ 00,F
006D8:  BRA    06D4
006DA:  MOVF   4F,F
006DC:  BZ    06E4
006DE:  MOVF   01,W
006E0:  IORWF  FEF,F
006E2:  BRA    06EA
006E4:  COMF   01,F
006E6:  MOVF   01,W
006E8:  ANDWF  FEF,F
006EA:  RETURN 0
006EC:  MOVF   4E,W
006EE:  ANDLW  07
006F0:  MOVWF  00
006F2:  RRCF   4E,W
006F4:  MOVWF  01
006F6:  RRCF   01,F
006F8:  RRCF   01,F
006FA:  MOVLW  1F
006FC:  ANDWF  01,F
006FE:  MOVF   01,W
00700:  ADDWF  4F,W
00702:  MOVWF  FE9
00704:  MOVLW  00
00706:  ADDWFC 50,W
00708:  MOVWF  FEA
0070A:  MOVFF  FEF,01
0070E:  INCF   00,F
00710:  BRA    0714
00712:  RRCF   01,F
00714:  DECFSZ 00,F
00716:  BRA    0712
00718:  MOVLW  01
0071A:  ANDWF  01,F
0071C:  RETURN 0
*
008AC:  ADDWF  FE8,W
008AE:  CLRF   FF7
008B0:  RLCF   FF7,F
008B2:  ADDLW  CD
008B4:  MOVWF  FF6
008B6:  MOVLW  08
008B8:  ADDWFC FF7,F
008BA:  MOVLW  00
008BC:  MOVWF  FF8
008BE:  MOVWF  FFB
008C0:  TBLRD*-
008C2:  MOVF   FF5,W
008C4:  MOVWF  FFA
008C6:  TBLRD*
008C8:  MOVF   FF5,W
008CA:  MOVWF  FF9
008CC:  DATA 3E,07
008CE:  DATA 7A,07
008D0:  DATA E0,07
008D2:  DATA 46,08
*
00B4E:  MOVF   4E,W
00B50:  CLRF   01
00B52:  SUBWF  4D,W
00B54:  BC    0B5C
00B56:  MOVFF  4D,00
00B5A:  BRA    0B74
00B5C:  CLRF   00
00B5E:  MOVLW  08
00B60:  MOVWF  4F
00B62:  RLCF   4D,F
00B64:  RLCF   00,F
00B66:  MOVF   4E,W
00B68:  SUBWF  00,W
00B6A:  BTFSC  FD8.0
00B6C:  MOVWF  00
00B6E:  RLCF   01,F
00B70:  DECFSZ 4F,F
00B72:  BRA    0B62
00B74:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
0010C:  CLRF   FEA
0010E:  MOVLW  4F
00110:  MOVWF  FE9
00112:  MOVF   FEF,W
00114:  BZ    0130
00116:  MOVLW  06
00118:  MOVWF  01
0011A:  CLRF   00
0011C:  DECFSZ 00,F
0011E:  BRA    011C
00120:  DECFSZ 01,F
00122:  BRA    011A
00124:  MOVLW  7B
00126:  MOVWF  00
00128:  DECFSZ 00,F
0012A:  BRA    0128
0012C:  DECFSZ FEF,F
0012E:  BRA    0116
00130:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
0018C:  MOVF   F66,W
0018E:  MOVFF  22,F66
00192:  RRCF   F64,W
00194:  BNC   0192
00196:  MOVF   F66,W
00198:  MOVFF  21,F66
0019C:  RRCF   F64,W
0019E:  BNC   019C
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
001A0:  MOVF   F66,W
001A2:  MOVFF  20,F66
001A6:  RRCF   F64,W
001A8:  BNC   01A6
001AA:  MOVF   F66,W
001AC:  MOVFF  1F,F66
001B0:  RRCF   F64,W
001B2:  BNC   01B0
....................      output_high(LED32_RCK); output_low(LED32_RCK);
001B4:  BCF    F95.5
001B6:  BSF    F8C.5
001B8:  BCF    F95.5
001BA:  BCF    F8C.5
....................      return OK;
001BC:  MOVLW  00
001BE:  MOVWF  01
001C0:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
001C2:  MOVF   F66,W
001C4:  MOVFF  27,F66
001C8:  RRCF   F64,W
001CA:  BNC   01C8
001CC:  MOVF   F66,W
001CE:  MOVFF  28,F66
001D2:  RRCF   F64,W
001D4:  BNC   01D2
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
001D6:  MOVF   F66,W
001D8:  MOVFF  29,F66
001DC:  RRCF   F64,W
001DE:  BNC   01DC
001E0:  MOVF   F66,W
001E2:  MOVFF  2A,F66
001E6:  RRCF   F64,W
001E8:  BNC   01E6
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
001EA:  MOVF   F66,W
001EC:  MOVFF  23,F66
001F0:  RRCF   F64,W
001F2:  BNC   01F0
001F4:  MOVF   F66,W
001F6:  MOVFF  24,F66
001FA:  RRCF   F64,W
001FC:  BNC   01FA
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
001FE:  MOVF   F66,W
00200:  MOVFF  25,F66
00204:  RRCF   F64,W
00206:  BNC   0204
00208:  MOVF   F66,W
0020A:  MOVFF  26,F66
0020E:  RRCF   F64,W
00210:  BNC   020E
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
00212:  BCF    F95.7
00214:  BSF    F8C.7
00216:  BCF    F95.7
00218:  BCF    F8C.7
....................       delay_ms(8);
0021A:  MOVLW  08
0021C:  MOVWF  4F
0021E:  RCALL  010C
....................       return OK;
00220:  MOVLW  00
00222:  MOVWF  01
00224:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
00226:  CLRF   4C
00228:  MOVF   4C,W
0022A:  SUBLW  07
0022C:  BNC   0280
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
0022E:  CLRF   03
00230:  MOVF   4C,W
00232:  ADDLW  2B
00234:  MOVWF  FE9
00236:  MOVLW  00
00238:  ADDWFC 03,W
0023A:  MOVWF  FEA
0023C:  MOVFF  FEF,F8D
00240:  CLRF   F96
00242:  MOVLW  80
00244:  MOVWF  4D
00246:  MOVF   4C,W
00248:  MOVWF  01
0024A:  BZ    0254
0024C:  BCF    FD8.0
0024E:  RRCF   4D,F
00250:  DECFSZ 01,F
00252:  BRA    024C
00254:  MOVF   F66,W
00256:  MOVFF  4D,F66
0025A:  RRCF   F64,W
0025C:  BNC   025A
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0025E:  BCF    F92.5
00260:  BSF    F89.5
00262:  BCF    F92.5
00264:  BCF    F89.5
....................             delay_ms(1);
00266:  MOVLW  01
00268:  MOVWF  4F
0026A:  RCALL  010C
....................             spi_write2(0);
0026C:  MOVF   F66,W
0026E:  CLRF   F66
00270:  RRCF   F64,W
00272:  BNC   0270
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
00274:  BCF    F92.5
00276:  BSF    F89.5
00278:  BCF    F92.5
0027A:  BCF    F89.5
0027C:  INCF   4C,F
0027E:  BRA    0228
....................       }
....................       return OK;
00280:  MOVLW  00
00282:  MOVWF  01
00284:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
*
00392:  CLRF   4C
00394:  MOVF   4C,W
00396:  SUBLW  03
00398:  BNC   0432
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
0039A:  CLRF   03
0039C:  MOVF   4C,W
0039E:  RCALL  00E2
003A0:  ANDLW  80
003A2:  BZ    03A8
003A4:  BSF    F93.7
003A6:  BRA    03AC
....................         else             output_low(pin_b7);
003A8:  BCF    F93.7
003AA:  BCF    F8A.7
....................         if(mq[cot]&0x40) output_float(pin_b6);
003AC:  CLRF   03
003AE:  MOVF   4C,W
003B0:  RCALL  00E2
003B2:  ANDLW  40
003B4:  BZ    03BA
003B6:  BSF    F93.6
003B8:  BRA    03BE
....................         else             output_low(pin_b6);
003BA:  BCF    F93.6
003BC:  BCF    F8A.6
....................         if(mq[cot]&0x20) output_float(pin_b5);
003BE:  CLRF   03
003C0:  MOVF   4C,W
003C2:  RCALL  00E2
003C4:  ANDLW  20
003C6:  BZ    03CC
003C8:  BSF    F93.5
003CA:  BRA    03D0
....................         else             output_low(pin_b5);
003CC:  BCF    F93.5
003CE:  BCF    F8A.5
....................         if(mq[cot]&0x10) output_float(pin_b4);
003D0:  CLRF   03
003D2:  MOVF   4C,W
003D4:  RCALL  00E2
003D6:  ANDLW  10
003D8:  BZ    03DE
003DA:  BSF    F93.4
003DC:  BRA    03E2
....................         else             output_low(pin_b4);
003DE:  BCF    F93.4
003E0:  BCF    F8A.4
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
003E2:  BSF    F93.0
003E4:  BTFSC  F81.0
003E6:  BRA    03F4
003E8:  MOVF   4C,W
003EA:  MULLW  04
003EC:  MOVFF  FF3,01
003F0:  BRA    0436
003F2:  BRA    042E
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
003F4:  BSF    F93.1
003F6:  BTFSC  F81.1
003F8:  BRA    0408
003FA:  MOVF   4C,W
003FC:  MULLW  04
003FE:  MOVF   FF3,W
00400:  ADDLW  01
00402:  MOVWF  01
00404:  BRA    0436
00406:  BRA    042E
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
00408:  BSF    F93.2
0040A:  BTFSC  F81.2
0040C:  BRA    041C
0040E:  MOVF   4C,W
00410:  MULLW  04
00412:  MOVF   FF3,W
00414:  ADDLW  02
00416:  MOVWF  01
00418:  BRA    0436
0041A:  BRA    042E
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
0041C:  BSF    F93.3
0041E:  BTFSC  F81.3
00420:  BRA    042E
00422:  MOVF   4C,W
00424:  MULLW  04
00426:  MOVF   FF3,W
00428:  ADDLW  03
0042A:  MOVWF  01
0042C:  BRA    0436
0042E:  INCF   4C,F
00430:  BRA    0394
....................     }
....................     return 0xff;
00432:  MOVLW  FF
00434:  MOVWF  01
00436:  GOTO   05AE (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
....................     output_lcd(lcd_ins_hthi);
....................     return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
*
00286:  BCF    F97.7
00288:  BCF    F8E.7
0028A:  MOVLW  00
0028C:  MOVWF  01
0028E:  GOTO   02CE (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
00292:  BCF    F97.6
00294:  BCF    F8E.6
00296:  MOVLW  00
00298:  MOVWF  01
0029A:  GOTO   02D0 (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
0029E:  BRA    0132
....................       set_tris_a(0xdf);
002A0:  MOVLW  DF
002A2:  MOVWF  F92
....................       set_tris_d(0x04);
002A4:  MOVLW  04
002A6:  MOVWF  F95
....................       set_tris_e(0);
002A8:  MOVLW  00
002AA:  MOVWF  F96
....................       set_tris_f(0);
002AC:  MOVWF  F97
....................       set_tris_g(0);
002AE:  MOVWF  F98
....................       set_tris_c(0xff);
002B0:  MOVLW  FF
002B2:  MOVWF  F94
....................       port_b_pullups(0xFF);
002B4:  BCF    FF1.7
....................       output_g(0);
002B6:  CLRF   F98
002B8:  CLRF   F8F
....................       output_high(pin_g0);
002BA:  BCF    F98.0
002BC:  BSF    F8F.0
....................       led32.ledx32=0;
002BE:  CLRF   22
002C0:  CLRF   21
002C2:  CLRF   20
002C4:  CLRF   1F
....................       led32_display();
002C6:  RCALL  018C
....................       d7seg_display();
002C8:  RCALL  01C2
....................       s7seg_display();
002CA:  RCALL  0226
....................       buzzer_off(); 
002CC:  BRA    0286
....................       triac_2_off();
002CE:  BRA    0292
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
002D0:  MOVLW  BD
002D2:  MOVWF  FB1
....................       return OK;
002D4:  MOVLW  00
002D6:  MOVWF  01
002D8:  GOTO   0BE0 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
00132:  BSF    4C.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
00134:  CLRF   4D
00136:  MOVF   4D,W
00138:  SUBLW  09
0013A:  BNC   0164
....................       {     output_bit(pin_d0,tt);
0013C:  BTFSC  4C.0
0013E:  BRA    0144
00140:  BCF    F8C.0
00142:  BRA    0146
00144:  BSF    F8C.0
00146:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
00148:  BSF    F95.1
0014A:  MOVLW  00
0014C:  BTFSC  F83.1
0014E:  MOVLW  01
00150:  MOVWF  4F
00152:  MOVLW  00
00154:  BTFSC  4C.0
00156:  MOVLW  01
00158:  SUBWF  4F,W
0015A:  BTFSS  FD8.2
0015C:  BRA    0164
....................             tt=!tt;
0015E:  BTG    4C.0
00160:  INCF   4D,F
00162:  BRA    0136
....................       }
....................       if(n<10) while(true)
00164:  MOVF   4D,W
00166:  SUBLW  09
00168:  BNC   0184
....................       {    output_d(0xff);
0016A:  CLRF   F95
0016C:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
0016E:  CLRF   F93
00170:  SETF   F8A
00172:  MOVLW  0A
00174:  MOVWF  4F
00176:  RCALL  010C
....................            output_b(0); delay_ms(10);
00178:  CLRF   F93
0017A:  CLRF   F8A
0017C:  MOVLW  0A
0017E:  MOVWF  4F
00180:  RCALL  010C
00182:  BRA    016A
....................       }
....................       return OK;
00184:  MOVLW  00
00186:  MOVWF  01
00188:  GOTO   02A0 (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
004C8:  MOVF   FB2,W
004CA:  MOVFF  FB3,03
004CE:  ADDWF  1B,F
004D0:  MOVF   FB3,W
004D2:  ADDWFC 1C,F
004D4:  MOVLW  00
004D6:  ADDWFC 1D,F
004D8:  ADDWFC 1E,F
004DA:  CLRF   FB3
004DC:  MOVLW  02
004DE:  MOVWF  FB2
004E0:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
004E2:  BTFSS  FA1.1
004E4:  BRA    04EE
004E6:  MOVLW  01
004E8:  ADDWF  1D,F
004EA:  MOVLW  00
004EC:  ADDWFC 1E,F
004EE:  BCF    FA1.1
....................       return delay.timeline/625;
004F0:  BCF    FD8.1
004F2:  MOVFF  1E,55
004F6:  MOVFF  1D,54
004FA:  MOVFF  1C,53
004FE:  MOVFF  1B,52
00502:  CLRF   59
00504:  CLRF   58
00506:  MOVLW  02
00508:  MOVWF  57
0050A:  MOVLW  71
0050C:  MOVWF  56
0050E:  RCALL  043A
00510:  MOVFF  01,02
00514:  MOVFF  00,01
00518:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
0051A:  MOVF   FB2,W
0051C:  MOVFF  FB3,03
00520:  ADDWF  1B,F
00522:  MOVF   FB3,W
00524:  ADDWFC 1C,F
00526:  MOVLW  00
00528:  ADDWFC 1D,F
0052A:  ADDWFC 1E,F
0052C:  CLRF   FB3
0052E:  MOVLW  02
00530:  MOVWF  FB2
00532:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
00534:  BTFSS  FA1.1
00536:  BRA    0540
00538:  MOVLW  01
0053A:  ADDWF  1D,F
0053C:  MOVLW  00
0053E:  ADDWFC 1E,F
00540:  BCF    FA1.1
....................       tam = delay.timeline/625;
00542:  BCF    FD8.1
00544:  MOVFF  1E,55
00548:  MOVFF  1D,54
0054C:  MOVFF  1C,53
00550:  MOVFF  1B,52
00554:  CLRF   59
00556:  CLRF   58
00558:  MOVLW  02
0055A:  MOVWF  57
0055C:  MOVLW  71
0055E:  MOVWF  56
00560:  RCALL  043A
00562:  MOVFF  01,51
00566:  MOVFF  00,50
....................       if(t<=tam) return tam-t;
0056A:  MOVF   4F,W
0056C:  SUBWF  51,W
0056E:  BNC   058E
00570:  BNZ   0578
00572:  MOVF   4E,W
00574:  SUBWF  50,W
00576:  BNC   058E
00578:  MOVF   4E,W
0057A:  SUBWF  50,W
0057C:  MOVWF  00
0057E:  MOVF   4F,W
00580:  SUBWFB 51,W
00582:  MOVWF  03
00584:  MOVFF  00,01
00588:  MOVWF  02
0058A:  BRA    05AA
0058C:  BRA    05AA
....................       else       return 0xffff-t + tam;
0058E:  MOVLW  FF
00590:  BSF    FD8.0
00592:  SUBFWB 4E,W
00594:  MOVWF  52
00596:  MOVLW  FF
00598:  SUBFWB 4F,W
0059A:  MOVWF  53
0059C:  MOVF   50,W
0059E:  ADDWF  52,W
005A0:  MOVWF  01
005A2:  MOVF   51,W
005A4:  ADDWFC 53,W
005A6:  MOVWF  03
005A8:  MOVWF  02
005AA:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
*
0071E:  MOVFF  4C,4E
00722:  MOVLW  01
00724:  MOVWF  4F
00726:  MOVLW  0F
00728:  MOVWF  51
0072A:  MOVLW  92
0072C:  MOVWF  50
0072E:  RCALL  06AE
....................       switch (step)
00730:  MOVF   37,W
00732:  ADDLW  FC
00734:  BTFSC  FD8.0
00736:  BRA    08A6
00738:  ADDLW  04
0073A:  GOTO   08AC
....................       {
....................           case 0:
....................                  if(input(pin)==0)
0073E:  MOVFF  4C,4E
00742:  MOVLW  01
00744:  MOVWF  4F
00746:  MOVLW  0F
00748:  MOVWF  51
0074A:  MOVLW  92
0074C:  MOVWF  50
0074E:  RCALL  06AE
00750:  MOVFF  4C,4E
00754:  MOVLW  0F
00756:  MOVWF  50
00758:  MOVLW  80
0075A:  MOVWF  4F
0075C:  RCALL  06EC
0075E:  BTFSC  01.0
00760:  BRA    0778
....................                   {
....................                         oldpin   = pin;
00762:  MOVFF  4D,34
00766:  MOVFF  4C,33
....................                         t        = delay_start();
0076A:  RCALL  04C8
0076C:  MOVFF  02,36
00770:  MOVFF  01,35
....................                         step     = 1;
00774:  MOVLW  01
00776:  MOVWF  37
....................                   }
....................                  break;
00778:  BRA    08A6
....................            case 1:
....................                  if(input(oldpin))step = 0;
0077A:  MOVFF  33,4E
0077E:  MOVLW  01
00780:  MOVWF  4F
00782:  MOVLW  0F
00784:  MOVWF  51
00786:  MOVLW  92
00788:  MOVWF  50
0078A:  RCALL  06AE
0078C:  MOVFF  33,4E
00790:  MOVLW  0F
00792:  MOVWF  50
00794:  MOVLW  80
00796:  MOVWF  4F
00798:  RCALL  06EC
0079A:  BTFSS  01.0
0079C:  BRA    07A2
0079E:  CLRF   37
007A0:  BRA    07DE
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
007A2:  MOVF   33,W
007A4:  SUBWF  4C,W
007A6:  BNZ   07DE
007A8:  MOVF   34,W
007AA:  SUBWF  4D,W
007AC:  BNZ   07DE
007AE:  MOVFF  36,4F
007B2:  MOVFF  35,4E
007B6:  RCALL  051A
007B8:  MOVFF  02,4F
007BC:  MOVFF  01,4E
007C0:  MOVF   4F,F
007C2:  BNZ   07CA
007C4:  MOVF   4E,W
007C6:  SUBLW  1D
007C8:  BC    07DE
....................                    {
....................                       t    = delay_start();
007CA:  RCALL  04C8
007CC:  MOVFF  02,36
007D0:  MOVFF  01,35
....................                       step = 2;
007D4:  MOVLW  02
007D6:  MOVWF  37
....................                       return OK;
007D8:  MOVLW  00
007DA:  MOVWF  01
007DC:  BRA    08AA
....................                    }
....................                  break;
007DE:  BRA    08A6
....................             case 2:
....................                  if(input(oldpin))step = 0;
007E0:  MOVFF  33,4E
007E4:  MOVLW  01
007E6:  MOVWF  4F
007E8:  MOVLW  0F
007EA:  MOVWF  51
007EC:  MOVLW  92
007EE:  MOVWF  50
007F0:  RCALL  06AE
007F2:  MOVFF  33,4E
007F6:  MOVLW  0F
007F8:  MOVWF  50
007FA:  MOVLW  80
007FC:  MOVWF  4F
007FE:  RCALL  06EC
00800:  BTFSS  01.0
00802:  BRA    0808
00804:  CLRF   37
00806:  BRA    0844
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
00808:  MOVF   33,W
0080A:  SUBWF  4C,W
0080C:  BNZ   0844
0080E:  MOVF   34,W
00810:  SUBWF  4D,W
00812:  BNZ   0844
00814:  MOVFF  36,4F
00818:  MOVFF  35,4E
0081C:  RCALL  051A
0081E:  MOVFF  02,4F
00822:  MOVFF  01,4E
00826:  MOVF   02,W
00828:  SUBLW  00
0082A:  BC    0844
0082C:  XORLW  FF
0082E:  BNZ   0836
00830:  MOVF   4E,W
00832:  SUBLW  F3
00834:  BC    0844
....................                    {
....................                        t        = delay_start();
00836:  RCALL  04C8
00838:  MOVFF  02,36
0083C:  MOVFF  01,35
....................                        step     = 3;
00840:  MOVLW  03
00842:  MOVWF  37
....................                    } 
....................                  break;
00844:  BRA    08A6
....................             case 3:
....................                    if(input(oldpin))step = 0; 
00846:  MOVFF  33,4E
0084A:  MOVLW  01
0084C:  MOVWF  4F
0084E:  MOVLW  0F
00850:  MOVWF  51
00852:  MOVLW  92
00854:  MOVWF  50
00856:  RCALL  06AE
00858:  MOVFF  33,4E
0085C:  MOVLW  0F
0085E:  MOVWF  50
00860:  MOVLW  80
00862:  MOVWF  4F
00864:  RCALL  06EC
00866:  BTFSS  01.0
00868:  BRA    086E
0086A:  CLRF   37
0086C:  BRA    08A6
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
0086E:  MOVF   33,W
00870:  SUBWF  4C,W
00872:  BNZ   08A6
00874:  MOVF   34,W
00876:  SUBWF  4D,W
00878:  BNZ   08A6
0087A:  MOVFF  36,4F
0087E:  MOVFF  35,4E
00882:  RCALL  051A
00884:  MOVFF  02,4F
00888:  MOVFF  01,4E
0088C:  MOVF   4F,F
0088E:  BNZ   0896
00890:  MOVF   4E,W
00892:  SUBLW  63
00894:  BC    08A6
....................                        {
....................                           t  = delay_start();
00896:  RCALL  04C8
00898:  MOVFF  02,36
0089C:  MOVFF  01,35
....................                           return OK;
008A0:  MOVLW  00
008A2:  MOVWF  01
008A4:  BRA    08AA
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
008A6:  MOVLW  02
008A8:  MOVWF  01
008AA:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_key4x4.c>
.................... #ifndef  __TV_KEY4x4_C__
.................... #define  __TV_KEY4x4_C__
.................... #include<tv_key4x4.h>
.................... #ifndef  __TV_KEY4x4_H__
.................... #define  __TV_KEY4x4_H__
.................... typedef struct
.................... {
....................       unsigned int8 key;
.................... }KEY4x4_STRUCT;
.................... KEY4x4_STRUCT  key4x4;
.................... result key4x4_read(void);
.................... #endif
.................... 
.................... result key4x4_read()
.................... {      
....................          static unsigned int8  step=0;
....................          static unsigned int16 t;
....................          key4x4.key = KEYREAD();
*
005AC:  BRA    0392
005AE:  MOVFF  01,38
....................          switch (step)
005B2:  MOVF   39,W
005B4:  ADDLW  FC
005B6:  BTFSC  FD8.0
005B8:  BRA    067E
005BA:  ADDLW  04
005BC:  GOTO   0686
....................          {
....................              case 0:
....................                    if( key4x4.key!=0xff)
005C0:  INCFSZ 38,W
005C2:  BRA    05C6
005C4:  BRA    05D4
....................                       {     t   = delay_start();
005C6:  RCALL  04C8
005C8:  MOVFF  02,3B
005CC:  MOVFF  01,3A
....................                             step=1;
005D0:  MOVLW  01
005D2:  MOVWF  39
....................                       } 
....................                     break;
005D4:  BRA    067E
....................               case 1:
....................                     if(key4x4.key==0xff)step =0;
005D6:  INCFSZ 38,W
005D8:  BRA    05DE
005DA:  CLRF   39
005DC:  BRA    060E
....................                     else if(delay_stop(t)>=30)
005DE:  MOVFF  3B,4F
005E2:  MOVFF  3A,4E
005E6:  RCALL  051A
005E8:  MOVFF  02,4D
005EC:  MOVFF  01,4C
005F0:  MOVF   4D,F
005F2:  BNZ   05FA
005F4:  MOVF   4C,W
005F6:  SUBLW  1D
005F8:  BC    060E
....................                     {   step = 2;
005FA:  MOVLW  02
005FC:  MOVWF  39
....................                         t    = delay_start(); 
005FE:  RCALL  04C8
00600:  MOVFF  02,3B
00604:  MOVFF  01,3A
....................                         return OK;
00608:  MOVLW  00
0060A:  MOVWF  01
0060C:  BRA    0682
....................                     }
....................                     break; 
0060E:  BRA    067E
....................               case 2:
....................                     if(key4x4.key==0xff)step =0;
00610:  INCFSZ 38,W
00612:  BRA    0618
00614:  CLRF   39
00616:  BRA    0648
....................                     else if(delay_stop(t)>=500)
00618:  MOVFF  3B,4F
0061C:  MOVFF  3A,4E
00620:  RCALL  051A
00622:  MOVFF  02,4D
00626:  MOVFF  01,4C
0062A:  MOVF   02,W
0062C:  SUBLW  00
0062E:  BC    0648
00630:  XORLW  FF
00632:  BNZ   063A
00634:  MOVF   4C,W
00636:  SUBLW  F3
00638:  BC    0648
....................                        {
....................                            t    = delay_start(); 
0063A:  RCALL  04C8
0063C:  MOVFF  02,3B
00640:  MOVFF  01,3A
....................                            step = 3;
00644:  MOVLW  03
00646:  MOVWF  39
....................                        } 
....................                     break;
00648:  BRA    067E
....................               case 3:
....................                     if(key4x4.key==0xff)step =0;
0064A:  INCFSZ 38,W
0064C:  BRA    0652
0064E:  CLRF   39
00650:  BRA    067E
....................                     else if(delay_stop(t)>=100)
00652:  MOVFF  3B,4F
00656:  MOVFF  3A,4E
0065A:  RCALL  051A
0065C:  MOVFF  02,4D
00660:  MOVFF  01,4C
00664:  MOVF   4D,F
00666:  BNZ   066E
00668:  MOVF   4C,W
0066A:  SUBLW  63
0066C:  BC    067E
....................                       {
....................                          t    = delay_start(); 
0066E:  RCALL  04C8
00670:  MOVFF  02,3B
00674:  MOVFF  01,3A
....................                          return OK;
00678:  MOVLW  00
0067A:  MOVWF  01
0067C:  BRA    0682
....................                       }
....................                      break; 
....................          }
....................          return BUSY;
0067E:  MOVLW  02
00680:  MOVWF  01
00682:  GOTO   08D6 (RETURN)
.................... }
.................... #endif
.................... 
.................... unsigned int8 cd=1,cdold=1;
.................... unsigned int8 i,T0=0, T0old=0;
.................... unsigned int16 j,k;
.................... unsigned int8 gio=0, phut=0, giay=0, bdn=0, cdo=0,m,l;
.................... void d7seg_xoa0VN(unsigned int16 d)
*
0031E:  CLRF   4E
.................... {
....................    unsigned int8 n=0;
....................    do
....................    {  d7seg.led[n]= m7d[d%10];
00320:  CLRF   03
00322:  MOVF   4E,W
00324:  ADDLW  23
00326:  MOVWF  FE9
00328:  MOVLW  00
0032A:  ADDWFC 03,W
0032C:  MOVWF  FEA
0032E:  MOVFF  4D,52
00332:  MOVFF  4C,51
00336:  CLRF   54
00338:  MOVLW  0A
0033A:  MOVWF  53
0033C:  RCALL  02DC
0033E:  MOVFF  00,51
00342:  MOVFF  03,52
00346:  MOVFF  03,03
0034A:  MOVF   00,W
0034C:  RCALL  00BE
0034E:  MOVWF  FEF
....................       d/=10;n++;
00350:  MOVFF  4D,52
00354:  MOVFF  4C,51
00358:  CLRF   54
0035A:  MOVLW  0A
0035C:  MOVWF  53
0035E:  RCALL  02DC
00360:  MOVFF  02,4D
00364:  MOVFF  01,4C
00368:  INCF   4E,F
....................    }while(d!=0);
0036A:  MOVF   4C,F
0036C:  BNZ   0320
0036E:  MOVF   4D,F
00370:  BNZ   0320
....................    for(;n<4;n++) d7seg.led[n]= 0xff;
00372:  MOVF   4E,W
00374:  SUBLW  03
00376:  BNC   038C
00378:  CLRF   03
0037A:  MOVF   4E,W
0037C:  ADDLW  23
0037E:  MOVWF  FE9
00380:  MOVLW  00
00382:  ADDWFC 03,W
00384:  MOVWF  FEA
00386:  SETF   FEF
00388:  INCF   4E,F
0038A:  BRA    0372
....................    d7seg_display();
0038C:  RCALL  01C2
0038E:  GOTO   0C26 (RETURN)
.................... }
.................... void kiemtra_xuli_nutnhan()
.................... {
....................    if(key4x4_read()==ok)
*
008D4:  BRA    05AC
008D6:  MOVF   01,F
008D8:  BNZ   091A
....................    {
....................       if(key4x4.key==1)
008DA:  DECFSZ 38,W
008DC:  BRA    08FA
....................       {
....................         led32.ledx32=0;
008DE:  CLRF   22
008E0:  CLRF   21
008E2:  CLRF   20
008E4:  CLRF   1F
....................         i=0;
008E6:  CLRF   3E
....................         j=0;
008E8:  CLRF   42
008EA:  CLRF   41
....................         if(cd==5) cd=5;
008EC:  MOVF   3C,W
008EE:  SUBLW  05
008F0:  BNZ   08F8
008F2:  MOVLW  05
008F4:  MOVWF  3C
008F6:  BRA    08FA
....................         else cd++;
008F8:  INCF   3C,F
....................       }
....................       if(key4x4.key==2) 
008FA:  MOVF   38,W
008FC:  SUBLW  02
008FE:  BNZ   091A
....................       {
....................          led32.ledx32=0;
00900:  CLRF   22
00902:  CLRF   21
00904:  CLRF   20
00906:  CLRF   1F
....................          i=0;
00908:  CLRF   3E
....................          j=0;
0090A:  CLRF   42
0090C:  CLRF   41
....................          if(cd==1) cd=1;
0090E:  DECFSZ 3C,W
00910:  BRA    0918
00912:  MOVLW  01
00914:  MOVWF  3C
00916:  BRA    091A
....................          else cd--;
00918:  DECF   3C,F
....................       }
....................    }
....................       if(inputcd(clr)==0) 
0091A:  MOVLW  7C
0091C:  MOVWF  4D
0091E:  MOVLW  0E
00920:  MOVWF  4C
00922:  RCALL  071E
00924:  MOVF   01,F
00926:  BNZ   092E
....................       {
....................          i=0;
00928:  CLRF   3E
....................          cd=1;
0092A:  MOVLW  01
0092C:  MOVWF  3C
....................       }
....................       if(inputcd(mod)==0)
0092E:  MOVLW  7C
00930:  MOVWF  4D
00932:  MOVLW  0F
00934:  MOVWF  4C
00936:  RCALL  071E
00938:  MOVF   01,F
0093A:  BNZ   0946
....................       {
....................          cdo++;
0093C:  INCF   49,F
....................          if(cdo>=4) cdo=0;
0093E:  MOVF   49,W
00940:  SUBLW  03
00942:  BC    0946
00944:  CLRF   49
....................       }
....................       if(inputcd(up)==0)
00946:  MOVLW  7C
00948:  MOVWF  4D
0094A:  MOVLW  0C
0094C:  MOVWF  4C
0094E:  RCALL  071E
00950:  MOVF   01,F
00952:  BNZ   096E
....................       {
....................          if(cdo==1) giay++;
00954:  DECFSZ 49,W
00956:  BRA    095C
00958:  INCF   47,F
0095A:  BRA    096E
....................          else if(cdo==2) phut++;
0095C:  MOVF   49,W
0095E:  SUBLW  02
00960:  BNZ   0966
00962:  INCF   46,F
00964:  BRA    096E
....................          else if(cdo==3) gio++;   
00966:  MOVF   49,W
00968:  SUBLW  03
0096A:  BNZ   096E
0096C:  INCF   45,F
....................       }
....................       if(inputcd(dw)==0)
0096E:  MOVLW  7C
00970:  MOVWF  4D
00972:  MOVLW  0D
00974:  MOVWF  4C
00976:  RCALL  071E
00978:  MOVF   01,F
0097A:  BNZ   0996
....................       {  
....................          if(cdo==1) giay--;
0097C:  DECFSZ 49,W
0097E:  BRA    0984
00980:  DECF   47,F
00982:  BRA    0996
....................          else if(cdo==2) phut--;
00984:  MOVF   49,W
00986:  SUBLW  02
00988:  BNZ   098E
0098A:  DECF   46,F
0098C:  BRA    0996
....................          else if(cdo==3) gio--;
0098E:  MOVF   49,W
00990:  SUBLW  03
00992:  BNZ   0996
00994:  DECF   45,F
....................       }
00996:  RETURN 0
.................... }
.................... /*********************************DIEU KHIEN 32 LED*****************************/
.................... void chop_tat_led()
.................... {
....................    led32.ledx32=~led32.ledx32;
00998:  COMF   1F,F
0099A:  COMF   20,F
0099C:  COMF   21,F
0099E:  COMF   22,F
....................    led32_display();
009A0:  CALL   018C
....................    for(j=0;j<=20;j++) 
009A4:  CLRF   42
009A6:  CLRF   41
009A8:  MOVF   42,F
009AA:  BNZ   09BE
009AC:  MOVF   41,W
009AE:  SUBLW  14
009B0:  BNC   09BE
....................    {
....................       kiemtra_xuli_nutnhan();
009B2:  RCALL  08D4
....................       s7seg_display();
009B4:  RCALL  0226
009B6:  INCF   41,F
009B8:  BTFSC  FD8.2
009BA:  INCF   42,F
009BC:  BRA    09A8
....................    }
009BE:  GOTO   0C2C (RETURN)
.................... }
.................... void sang_tat_dan_pst()
.................... {
....................    if(i<=64)
009C2:  MOVF   3E,W
009C4:  SUBLW  40
009C6:  BNC   0A1C
....................    {
....................       if(i<32)  led32.ledx32=(led32.ledx32<<1)|1;
009C8:  MOVF   3E,W
009CA:  SUBLW  1F
009CC:  BNC   09F2
009CE:  BCF    FD8.0
009D0:  RLCF   1F,W
009D2:  MOVWF  4D
009D4:  RLCF   20,W
009D6:  MOVWF  4E
009D8:  RLCF   21,W
009DA:  MOVWF  4F
009DC:  RLCF   22,W
009DE:  MOVWF  50
009E0:  MOVF   4D,W
009E2:  IORLW  01
009E4:  MOVWF  1F
009E6:  MOVFF  4E,20
009EA:  MOVFF  4F,21
009EE:  MOVFF  50,22
....................       if(i>=32) led32.ledx32=led32.ledx32<<1;
009F2:  MOVF   3E,W
009F4:  SUBLW  1F
009F6:  BC    0A02
009F8:  BCF    FD8.0
009FA:  RLCF   1F,F
009FC:  RLCF   20,F
009FE:  RLCF   21,F
00A00:  RLCF   22,F
....................       led32_display();
00A02:  CALL   018C
....................       s7seg_display();
00A06:  RCALL  0226
....................       i++;
00A08:  INCF   3E,F
....................       for(l=0;l<=20;l++) 
00A0A:  CLRF   4B
00A0C:  MOVF   4B,W
00A0E:  SUBLW  14
00A10:  BNC   0A1A
....................       {
....................          kiemtra_xuli_nutnhan();
00A12:  RCALL  08D4
....................          s7seg_display();
00A14:  RCALL  0226
00A16:  INCF   4B,F
00A18:  BRA    0A0C
....................       }
....................    }
00A1A:  BRA    0A1E
....................    else
....................       i=0;
00A1C:  CLRF   3E
00A1E:  GOTO   0C42 (RETURN)
.................... }
.................... void sang_tat_dan_tsp()
.................... {
....................    if(i<=64)
00A22:  MOVF   3E,W
00A24:  SUBLW  40
00A26:  BNC   0A7C
....................       {
....................          if(i<32)  led32.ledx32=(led32.ledx32>>1)|0x80000000;
00A28:  MOVF   3E,W
00A2A:  SUBLW  1F
00A2C:  BNC   0A4E
00A2E:  BCF    FD8.0
00A30:  RRCF   22,W
00A32:  MOVWF  50
00A34:  RRCF   21,W
00A36:  MOVWF  4F
00A38:  RRCF   20,W
00A3A:  MOVWF  4E
00A3C:  RRCF   1F,W
00A3E:  MOVWF  1F
00A40:  MOVFF  4E,20
00A44:  MOVFF  4F,21
00A48:  MOVF   50,W
00A4A:  IORLW  80
00A4C:  MOVWF  22
....................          if(i>=32) led32.ledx32=led32.ledx32>>1;
00A4E:  MOVF   3E,W
00A50:  SUBLW  1F
00A52:  BC    0A5E
00A54:  BCF    FD8.0
00A56:  RRCF   22,F
00A58:  RRCF   21,F
00A5A:  RRCF   20,F
00A5C:  RRCF   1F,F
....................          led32_display();
00A5E:  CALL   018C
....................          s7seg_display();
00A62:  CALL   0226
....................          i++;
00A66:  INCF   3E,F
....................          for(l=0;l<=20;l++)
00A68:  CLRF   4B
00A6A:  MOVF   4B,W
00A6C:  SUBLW  14
00A6E:  BNC   0A7A
....................          {
....................             kiemtra_xuli_nutnhan();
00A70:  RCALL  08D4
....................             s7seg_display();
00A72:  CALL   0226
00A76:  INCF   4B,F
00A78:  BRA    0A6A
....................          }
....................       }
00A7A:  BRA    0A7E
....................       else
....................          i=0;
00A7C:  CLRF   3E
00A7E:  GOTO   0C58 (RETURN)
.................... }
.................... void sang_tat_dan_ngoai_vao()
.................... {
....................    if(i<=32)
00A82:  MOVF   3E,W
00A84:  SUBLW  20
00A86:  BNC   0AE2
....................    {
....................       if(i<16) 
00A88:  MOVF   3E,W
00A8A:  SUBLW  0F
00A8C:  BNC   0AB2
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1)|0x8000;
00A8E:  BCF    FD8.0
00A90:  RRCF   22,W
00A92:  MOVWF  4D
00A94:  RRCF   21,W
00A96:  MOVWF  21
00A98:  MOVF   4D,W
00A9A:  IORLW  80
00A9C:  MOVWF  22
....................          led32.ledx16[0]=(led32.ledx16[0]<<1)|0x0001;
00A9E:  BCF    FD8.0
00AA0:  RLCF   1F,W
00AA2:  MOVWF  4C
00AA4:  RLCF   20,W
00AA6:  MOVWF  4D
00AA8:  MOVF   4C,W
00AAA:  IORLW  01
00AAC:  MOVWF  1F
00AAE:  MOVFF  4D,20
....................       }
....................       if(i>=16) 
00AB2:  MOVF   3E,W
00AB4:  SUBLW  0F
00AB6:  BC    0AC4
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1);
00AB8:  BCF    FD8.0
00ABA:  RRCF   22,F
00ABC:  RRCF   21,F
....................          led32.ledx16[0]=(led32.ledx16[0]<<1);
00ABE:  BCF    FD8.0
00AC0:  RLCF   1F,F
00AC2:  RLCF   20,F
....................       }
....................       led32_display();
00AC4:  CALL   018C
....................       s7seg_display();
00AC8:  CALL   0226
....................       for(l=0;l<=20;l++) 
00ACC:  CLRF   4B
00ACE:  MOVF   4B,W
00AD0:  SUBLW  14
00AD2:  BNC   0ADE
....................       {
....................          kiemtra_xuli_nutnhan();
00AD4:  RCALL  08D4
....................          s7seg_display();
00AD6:  CALL   0226
00ADA:  INCF   4B,F
00ADC:  BRA    0ACE
....................       }
....................       i++;
00ADE:  INCF   3E,F
....................    }
00AE0:  BRA    0AE4
....................    else i=0;
00AE2:  CLRF   3E
00AE4:  GOTO   0C6E (RETURN)
.................... }
.................... void sang_tat_dan_trong_ra()
.................... {
....................    if(i<=32)
00AE8:  MOVF   3E,W
00AEA:  SUBLW  20
00AEC:  BNC   0B48
....................    {
....................       if(i<16) 
00AEE:  MOVF   3E,W
00AF0:  SUBLW  0F
00AF2:  BNC   0B18
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1)|0x0001;
00AF4:  BCF    FD8.0
00AF6:  RLCF   21,W
00AF8:  MOVWF  4C
00AFA:  RLCF   22,W
00AFC:  MOVWF  4D
00AFE:  MOVF   4C,W
00B00:  IORLW  01
00B02:  MOVWF  21
00B04:  MOVFF  4D,22
....................          led32.ledx16[0]=(led32.ledx16[0]>>1)|0x8000;
00B08:  BCF    FD8.0
00B0A:  RRCF   20,W
00B0C:  MOVWF  4D
00B0E:  RRCF   1F,W
00B10:  MOVWF  1F
00B12:  MOVF   4D,W
00B14:  IORLW  80
00B16:  MOVWF  20
....................       }
....................       if(i>=16) 
00B18:  MOVF   3E,W
00B1A:  SUBLW  0F
00B1C:  BC    0B2A
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1);
00B1E:  BCF    FD8.0
00B20:  RLCF   21,F
00B22:  RLCF   22,F
....................          led32.ledx16[0]=(led32.ledx16[0]>>1);
00B24:  BCF    FD8.0
00B26:  RRCF   20,F
00B28:  RRCF   1F,F
....................       }
....................       led32_display();
00B2A:  CALL   018C
....................       s7seg_display();
00B2E:  CALL   0226
....................       for(l=0;l<=20;l++) 
00B32:  CLRF   4B
00B34:  MOVF   4B,W
00B36:  SUBLW  14
00B38:  BNC   0B44
....................       {
....................          kiemtra_xuli_nutnhan();
00B3A:  RCALL  08D4
....................          s7seg_display();
00B3C:  CALL   0226
00B40:  INCF   4B,F
00B42:  BRA    0B34
....................       }
....................       i++;
00B44:  INCF   3E,F
....................    }
00B46:  BRA    0B4A
....................    else i=0;
00B48:  CLRF   3E
00B4A:  GOTO   0C84 (RETURN)
.................... }
.................... /***********************************HAM CHINH*************************************************/
.................... void main()
*
00B76:  CLRF   FF8
00B78:  BCF    FD0.7
00B7A:  BSF    07.7
00B7C:  BCF    F63.5
00B7E:  MOVLW  00
00B80:  MOVWF  F64
00B82:  MOVLW  20
00B84:  MOVWF  F63
00B86:  BCF    F95.4
00B88:  BSF    F95.5
00B8A:  BCF    F95.6
00B8C:  MOVLW  01
00B8E:  MOVWF  3C
00B90:  MOVWF  3D
00B92:  CLRF   3F
00B94:  CLRF   40
00B96:  CLRF   45
00B98:  CLRF   46
00B9A:  CLRF   47
00B9C:  CLRF   48
00B9E:  CLRF   49
00BA0:  MOVF   FC1,W
00BA2:  ANDLW  C0
00BA4:  IORLW  0F
00BA6:  MOVWF  FC1
00BA8:  MOVLW  07
00BAA:  MOVWF  FB4
00BAC:  SETF   23
00BAE:  SETF   24
00BB0:  SETF   25
00BB2:  SETF   26
00BB4:  SETF   27
00BB6:  SETF   28
00BB8:  SETF   29
00BBA:  SETF   2A
00BBC:  SETF   2B
00BBE:  SETF   2C
00BC0:  SETF   2D
00BC2:  SETF   2E
00BC4:  SETF   2F
00BC6:  SETF   30
00BC8:  SETF   31
00BCA:  SETF   32
00BCC:  SETF   33
00BCE:  SETF   34
00BD0:  CLRF   35
00BD2:  CLRF   36
00BD4:  CLRF   37
00BD6:  CLRF   39
00BD8:  CLRF   3A
00BDA:  CLRF   3B
.................... {
....................       system_init();
00BDC:  GOTO   029E
....................       setup_timer_0(t0_ext_l_to_h|t0_div_1);
00BE0:  MOVLW  A8
00BE2:  MOVWF  FD5
....................       set_timer0(98);
00BE4:  CLRF   FD7
00BE6:  MOVLW  62
00BE8:  MOVWF  FD6
00BEA:  NOP   
....................       setup_timer_1(T1_INTERNAL| T1_DIV_BY_8);
00BEC:  MOVLW  B5
00BEE:  MOVWF  FCD
....................       set_timer1(3036);
00BF0:  MOVLW  0B
00BF2:  MOVWF  FCF
00BF4:  MOVLW  DC
00BF6:  MOVWF  FCE
00BF8:  NOP   
....................       enable_interrupts(int_timer1);
00BFA:  BSF    F9D.0
....................       enable_interrupts(global);
00BFC:  MOVLW  C0
00BFE:  IORWF  FF2,F
....................       while(true)
....................       {  
....................          /****************************DEM SP HIEN THI 32 LED********************************/
....................          T0=get_timer0();
00C00:  MOVF   FD6,W
00C02:  MOVWF  3F
....................          if(T0>100) set_timer0(1);
00C04:  MOVF   3F,W
00C06:  SUBLW  64
00C08:  BC    0C12
00C0A:  CLRF   FD7
00C0C:  MOVLW  01
00C0E:  MOVWF  FD6
00C10:  NOP   
....................          if(T0!=T0old)
00C12:  MOVF   40,W
00C14:  SUBWF  3F,W
00C16:  BZ    0C26
....................          {
....................             T0old=T0;
00C18:  MOVFF  3F,40
....................             d7seg_xoa0VN(T0);
00C1C:  CLRF   4D
00C1E:  MOVFF  3F,4C
00C22:  GOTO   031E
....................          }
....................          if(cd==1)
00C26:  DECFSZ 3C,W
00C28:  BRA    0C3A
....................          {
....................             chop_tat_led();
00C2A:  BRA    0998
....................             if(T0>100) set_timer0(1);
00C2C:  MOVF   3F,W
00C2E:  SUBLW  64
00C30:  BC    0C3A
00C32:  CLRF   FD7
00C34:  MOVLW  01
00C36:  MOVWF  FD6
00C38:  NOP   
....................          }
....................          if(cd==2) 
00C3A:  MOVF   3C,W
00C3C:  SUBLW  02
00C3E:  BNZ   0C50
....................          {
....................             sang_tat_dan_pst();
00C40:  BRA    09C2
....................             if(T0>100) set_timer0(1);
00C42:  MOVF   3F,W
00C44:  SUBLW  64
00C46:  BC    0C50
00C48:  CLRF   FD7
00C4A:  MOVLW  01
00C4C:  MOVWF  FD6
00C4E:  NOP   
....................          }
....................          if(cd==3) 
00C50:  MOVF   3C,W
00C52:  SUBLW  03
00C54:  BNZ   0C66
....................          {
....................             sang_tat_dan_tsp();
00C56:  BRA    0A22
....................             if(T0>100) set_timer0(1);
00C58:  MOVF   3F,W
00C5A:  SUBLW  64
00C5C:  BC    0C66
00C5E:  CLRF   FD7
00C60:  MOVLW  01
00C62:  MOVWF  FD6
00C64:  NOP   
....................          }
....................          if(cd==4) 
00C66:  MOVF   3C,W
00C68:  SUBLW  04
00C6A:  BNZ   0C7C
....................          {
....................             sang_tat_dan_ngoai_vao();
00C6C:  BRA    0A82
....................             if(T0>100) set_timer0(1);
00C6E:  MOVF   3F,W
00C70:  SUBLW  64
00C72:  BC    0C7C
00C74:  CLRF   FD7
00C76:  MOVLW  01
00C78:  MOVWF  FD6
00C7A:  NOP   
....................          }
....................          if(cd==5) 
00C7C:  MOVF   3C,W
00C7E:  SUBLW  05
00C80:  BNZ   0C92
....................          {
....................             sang_tat_dan_trong_ra();
00C82:  BRA    0AE8
....................             if(T0>100) set_timer0(1);
00C84:  MOVF   3F,W
00C86:  SUBLW  64
00C88:  BC    0C92
00C8A:  CLRF   FD7
00C8C:  MOVLW  01
00C8E:  MOVWF  FD6
00C90:  NOP   
....................          }
....................          /*******************************DEM GIO PHUT GIAY*********************************/
....................          if(bdn>=10)
00C92:  MOVF   48,W
00C94:  SUBLW  09
00C96:  BC    0CBC
....................          {
....................             bdn=bdn-10;
00C98:  MOVLW  0A
00C9A:  SUBWF  48,F
....................             giay++;
00C9C:  INCF   47,F
....................             if(giay>=60) 
00C9E:  MOVF   47,W
00CA0:  SUBLW  3B
00CA2:  BC    0CBC
....................             {
....................                giay=0;
00CA4:  CLRF   47
....................                phut++;
00CA6:  INCF   46,F
....................                if(phut>=60)
00CA8:  MOVF   46,W
00CAA:  SUBLW  3B
00CAC:  BC    0CBC
....................                {
....................                   phut=0;
00CAE:  CLRF   46
....................                   gio++;
00CB0:  INCF   45,F
....................                   if(gio>=13) gio=1;
00CB2:  MOVF   45,W
00CB4:  SUBLW  0C
00CB6:  BC    0CBC
00CB8:  MOVLW  01
00CBA:  MOVWF  45
....................                }
....................             }
....................          }
....................       s7seg.led[0]=m7d[giay%10];
00CBC:  MOVFF  47,4D
00CC0:  MOVLW  0A
00CC2:  MOVWF  4E
00CC4:  RCALL  0B4E
00CC6:  CLRF   03
00CC8:  MOVF   00,W
00CCA:  CALL   00BE
00CCE:  MOVWF  2B
....................       s7seg.led[1]=m7d[giay/10%10];
00CD0:  MOVFF  47,4D
00CD4:  MOVLW  0A
00CD6:  MOVWF  4E
00CD8:  RCALL  0B4E
00CDA:  MOVFF  01,4D
00CDE:  MOVLW  0A
00CE0:  MOVWF  4E
00CE2:  RCALL  0B4E
00CE4:  CLRF   03
00CE6:  MOVF   00,W
00CE8:  CALL   00BE
00CEC:  MOVWF  2C
....................       s7seg.led[2]=0xff-64;
00CEE:  MOVLW  BF
00CF0:  MOVWF  2D
....................       s7seg.led[3]=m7d[phut%10];
00CF2:  MOVFF  46,4D
00CF6:  MOVLW  0A
00CF8:  MOVWF  4E
00CFA:  RCALL  0B4E
00CFC:  CLRF   03
00CFE:  MOVF   00,W
00D00:  CALL   00BE
00D04:  MOVWF  2E
....................       s7seg.led[4]=m7d[phut/10%10];
00D06:  MOVFF  46,4D
00D0A:  MOVLW  0A
00D0C:  MOVWF  4E
00D0E:  RCALL  0B4E
00D10:  MOVFF  01,4D
00D14:  MOVLW  0A
00D16:  MOVWF  4E
00D18:  RCALL  0B4E
00D1A:  CLRF   03
00D1C:  MOVF   00,W
00D1E:  CALL   00BE
00D22:  MOVWF  2F
....................       s7seg.led[5]=0xff-64;
00D24:  MOVLW  BF
00D26:  MOVWF  30
....................       s7seg.led[6]=m7d[gio%10];
00D28:  MOVFF  45,4D
00D2C:  MOVLW  0A
00D2E:  MOVWF  4E
00D30:  RCALL  0B4E
00D32:  CLRF   03
00D34:  MOVF   00,W
00D36:  CALL   00BE
00D3A:  MOVWF  31
....................       s7seg.led[7]=m7d[gio/10%10];
00D3C:  MOVFF  45,4D
00D40:  MOVLW  0A
00D42:  MOVWF  4E
00D44:  RCALL  0B4E
00D46:  MOVFF  01,4D
00D4A:  MOVLW  0A
00D4C:  MOVWF  4E
00D4E:  RCALL  0B4E
00D50:  CLRF   03
00D52:  MOVF   00,W
00D54:  CALL   00BE
00D58:  MOVWF  32
....................       if(cdo==1)
00D5A:  DECFSZ 49,W
00D5C:  BRA    0DD4
....................       {
....................          s7seg.led[0]=0xff;
00D5E:  SETF   2B
....................          s7seg.led[1]=0xff;
00D60:  SETF   2C
....................          if(m<2)
00D62:  MOVF   4A,W
00D64:  SUBLW  01
00D66:  BNC   0D80
....................          {
....................             s7seg_display();
00D68:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00D6C:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00D6E:  MOVF   3F,W
00D70:  SUBLW  64
00D72:  BC    0D7C
00D74:  CLRF   FD7
00D76:  MOVLW  01
00D78:  MOVWF  FD6
00D7A:  NOP   
....................             m++;
00D7C:  INCF   4A,F
....................          }
00D7E:  BRA    0DD2
....................          else if(m<4)
00D80:  MOVF   4A,W
00D82:  SUBLW  03
00D84:  BNC   0DD0
....................          {
....................             s7seg.led[0]=m7d[giay%10];
00D86:  MOVFF  47,4D
00D8A:  MOVLW  0A
00D8C:  MOVWF  4E
00D8E:  RCALL  0B4E
00D90:  CLRF   03
00D92:  MOVF   00,W
00D94:  CALL   00BE
00D98:  MOVWF  2B
....................             s7seg.led[1]=m7d[giay/10%10];
00D9A:  MOVFF  47,4D
00D9E:  MOVLW  0A
00DA0:  MOVWF  4E
00DA2:  RCALL  0B4E
00DA4:  MOVFF  01,4D
00DA8:  MOVLW  0A
00DAA:  MOVWF  4E
00DAC:  RCALL  0B4E
00DAE:  CLRF   03
00DB0:  MOVF   00,W
00DB2:  CALL   00BE
00DB6:  MOVWF  2C
....................             s7seg_display();
00DB8:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00DBC:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00DBE:  MOVF   3F,W
00DC0:  SUBLW  64
00DC2:  BC    0DCC
00DC4:  CLRF   FD7
00DC6:  MOVLW  01
00DC8:  MOVWF  FD6
00DCA:  NOP   
....................             m++;
00DCC:  INCF   4A,F
....................          }
00DCE:  BRA    0DD2
....................          else m=0;
00DD0:  CLRF   4A
....................       }
00DD2:  BRA    0ED0
....................       else if(cdo==2)
00DD4:  MOVF   49,W
00DD6:  SUBLW  02
00DD8:  BNZ   0E50
....................       {
....................          s7seg.led[3]=0xff;
00DDA:  SETF   2E
....................          s7seg.led[4]=0xff;
00DDC:  SETF   2F
....................          if(m<2)
00DDE:  MOVF   4A,W
00DE0:  SUBLW  01
00DE2:  BNC   0DFC
....................          {
....................             s7seg_display();
00DE4:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00DE8:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00DEA:  MOVF   3F,W
00DEC:  SUBLW  64
00DEE:  BC    0DF8
00DF0:  CLRF   FD7
00DF2:  MOVLW  01
00DF4:  MOVWF  FD6
00DF6:  NOP   
....................             m++;
00DF8:  INCF   4A,F
....................          }
00DFA:  BRA    0E4E
....................          else if(m<4)
00DFC:  MOVF   4A,W
00DFE:  SUBLW  03
00E00:  BNC   0E4C
....................          {
....................             s7seg.led[3]=m7d[phut%10];
00E02:  MOVFF  46,4D
00E06:  MOVLW  0A
00E08:  MOVWF  4E
00E0A:  RCALL  0B4E
00E0C:  CLRF   03
00E0E:  MOVF   00,W
00E10:  CALL   00BE
00E14:  MOVWF  2E
....................             s7seg.led[4]=m7d[phut/10%10];
00E16:  MOVFF  46,4D
00E1A:  MOVLW  0A
00E1C:  MOVWF  4E
00E1E:  RCALL  0B4E
00E20:  MOVFF  01,4D
00E24:  MOVLW  0A
00E26:  MOVWF  4E
00E28:  RCALL  0B4E
00E2A:  CLRF   03
00E2C:  MOVF   00,W
00E2E:  CALL   00BE
00E32:  MOVWF  2F
....................             s7seg_display();
00E34:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00E38:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00E3A:  MOVF   3F,W
00E3C:  SUBLW  64
00E3E:  BC    0E48
00E40:  CLRF   FD7
00E42:  MOVLW  01
00E44:  MOVWF  FD6
00E46:  NOP   
....................             m++;
00E48:  INCF   4A,F
....................          }
00E4A:  BRA    0E4E
....................          else m=0;
00E4C:  CLRF   4A
....................       }
00E4E:  BRA    0ED0
....................       else if(cdo==3)
00E50:  MOVF   49,W
00E52:  SUBLW  03
00E54:  BNZ   0ECC
....................       {
....................          s7seg.led[6]=0xff;
00E56:  SETF   31
....................          s7seg.led[7]=0xff;
00E58:  SETF   32
....................          if(m<2)
00E5A:  MOVF   4A,W
00E5C:  SUBLW  01
00E5E:  BNC   0E78
....................          {
....................             s7seg_display();
00E60:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00E64:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00E66:  MOVF   3F,W
00E68:  SUBLW  64
00E6A:  BC    0E74
00E6C:  CLRF   FD7
00E6E:  MOVLW  01
00E70:  MOVWF  FD6
00E72:  NOP   
....................             m++;
00E74:  INCF   4A,F
....................          }
00E76:  BRA    0ECA
....................          else if(m<4)
00E78:  MOVF   4A,W
00E7A:  SUBLW  03
00E7C:  BNC   0EC8
....................          {
....................             s7seg.led[6]=m7d[gio%10];
00E7E:  MOVFF  45,4D
00E82:  MOVLW  0A
00E84:  MOVWF  4E
00E86:  RCALL  0B4E
00E88:  CLRF   03
00E8A:  MOVF   00,W
00E8C:  CALL   00BE
00E90:  MOVWF  31
....................             s7seg.led[7]=m7d[gio/10%10];
00E92:  MOVFF  45,4D
00E96:  MOVLW  0A
00E98:  MOVWF  4E
00E9A:  RCALL  0B4E
00E9C:  MOVFF  01,4D
00EA0:  MOVLW  0A
00EA2:  MOVWF  4E
00EA4:  RCALL  0B4E
00EA6:  CLRF   03
00EA8:  MOVF   00,W
00EAA:  CALL   00BE
00EAE:  MOVWF  32
....................             s7seg_display();
00EB0:  CALL   0226
....................             kiemtra_xuli_nutnhan();
00EB4:  RCALL  08D4
....................             if(T0>100) set_timer0(1);
00EB6:  MOVF   3F,W
00EB8:  SUBLW  64
00EBA:  BC    0EC4
00EBC:  CLRF   FD7
00EBE:  MOVLW  01
00EC0:  MOVWF  FD6
00EC2:  NOP   
....................             m++;
00EC4:  INCF   4A,F
....................          }
00EC6:  BRA    0ECA
....................          else m=0;
00EC8:  CLRF   4A
....................       }
00ECA:  BRA    0ED0
....................       else
....................       s7seg_display();
00ECC:  CALL   0226
....................       if(T0>100) set_timer0(1);
00ED0:  MOVF   3F,W
00ED2:  SUBLW  64
00ED4:  BC    0EDE
00ED6:  CLRF   FD7
00ED8:  MOVLW  01
00EDA:  MOVWF  FD6
00EDC:  NOP   
00EDE:  BRA    0C00
....................       }
.................... }
.................... #int_timer1
.................... void ngat_timer1()
00EE0:  SLEEP 
.................... {
....................    set_timer1(3036);
*
000FA:  MOVLW  0B
000FC:  MOVWF  FCF
000FE:  MOVLW  DC
00100:  MOVWF  FCE
00102:  NOP   
....................    bdn++;
00104:  INCF   48,F
00106:  BCF    F9E.0
00108:  GOTO   0068
.................... }

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
