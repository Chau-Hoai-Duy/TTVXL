CCS PCH C Compiler, Version 5.101, 43599               12-Feb-23 09:19

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\CLIP2_NUT_NHAN_DON.lst

               ROM used:   2730 bytes (2%)
                           Largest free fragment is 65536
               RAM used:   41 (1%) at main() level
                           61 (2%) worst case
               Stack used: 0 locations
               Stack size: 31

*
00000:  GOTO   09FE
.................... #include<tv_boards.c>  
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
*
001DC:  MOVF   2B,W
001DE:  ANDLW  07
001E0:  MOVWF  00
001E2:  RRCF   2B,W
001E4:  MOVWF  01
001E6:  RRCF   01,F
001E8:  RRCF   01,F
001EA:  MOVLW  1F
001EC:  ANDWF  01,F
001EE:  MOVF   01,W
001F0:  ADDWF  2D,W
001F2:  MOVWF  FE9
001F4:  MOVLW  00
001F6:  ADDWFC 2E,W
001F8:  MOVWF  FEA
001FA:  CLRF   01
001FC:  INCF   01,F
001FE:  INCF   00,F
00200:  BRA    0204
00202:  RLCF   01,F
00204:  DECFSZ 00,F
00206:  BRA    0202
00208:  MOVF   2C,F
0020A:  BZ    0212
0020C:  MOVF   01,W
0020E:  IORWF  FEF,F
00210:  BRA    0218
00212:  COMF   01,F
00214:  MOVF   01,W
00216:  ANDWF  FEF,F
00218:  RETURN 0
0021A:  MOVF   2B,W
0021C:  ANDLW  07
0021E:  MOVWF  00
00220:  RRCF   2B,W
00222:  MOVWF  01
00224:  RRCF   01,F
00226:  RRCF   01,F
00228:  MOVLW  1F
0022A:  ANDWF  01,F
0022C:  MOVF   01,W
0022E:  ADDWF  2C,W
00230:  MOVWF  FE9
00232:  MOVLW  00
00234:  ADDWFC 2D,W
00236:  MOVWF  FEA
00238:  MOVFF  FEF,01
0023C:  INCF   00,F
0023E:  BRA    0242
00240:  RRCF   01,F
00242:  DECFSZ 00,F
00244:  BRA    0240
00246:  MOVLW  01
00248:  ANDWF  01,F
0024A:  RETURN 0
0024C:  BTFSC  FD8.1
0024E:  BRA    0256
00250:  CLRF   FEA
00252:  MOVLW  37
00254:  MOVWF  FE9
00256:  CLRF   00
00258:  CLRF   01
0025A:  CLRF   02
0025C:  CLRF   03
0025E:  CLRF   37
00260:  CLRF   38
00262:  CLRF   39
00264:  CLRF   3A
00266:  MOVF   36,W
00268:  IORWF  35,W
0026A:  IORWF  34,W
0026C:  IORWF  33,W
0026E:  BZ    02C8
00270:  MOVLW  20
00272:  MOVWF  3B
00274:  BCF    FD8.0
00276:  RLCF   2F,F
00278:  RLCF   30,F
0027A:  RLCF   31,F
0027C:  RLCF   32,F
0027E:  RLCF   37,F
00280:  RLCF   38,F
00282:  RLCF   39,F
00284:  RLCF   3A,F
00286:  MOVF   36,W
00288:  SUBWF  3A,W
0028A:  BNZ   029C
0028C:  MOVF   35,W
0028E:  SUBWF  39,W
00290:  BNZ   029C
00292:  MOVF   34,W
00294:  SUBWF  38,W
00296:  BNZ   029C
00298:  MOVF   33,W
0029A:  SUBWF  37,W
0029C:  BNC   02BC
0029E:  MOVF   33,W
002A0:  SUBWF  37,F
002A2:  MOVF   34,W
002A4:  BTFSS  FD8.0
002A6:  INCFSZ 34,W
002A8:  SUBWF  38,F
002AA:  MOVF   35,W
002AC:  BTFSS  FD8.0
002AE:  INCFSZ 35,W
002B0:  SUBWF  39,F
002B2:  MOVF   36,W
002B4:  BTFSS  FD8.0
002B6:  INCFSZ 36,W
002B8:  SUBWF  3A,F
002BA:  BSF    FD8.0
002BC:  RLCF   00,F
002BE:  RLCF   01,F
002C0:  RLCF   02,F
002C2:  RLCF   03,F
002C4:  DECFSZ 3B,F
002C6:  BRA    0274
002C8:  MOVFF  37,FEF
002CC:  MOVFF  38,FEC
002D0:  MOVFF  39,FEC
002D4:  MOVFF  3A,FEC
002D8:  RETURN 0
*
0054C:  ADDWF  FE8,W
0054E:  CLRF   FF7
00550:  RLCF   FF7,F
00552:  ADDLW  6D
00554:  MOVWF  FF6
00556:  MOVLW  05
00558:  ADDWFC FF7,F
0055A:  MOVLW  00
0055C:  MOVWF  FF8
0055E:  MOVWF  FFB
00560:  TBLRD*-
00562:  MOVF   FF5,W
00564:  MOVWF  FFA
00566:  TBLRD*
00568:  MOVF   FF5,W
0056A:  MOVWF  FF9
0056C:  DATA DE,03
0056E:  DATA 1A,04
00570:  DATA 80,04
00572:  DATA E6,04
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
00004:  CLRF   FEA
00006:  MOVLW  2B
00008:  MOVWF  FE9
0000A:  MOVF   FEF,W
0000C:  BTFSC  FD8.2
0000E:  GOTO   002C
00012:  MOVLW  06
00014:  MOVWF  01
00016:  CLRF   00
00018:  DECFSZ 00,F
0001A:  BRA    0018
0001C:  DECFSZ 01,F
0001E:  BRA    0016
00020:  MOVLW  7B
00022:  MOVWF  00
00024:  DECFSZ 00,F
00026:  BRA    0024
00028:  DECFSZ FEF,F
0002A:  BRA    0012
0002C:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
00088:  MOVF   F66,W
0008A:  MOVFF  0B,F66
0008E:  RRCF   F64,W
00090:  BNC   008E
00092:  MOVF   F66,W
00094:  MOVFF  0A,F66
00098:  RRCF   F64,W
0009A:  BNC   0098
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
0009C:  MOVF   F66,W
0009E:  MOVFF  09,F66
000A2:  RRCF   F64,W
000A4:  BNC   00A2
000A6:  MOVF   F66,W
000A8:  MOVFF  08,F66
000AC:  RRCF   F64,W
000AE:  BNC   00AC
....................      output_high(LED32_RCK); output_low(LED32_RCK);
000B0:  BCF    F95.5
000B2:  BSF    F8C.5
000B4:  BCF    F95.5
000B6:  BCF    F8C.5
....................      return OK;
000B8:  MOVLW  00
000BA:  MOVWF  01
000BC:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
000BE:  MOVF   F66,W
000C0:  MOVFF  10,F66
000C4:  RRCF   F64,W
000C6:  BNC   00C4
000C8:  MOVF   F66,W
000CA:  MOVFF  11,F66
000CE:  RRCF   F64,W
000D0:  BNC   00CE
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
000D2:  MOVF   F66,W
000D4:  MOVFF  12,F66
000D8:  RRCF   F64,W
000DA:  BNC   00D8
000DC:  MOVF   F66,W
000DE:  MOVFF  13,F66
000E2:  RRCF   F64,W
000E4:  BNC   00E2
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
000E6:  MOVF   F66,W
000E8:  MOVFF  0C,F66
000EC:  RRCF   F64,W
000EE:  BNC   00EC
000F0:  MOVF   F66,W
000F2:  MOVFF  0D,F66
000F6:  RRCF   F64,W
000F8:  BNC   00F6
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
000FA:  MOVF   F66,W
000FC:  MOVFF  0E,F66
00100:  RRCF   F64,W
00102:  BNC   0100
00104:  MOVF   F66,W
00106:  MOVFF  0F,F66
0010A:  RRCF   F64,W
0010C:  BNC   010A
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
0010E:  BCF    F95.7
00110:  BSF    F8C.7
00112:  BCF    F95.7
00114:  BCF    F8C.7
....................       delay_ms(8);
00116:  MOVLW  08
00118:  MOVWF  2B
0011A:  RCALL  0004
....................       return OK;
0011C:  MOVLW  00
0011E:  MOVWF  01
00120:  GOTO   01CA (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
00124:  CLRF   29
00126:  MOVF   29,W
00128:  SUBLW  07
0012A:  BNC   017E
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
0012C:  CLRF   03
0012E:  MOVF   29,W
00130:  ADDLW  14
00132:  MOVWF  FE9
00134:  MOVLW  00
00136:  ADDWFC 03,W
00138:  MOVWF  FEA
0013A:  MOVFF  FEF,F8D
0013E:  CLRF   F96
00140:  MOVLW  80
00142:  MOVWF  2A
00144:  MOVF   29,W
00146:  MOVWF  01
00148:  BZ    0152
0014A:  BCF    FD8.0
0014C:  RRCF   2A,F
0014E:  DECFSZ 01,F
00150:  BRA    014A
00152:  MOVF   F66,W
00154:  MOVFF  2A,F66
00158:  RRCF   F64,W
0015A:  BNC   0158
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0015C:  BCF    F92.5
0015E:  BSF    F89.5
00160:  BCF    F92.5
00162:  BCF    F89.5
....................             delay_ms(1);
00164:  MOVLW  01
00166:  MOVWF  2B
00168:  RCALL  0004
....................             spi_write2(0);
0016A:  MOVF   F66,W
0016C:  CLRF   F66
0016E:  RRCF   F64,W
00170:  BNC   016E
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
00172:  BCF    F92.5
00174:  BSF    F89.5
00176:  BCF    F92.5
00178:  BCF    F89.5
0017A:  INCF   29,F
0017C:  BRA    0126
....................       }
....................       return OK;
0017E:  MOVLW  00
00180:  MOVWF  01
00182:  GOTO   01CC (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
....................         else             output_low(pin_b7);
....................         if(mq[cot]&0x40) output_float(pin_b6);
....................         else             output_low(pin_b6);
....................         if(mq[cot]&0x20) output_float(pin_b5);
....................         else             output_low(pin_b5);
....................         if(mq[cot]&0x10) output_float(pin_b4);
....................         else             output_low(pin_b4);
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
....................     }
....................     return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
....................     output_lcd(lcd_ins_hthi);
....................     return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
00186:  BCF    F97.7
00188:  BCF    F8E.7
0018A:  MOVLW  00
0018C:  MOVWF  01
0018E:  GOTO   01CE (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
00192:  BCF    F97.6
00194:  BCF    F8E.6
00196:  MOVLW  00
00198:  MOVWF  01
0019A:  GOTO   01D0 (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
0019E:  BRA    002E
....................       set_tris_a(0xdf);
001A0:  MOVLW  DF
001A2:  MOVWF  F92
....................       set_tris_d(0x04);
001A4:  MOVLW  04
001A6:  MOVWF  F95
....................       set_tris_e(0);
001A8:  MOVLW  00
001AA:  MOVWF  F96
....................       set_tris_f(0);
001AC:  MOVWF  F97
....................       set_tris_g(0);
001AE:  MOVWF  F98
....................       set_tris_c(0xff);
001B0:  MOVLW  FF
001B2:  MOVWF  F94
....................       port_b_pullups(0xFF);
001B4:  BCF    FF1.7
....................       output_g(0);
001B6:  CLRF   F98
001B8:  CLRF   F8F
....................       output_high(pin_g0);
001BA:  BCF    F98.0
001BC:  BSF    F8F.0
....................       led32.ledx32=0;
001BE:  CLRF   0B
001C0:  CLRF   0A
001C2:  CLRF   09
001C4:  CLRF   08
....................       led32_display();
001C6:  RCALL  0088
....................       d7seg_display();
001C8:  BRA    00BE
....................       s7seg_display();
001CA:  BRA    0124
....................       buzzer_off(); 
001CC:  BRA    0186
....................       triac_2_off();
001CE:  BRA    0192
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
001D0:  MOVLW  BD
001D2:  MOVWF  FB1
....................       return OK;
001D4:  MOVLW  00
001D6:  MOVWF  01
001D8:  GOTO   0A58 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
0002E:  BSF    29.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
00030:  CLRF   2A
00032:  MOVF   2A,W
00034:  SUBLW  09
00036:  BNC   0060
....................       {     output_bit(pin_d0,tt);
00038:  BTFSC  29.0
0003A:  BRA    0040
0003C:  BCF    F8C.0
0003E:  BRA    0042
00040:  BSF    F8C.0
00042:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
00044:  BSF    F95.1
00046:  MOVLW  00
00048:  BTFSC  F83.1
0004A:  MOVLW  01
0004C:  MOVWF  2C
0004E:  MOVLW  00
00050:  BTFSC  29.0
00052:  MOVLW  01
00054:  SUBWF  2C,W
00056:  BTFSS  FD8.2
00058:  BRA    0060
....................             tt=!tt;
0005A:  BTG    29.0
0005C:  INCF   2A,F
0005E:  BRA    0032
....................       }
....................       if(n<10) while(true)
00060:  MOVF   2A,W
00062:  SUBLW  09
00064:  BNC   0080
....................       {    output_d(0xff);
00066:  CLRF   F95
00068:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
0006A:  CLRF   F93
0006C:  SETF   F8A
0006E:  MOVLW  0A
00070:  MOVWF  2B
00072:  RCALL  0004
....................            output_b(0); delay_ms(10);
00074:  CLRF   F93
00076:  CLRF   F8A
00078:  MOVLW  0A
0007A:  MOVWF  2B
0007C:  RCALL  0004
0007E:  BRA    0066
....................       }
....................       return OK;
00080:  MOVLW  00
00082:  MOVWF  01
00084:  GOTO   01A0 (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
002DA:  MOVF   FB2,W
002DC:  MOVFF  FB3,03
002E0:  ADDWF  04,F
002E2:  MOVF   FB3,W
002E4:  ADDWFC 05,F
002E6:  MOVLW  00
002E8:  ADDWFC 06,F
002EA:  ADDWFC 07,F
002EC:  CLRF   FB3
002EE:  MOVLW  02
002F0:  MOVWF  FB2
002F2:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
002F4:  BTFSS  FA1.1
002F6:  BRA    0300
002F8:  MOVLW  01
002FA:  ADDWF  06,F
002FC:  MOVLW  00
002FE:  ADDWFC 07,F
00300:  BCF    FA1.1
....................       return delay.timeline/625;
00302:  BCF    FD8.1
00304:  MOVFF  07,32
00308:  MOVFF  06,31
0030C:  MOVFF  05,30
00310:  MOVFF  04,2F
00314:  CLRF   36
00316:  CLRF   35
00318:  MOVLW  02
0031A:  MOVWF  34
0031C:  MOVLW  71
0031E:  MOVWF  33
00320:  RCALL  024C
00322:  MOVFF  01,02
00326:  MOVFF  00,01
0032A:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
0032C:  MOVF   FB2,W
0032E:  MOVFF  FB3,03
00332:  ADDWF  04,F
00334:  MOVF   FB3,W
00336:  ADDWFC 05,F
00338:  MOVLW  00
0033A:  ADDWFC 06,F
0033C:  ADDWFC 07,F
0033E:  CLRF   FB3
00340:  MOVLW  02
00342:  MOVWF  FB2
00344:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
00346:  BTFSS  FA1.1
00348:  BRA    0352
0034A:  MOVLW  01
0034C:  ADDWF  06,F
0034E:  MOVLW  00
00350:  ADDWFC 07,F
00352:  BCF    FA1.1
....................       tam = delay.timeline/625;
00354:  BCF    FD8.1
00356:  MOVFF  07,32
0035A:  MOVFF  06,31
0035E:  MOVFF  05,30
00362:  MOVFF  04,2F
00366:  CLRF   36
00368:  CLRF   35
0036A:  MOVLW  02
0036C:  MOVWF  34
0036E:  MOVLW  71
00370:  MOVWF  33
00372:  RCALL  024C
00374:  MOVFF  01,2E
00378:  MOVFF  00,2D
....................       if(t<=tam) return tam-t;
0037C:  MOVF   2C,W
0037E:  SUBWF  2E,W
00380:  BNC   03A0
00382:  BNZ   038A
00384:  MOVF   2B,W
00386:  SUBWF  2D,W
00388:  BNC   03A0
0038A:  MOVF   2B,W
0038C:  SUBWF  2D,W
0038E:  MOVWF  00
00390:  MOVF   2C,W
00392:  SUBWFB 2E,W
00394:  MOVWF  03
00396:  MOVFF  00,01
0039A:  MOVWF  02
0039C:  BRA    03BC
0039E:  BRA    03BC
....................       else       return 0xffff-t + tam;
003A0:  MOVLW  FF
003A2:  BSF    FD8.0
003A4:  SUBFWB 2B,W
003A6:  MOVWF  2F
003A8:  MOVLW  FF
003AA:  SUBFWB 2C,W
003AC:  MOVWF  30
003AE:  MOVF   2D,W
003B0:  ADDWF  2F,W
003B2:  MOVWF  01
003B4:  MOVF   2E,W
003B6:  ADDWFC 30,W
003B8:  MOVWF  03
003BA:  MOVWF  02
003BC:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
003BE:  MOVFF  29,2B
003C2:  MOVLW  01
003C4:  MOVWF  2C
003C6:  MOVLW  0F
003C8:  MOVWF  2E
003CA:  MOVLW  92
003CC:  MOVWF  2D
003CE:  RCALL  01DC
....................       switch (step)
003D0:  MOVF   20,W
003D2:  ADDLW  FC
003D4:  BTFSC  FD8.0
003D6:  BRA    0546
003D8:  ADDLW  04
003DA:  GOTO   054C
....................       {
....................           case 0:
....................                  if(input(pin)==0)
003DE:  MOVFF  29,2B
003E2:  MOVLW  01
003E4:  MOVWF  2C
003E6:  MOVLW  0F
003E8:  MOVWF  2E
003EA:  MOVLW  92
003EC:  MOVWF  2D
003EE:  RCALL  01DC
003F0:  MOVFF  29,2B
003F4:  MOVLW  0F
003F6:  MOVWF  2D
003F8:  MOVLW  80
003FA:  MOVWF  2C
003FC:  RCALL  021A
003FE:  BTFSC  01.0
00400:  BRA    0418
....................                   {
....................                         oldpin   = pin;
00402:  MOVFF  2A,1D
00406:  MOVFF  29,1C
....................                         t        = delay_start();
0040A:  RCALL  02DA
0040C:  MOVFF  02,1F
00410:  MOVFF  01,1E
....................                         step     = 1;
00414:  MOVLW  01
00416:  MOVWF  20
....................                   }
....................                  break;
00418:  BRA    0546
....................            case 1:
....................                  if(input(oldpin))step = 0;
0041A:  MOVFF  1C,2B
0041E:  MOVLW  01
00420:  MOVWF  2C
00422:  MOVLW  0F
00424:  MOVWF  2E
00426:  MOVLW  92
00428:  MOVWF  2D
0042A:  RCALL  01DC
0042C:  MOVFF  1C,2B
00430:  MOVLW  0F
00432:  MOVWF  2D
00434:  MOVLW  80
00436:  MOVWF  2C
00438:  RCALL  021A
0043A:  BTFSS  01.0
0043C:  BRA    0442
0043E:  CLRF   20
00440:  BRA    047E
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
00442:  MOVF   1C,W
00444:  SUBWF  29,W
00446:  BNZ   047E
00448:  MOVF   1D,W
0044A:  SUBWF  2A,W
0044C:  BNZ   047E
0044E:  MOVFF  1F,2C
00452:  MOVFF  1E,2B
00456:  RCALL  032C
00458:  MOVFF  02,2C
0045C:  MOVFF  01,2B
00460:  MOVF   2C,F
00462:  BNZ   046A
00464:  MOVF   2B,W
00466:  SUBLW  1D
00468:  BC    047E
....................                    {
....................                       t    = delay_start();
0046A:  RCALL  02DA
0046C:  MOVFF  02,1F
00470:  MOVFF  01,1E
....................                       step = 2;
00474:  MOVLW  02
00476:  MOVWF  20
....................                       return OK;
00478:  MOVLW  00
0047A:  MOVWF  01
0047C:  BRA    054A
....................                    }
....................                  break;
0047E:  BRA    0546
....................             case 2:
....................                  if(input(oldpin))step = 0;
00480:  MOVFF  1C,2B
00484:  MOVLW  01
00486:  MOVWF  2C
00488:  MOVLW  0F
0048A:  MOVWF  2E
0048C:  MOVLW  92
0048E:  MOVWF  2D
00490:  RCALL  01DC
00492:  MOVFF  1C,2B
00496:  MOVLW  0F
00498:  MOVWF  2D
0049A:  MOVLW  80
0049C:  MOVWF  2C
0049E:  RCALL  021A
004A0:  BTFSS  01.0
004A2:  BRA    04A8
004A4:  CLRF   20
004A6:  BRA    04E4
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
004A8:  MOVF   1C,W
004AA:  SUBWF  29,W
004AC:  BNZ   04E4
004AE:  MOVF   1D,W
004B0:  SUBWF  2A,W
004B2:  BNZ   04E4
004B4:  MOVFF  1F,2C
004B8:  MOVFF  1E,2B
004BC:  RCALL  032C
004BE:  MOVFF  02,2C
004C2:  MOVFF  01,2B
004C6:  MOVF   02,W
004C8:  SUBLW  00
004CA:  BC    04E4
004CC:  XORLW  FF
004CE:  BNZ   04D6
004D0:  MOVF   2B,W
004D2:  SUBLW  F3
004D4:  BC    04E4
....................                    {
....................                        t        = delay_start();
004D6:  RCALL  02DA
004D8:  MOVFF  02,1F
004DC:  MOVFF  01,1E
....................                        step     = 3;
004E0:  MOVLW  03
004E2:  MOVWF  20
....................                    } 
....................                  break;
004E4:  BRA    0546
....................             case 3:
....................                    if(input(oldpin))step = 0; 
004E6:  MOVFF  1C,2B
004EA:  MOVLW  01
004EC:  MOVWF  2C
004EE:  MOVLW  0F
004F0:  MOVWF  2E
004F2:  MOVLW  92
004F4:  MOVWF  2D
004F6:  RCALL  01DC
004F8:  MOVFF  1C,2B
004FC:  MOVLW  0F
004FE:  MOVWF  2D
00500:  MOVLW  80
00502:  MOVWF  2C
00504:  RCALL  021A
00506:  BTFSS  01.0
00508:  BRA    050E
0050A:  CLRF   20
0050C:  BRA    0546
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
0050E:  MOVF   1C,W
00510:  SUBWF  29,W
00512:  BNZ   0546
00514:  MOVF   1D,W
00516:  SUBWF  2A,W
00518:  BNZ   0546
0051A:  MOVFF  1F,2C
0051E:  MOVFF  1E,2B
00522:  RCALL  032C
00524:  MOVFF  02,2C
00528:  MOVFF  01,2B
0052C:  MOVF   2C,F
0052E:  BNZ   0536
00530:  MOVF   2B,W
00532:  SUBLW  63
00534:  BC    0546
....................                        {
....................                           t  = delay_start();
00536:  RCALL  02DA
00538:  MOVFF  02,1F
0053C:  MOVFF  01,1E
....................                           return OK;
00540:  MOVLW  00
00542:  MOVWF  01
00544:  BRA    054A
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
00546:  MOVLW  02
00548:  MOVWF  01
0054A:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... unsigned int8 i,j,cdo=1,cdocu=1, cho=1, chocu=1;
.................... unsigned int1 cdoi=0;
.................... unsigned int8 k;
.................... void kt_nut_nhan()
.................... {
....................    if(inputcd(mod)==0) cdoi=~cdoi;
*
00574:  MOVLW  7C
00576:  MOVWF  2A
00578:  MOVLW  0F
0057A:  MOVWF  29
0057C:  RCALL  03BE
0057E:  MOVF   01,F
00580:  BNZ   0584
00582:  BTG    27.0
....................    if(cdoi==0)
00584:  BTFSC  27.0
00586:  BRA    05AE
....................    {
....................       if(inputcd(up)==0) cdo++;
00588:  MOVLW  7C
0058A:  MOVWF  2A
0058C:  MOVLW  0C
0058E:  MOVWF  29
00590:  RCALL  03BE
00592:  MOVF   01,F
00594:  BNZ   0598
00596:  INCF   23,F
....................       if(inputcd(dw)==0) cdo--;
00598:  MOVLW  7C
0059A:  MOVWF  2A
0059C:  MOVLW  0D
0059E:  MOVWF  29
005A0:  RCALL  03BE
005A2:  MOVF   01,F
005A4:  BNZ   05A8
005A6:  DECF   23,F
....................       led32.ledx1[0]=0;
005A8:  BCF    08.0
....................       led32_display();
005AA:  RCALL  0088
....................    }
005AC:  BRA    05D2
....................    else
....................    {
....................       if(inputcd(up)==0) cho--;
005AE:  MOVLW  7C
005B0:  MOVWF  2A
005B2:  MOVLW  0C
005B4:  MOVWF  29
005B6:  RCALL  03BE
005B8:  MOVF   01,F
005BA:  BNZ   05BE
005BC:  DECF   25,F
....................       if(inputcd(dw)==0) cho++;
005BE:  MOVLW  7C
005C0:  MOVWF  2A
005C2:  MOVLW  0D
005C4:  MOVWF  29
005C6:  RCALL  03BE
005C8:  MOVF   01,F
005CA:  BNZ   05CE
005CC:  INCF   25,F
....................       led32.ledx1[0]=1;
005CE:  BSF    08.0
....................       led32_display();
005D0:  RCALL  0088
....................    }
....................    if(cdo<1) cdo=1;
005D2:  MOVF   23,F
005D4:  BNZ   05DA
005D6:  MOVLW  01
005D8:  MOVWF  23
....................    if(cdo>=10) cdo=10;
005DA:  MOVF   23,W
005DC:  SUBLW  09
005DE:  BC    05E4
005E0:  MOVLW  0A
005E2:  MOVWF  23
....................    if(cho<1) cho=1;
005E4:  MOVF   25,F
005E6:  BNZ   05EC
005E8:  MOVLW  01
005EA:  MOVWF  25
....................    if(cho>=10) cho=10;
005EC:  MOVF   25,W
005EE:  SUBLW  09
005F0:  BC    05F6
005F2:  MOVLW  0A
005F4:  MOVWF  25
....................    if(cdo!=cdocu)
005F6:  MOVF   24,W
005F8:  SUBWF  23,W
005FA:  BZ    060E
....................    {
....................       i=0;
005FC:  CLRF   21
....................       j=4;
005FE:  MOVLW  04
00600:  MOVWF  22
....................       led32.ledx32=0;
00602:  CLRF   0B
00604:  CLRF   0A
00606:  CLRF   09
00608:  CLRF   08
....................       cdocu=cdo;
0060A:  MOVFF  23,24
....................       break;
....................    }
....................    if(cho!=chocu)
0060E:  MOVF   26,W
00610:  SUBWF  25,W
00612:  BZ    0618
....................    {
....................       chocu=cho;
00614:  MOVFF  25,26
....................       break;
....................    }
....................    delay_ms(50);
00618:  MOVLW  32
0061A:  MOVWF  2B
0061C:  RCALL  0004
0061E:  RETURN 0
.................... }
.................... void chop_tat_led_don()
.................... {
....................    if(i<=2)
00620:  MOVF   21,W
00622:  SUBLW  02
00624:  BNC   0666
....................    {
....................       led32.ledx32=(~led32.ledx32)&0x0ffffff0;
00626:  MOVFF  08,29
0062A:  COMF   29,F
0062C:  MOVFF  09,2A
00630:  COMF   2A,F
00632:  MOVFF  0A,2B
00636:  COMF   2B,F
00638:  MOVFF  0B,2C
0063C:  COMF   2C,F
0063E:  MOVF   29,W
00640:  ANDLW  F0
00642:  MOVWF  08
00644:  MOVFF  2A,09
00648:  MOVFF  2B,0A
0064C:  MOVF   2C,W
0064E:  ANDLW  0F
00650:  MOVWF  0B
....................       led32_display();
00652:  RCALL  0088
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
00654:  CLRF   28
00656:  MOVF   28,W
00658:  SUBWF  25,W
0065A:  BNC   0662
0065C:  RCALL  0574
0065E:  INCF   28,F
00660:  BRA    0656
....................       i++;
00662:  INCF   21,F
....................    }
00664:  BRA    0668
....................    else i=0;
00666:  CLRF   21
00668:  GOTO   0A5E (RETURN)
.................... }
.................... void sang_tat_dan_pst()
.................... {
....................    if(i<48)
0066C:  MOVF   21,W
0066E:  SUBLW  2F
00670:  BNC   06DC
....................    {
....................       if(i<24) led32.ledx32=((led32.ledx32<<1)|0x00000010)&0x0ffffff0;
00672:  MOVF   21,W
00674:  SUBLW  17
00676:  BNC   06A2
00678:  BCF    FD8.0
0067A:  RLCF   08,W
0067C:  MOVWF  2A
0067E:  RLCF   09,W
00680:  MOVWF  2B
00682:  RLCF   0A,W
00684:  MOVWF  2C
00686:  RLCF   0B,W
00688:  MOVWF  2D
0068A:  BSF    2A.4
0068C:  MOVF   2A,W
0068E:  ANDLW  F0
00690:  MOVWF  08
00692:  MOVFF  2B,09
00696:  MOVFF  2C,0A
0069A:  MOVF   2D,W
0069C:  ANDLW  0F
0069E:  MOVWF  0B
006A0:  BRA    06C8
....................       else     led32.ledx32=(led32.ledx32<<1)&0x0ffffff0;
006A2:  BCF    FD8.0
006A4:  RLCF   08,W
006A6:  MOVWF  2A
006A8:  RLCF   09,W
006AA:  MOVWF  2B
006AC:  RLCF   0A,W
006AE:  MOVWF  2C
006B0:  RLCF   0B,W
006B2:  MOVWF  2D
006B4:  MOVF   2A,W
006B6:  ANDLW  F0
006B8:  MOVWF  08
006BA:  MOVFF  2B,09
006BE:  MOVFF  2C,0A
006C2:  MOVF   2D,W
006C4:  ANDLW  0F
006C6:  MOVWF  0B
....................       led32_display();
006C8:  RCALL  0088
....................       i++;
006CA:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
006CC:  CLRF   28
006CE:  MOVF   28,W
006D0:  SUBWF  25,W
006D2:  BNC   06DA
006D4:  RCALL  0574
006D6:  INCF   28,F
006D8:  BRA    06CE
....................    }
006DA:  BRA    06DE
....................    else i=0;
006DC:  CLRF   21
006DE:  GOTO   0A66 (RETURN)
.................... }
.................... void sang_tat_dan_tsp()
.................... {
....................    if(i<48)
006E2:  MOVF   21,W
006E4:  SUBLW  2F
006E6:  BNC   074E
....................    {
....................       if(i<24) led32.ledx32=((led32.ledx32>>1)|0x08000000)&0x0ffffff0;
006E8:  MOVF   21,W
006EA:  SUBLW  17
006EC:  BNC   0718
006EE:  BCF    FD8.0
006F0:  RRCF   0B,W
006F2:  MOVWF  2D
006F4:  RRCF   0A,W
006F6:  MOVWF  2C
006F8:  RRCF   09,W
006FA:  MOVWF  2B
006FC:  RRCF   08,W
006FE:  MOVWF  2A
00700:  BSF    2D.3
00702:  MOVF   2A,W
00704:  ANDLW  F0
00706:  MOVWF  08
00708:  MOVFF  2B,09
0070C:  MOVFF  2C,0A
00710:  MOVF   2D,W
00712:  ANDLW  0F
00714:  MOVWF  0B
00716:  BRA    073A
....................       else     led32.ledx32=(led32.ledx32>>1)&0x0ffffff0;
00718:  BCF    FD8.0
0071A:  RRCF   0B,W
0071C:  MOVWF  2D
0071E:  RRCF   0A,W
00720:  MOVWF  2C
00722:  RRCF   09,W
00724:  MOVWF  2B
00726:  RRCF   08,W
00728:  ANDLW  F0
0072A:  MOVWF  08
0072C:  MOVFF  2B,09
00730:  MOVFF  2C,0A
00734:  MOVF   2D,W
00736:  ANDLW  0F
00738:  MOVWF  0B
....................       led32_display();
0073A:  RCALL  0088
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
0073C:  CLRF   28
0073E:  MOVF   28,W
00740:  SUBWF  25,W
00742:  BNC   074A
00744:  RCALL  0574
00746:  INCF   28,F
00748:  BRA    073E
....................       i++;
0074A:  INCF   21,F
....................    }
0074C:  BRA    0750
....................    else i=0;
0074E:  CLRF   21
00750:  GOTO   0A6E (RETURN)
.................... }
.................... void sang_dich_pst()
.................... {
....................    if(i<24)
00754:  MOVF   21,W
00756:  SUBLW  17
00758:  BNC   078C
....................    {
....................       led32.ledx32=0x00000010<<i;
0075A:  MOVLW  10
0075C:  MOVWF  08
0075E:  CLRF   09
00760:  CLRF   0A
00762:  CLRF   0B
00764:  MOVF   21,W
00766:  MOVWF  29
00768:  BZ    0778
0076A:  BCF    FD8.0
0076C:  RLCF   08,F
0076E:  RLCF   09,F
00770:  RLCF   0A,F
00772:  RLCF   0B,F
00774:  DECFSZ 29,F
00776:  BRA    076A
....................       led32_display();
00778:  RCALL  0088
....................       i++;
0077A:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
0077C:  CLRF   28
0077E:  MOVF   28,W
00780:  SUBWF  25,W
00782:  BNC   078A
00784:  RCALL  0574
00786:  INCF   28,F
00788:  BRA    077E
....................    }
0078A:  BRA    078E
....................    else i=0;
0078C:  CLRF   21
0078E:  GOTO   0A76 (RETURN)
.................... }
.................... void sang_dich_tsp()
.................... {
....................    if(i<24)
00792:  MOVF   21,W
00794:  SUBLW  17
00796:  BNC   07CA
....................    {
....................       led32.ledx32=0x08000000>>i;
00798:  MOVLW  08
0079A:  MOVWF  0B
0079C:  CLRF   0A
0079E:  CLRF   09
007A0:  CLRF   08
007A2:  MOVF   21,W
007A4:  MOVWF  29
007A6:  BZ    07B6
007A8:  BCF    FD8.0
007AA:  RRCF   0B,F
007AC:  RRCF   0A,F
007AE:  RRCF   09,F
007B0:  RRCF   08,F
007B2:  DECFSZ 29,F
007B4:  BRA    07A8
....................       led32_display();
007B6:  RCALL  0088
....................       i++;
007B8:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
007BA:  CLRF   28
007BC:  MOVF   28,W
007BE:  SUBWF  25,W
007C0:  BNC   07C8
007C2:  RCALL  0574
007C4:  INCF   28,F
007C6:  BRA    07BC
....................    }
007C8:  BRA    07CC
....................    else i=0;
007CA:  CLRF   21
007CC:  GOTO   0A7E (RETURN)
.................... }
.................... void sang_tat_dan_tu_trong_ra()
.................... {
....................    if(i<24)
007D0:  MOVF   21,W
007D2:  SUBLW  17
007D4:  BNC   083A
....................    {
....................       if(i<12) 
007D6:  MOVF   21,W
007D8:  SUBLW  0B
007DA:  BNC   0802
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1)|0x0001;
007DC:  BCF    FD8.0
007DE:  RLCF   0A,W
007E0:  MOVWF  29
007E2:  RLCF   0B,W
007E4:  MOVWF  2A
007E6:  MOVF   29,W
007E8:  IORLW  01
007EA:  MOVWF  0A
007EC:  MOVFF  2A,0B
....................          led32.ledx16[0]=(led32.ledx16[0]>>1)|0x8000;
007F0:  BCF    FD8.0
007F2:  RRCF   09,W
007F4:  MOVWF  2A
007F6:  RRCF   08,W
007F8:  MOVWF  08
007FA:  MOVF   2A,W
007FC:  IORLW  80
007FE:  MOVWF  09
....................       }
00800:  BRA    0826
....................       else
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1)&0x0fff;
00802:  BCF    FD8.0
00804:  RLCF   0A,W
00806:  MOVWF  29
00808:  RLCF   0B,W
0080A:  MOVWF  2A
0080C:  MOVFF  29,0A
00810:  MOVF   2A,W
00812:  ANDLW  0F
00814:  MOVWF  0B
....................          led32.ledx16[0]=(led32.ledx16[0]>>1)&0xfff0;
00816:  BCF    FD8.0
00818:  RRCF   09,W
0081A:  MOVWF  2A
0081C:  RRCF   08,W
0081E:  ANDLW  F0
00820:  MOVWF  08
00822:  MOVFF  2A,09
....................       }
....................       led32_display();
00826:  RCALL  0088
....................       i++;
00828:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
0082A:  CLRF   28
0082C:  MOVF   28,W
0082E:  SUBWF  25,W
00830:  BNC   0838
00832:  RCALL  0574
00834:  INCF   28,F
00836:  BRA    082C
....................    }
00838:  BRA    083C
....................    else i=0;
0083A:  CLRF   21
0083C:  GOTO   0A86 (RETURN)
.................... }
.................... void sang_tat_dan_tu_ngoai_vao()
.................... {
....................    if(i<24)
00840:  MOVF   21,W
00842:  SUBLW  17
00844:  BNC   08B0
....................    {
....................       if(i<12)
00846:  MOVF   21,W
00848:  SUBLW  0B
0084A:  BNC   0876
....................       {
....................          led32.ledx16[1]=((led32.ledx16[1]>>1)|0x0800)&0x0fff;
0084C:  BCF    FD8.0
0084E:  RRCF   0B,W
00850:  MOVWF  2A
00852:  RRCF   0A,W
00854:  BSF    2A.3
00856:  MOVWF  0A
00858:  MOVF   2A,W
0085A:  ANDLW  0F
0085C:  MOVWF  0B
....................          led32.ledx16[0]=((led32.ledx16[0]<<1)|0x0010)&0xfff0;
0085E:  BCF    FD8.0
00860:  RLCF   08,W
00862:  MOVWF  29
00864:  RLCF   09,W
00866:  MOVWF  2A
00868:  BSF    29.4
0086A:  MOVF   29,W
0086C:  ANDLW  F0
0086E:  MOVWF  08
00870:  MOVFF  2A,09
....................       }
00874:  BRA    089A
....................       else
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1)&0x0fff;
00876:  BCF    FD8.0
00878:  RRCF   0B,W
0087A:  MOVWF  2A
0087C:  RRCF   0A,W
0087E:  MOVWF  0A
00880:  MOVF   2A,W
00882:  ANDLW  0F
00884:  MOVWF  0B
....................          led32.ledx16[0]=(led32.ledx16[0]<<1)&0xfff0;
00886:  BCF    FD8.0
00888:  RLCF   08,W
0088A:  MOVWF  29
0088C:  RLCF   09,W
0088E:  MOVWF  2A
00890:  MOVF   29,W
00892:  ANDLW  F0
00894:  MOVWF  08
00896:  MOVFF  2A,09
....................       }
....................       led32_display();
0089A:  CALL   0088
....................       i++;
0089E:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
008A0:  CLRF   28
008A2:  MOVF   28,W
008A4:  SUBWF  25,W
008A6:  BNC   08AE
008A8:  RCALL  0574
008AA:  INCF   28,F
008AC:  BRA    08A2
....................    }
008AE:  BRA    08B2
....................    else i=0;
008B0:  CLRF   21
008B2:  GOTO   0A8E (RETURN)
.................... }
.................... void sang_dich_tu_trong_ra()
.................... {
....................    if(i<12)
*
00904:  MOVF   21,W
00906:  SUBLW  0B
00908:  BNC   094C
....................    {
....................       led32.ledx16[0]=0x8000>>i;
0090A:  MOVLW  80
0090C:  MOVWF  09
0090E:  CLRF   08
00910:  MOVF   21,W
00912:  MOVWF  00
00914:  BZ    0920
00916:  BCF    FD8.0
00918:  RRCF   09,F
0091A:  RRCF   08,F
0091C:  DECFSZ 00,F
0091E:  BRA    0916
....................       led32.ledx16[1]=0x0001<<i;
00920:  MOVLW  01
00922:  MOVWF  0A
00924:  CLRF   0B
00926:  MOVF   21,W
00928:  MOVWF  00
0092A:  BZ    0936
0092C:  BCF    FD8.0
0092E:  RLCF   0A,F
00930:  RLCF   0B,F
00932:  DECFSZ 00,F
00934:  BRA    092C
....................       led32_display();
00936:  CALL   0088
....................       i++;
0093A:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
0093C:  CLRF   28
0093E:  MOVF   28,W
00940:  SUBWF  25,W
00942:  BNC   094A
00944:  RCALL  0574
00946:  INCF   28,F
00948:  BRA    093E
....................    }
0094A:  BRA    094E
....................    else i=0;
0094C:  CLRF   21
0094E:  GOTO   0A9E (RETURN)
.................... }
.................... void sang_dich_tu_ngoai_vao()
.................... {
....................    if(i<12)
*
008B6:  MOVF   21,W
008B8:  SUBLW  0B
008BA:  BNC   08FE
....................    {
....................       led32.ledx16[0]=0x0010<<i;
008BC:  MOVLW  10
008BE:  MOVWF  08
008C0:  CLRF   09
008C2:  MOVF   21,W
008C4:  MOVWF  00
008C6:  BZ    08D2
008C8:  BCF    FD8.0
008CA:  RLCF   08,F
008CC:  RLCF   09,F
008CE:  DECFSZ 00,F
008D0:  BRA    08C8
....................       led32.ledx16[1]=0x0800>>i;
008D2:  MOVLW  08
008D4:  MOVWF  0B
008D6:  CLRF   0A
008D8:  MOVF   21,W
008DA:  MOVWF  00
008DC:  BZ    08E8
008DE:  BCF    FD8.0
008E0:  RRCF   0B,F
008E2:  RRCF   0A,F
008E4:  DECFSZ 00,F
008E6:  BRA    08DE
....................       led32_display();
008E8:  CALL   0088
....................       i++;
008EC:  INCF   21,F
....................       for(k=0;k<=cho;k++) kt_nut_nhan();
008EE:  CLRF   28
008F0:  MOVF   28,W
008F2:  SUBWF  25,W
008F4:  BNC   08FC
008F6:  RCALL  0574
008F8:  INCF   28,F
008FA:  BRA    08F0
....................    }
008FC:  BRA    0900
....................    else i=0;
008FE:  CLRF   21
00900:  GOTO   0A96 (RETURN)
.................... }
.................... void sang_don_pst()
.................... {
....................    if(i<24)
*
00952:  MOVF   21,W
00954:  SUBLW  17
00956:  BNC   09F8
....................    {
....................       if(j<28-i)
00958:  MOVLW  1C
0095A:  BSF    FD8.0
0095C:  SUBFWB 21,W
0095E:  SUBWF  22,W
00960:  BC    09F0
....................       {
....................          led32.ledx32=((~(0x0fffffff>>i))|((int32)1<<j))&0x0ffffff0;
00962:  MOVLW  0F
00964:  MOVWF  03
00966:  SETF   02
00968:  SETF   01
0096A:  SETF   00
0096C:  MOVF   21,W
0096E:  MOVWF  29
00970:  BZ    0980
00972:  BCF    FD8.0
00974:  RRCF   03,F
00976:  RRCF   02,F
00978:  RRCF   01,F
0097A:  RRCF   00,F
0097C:  DECFSZ 29,F
0097E:  BRA    0972
00980:  MOVF   00,W
00982:  MOVWF  2A
00984:  COMF   2A,F
00986:  MOVF   01,W
00988:  MOVWF  2B
0098A:  COMF   2B,F
0098C:  MOVF   02,W
0098E:  MOVWF  2C
00990:  COMF   2C,F
00992:  MOVF   03,W
00994:  MOVWF  2D
00996:  COMF   2D,F
00998:  CLRF   03
0099A:  CLRF   02
0099C:  CLRF   01
0099E:  MOVLW  01
009A0:  MOVWF  00
009A2:  MOVF   22,W
009A4:  MOVWF  2E
009A6:  BZ    09B6
009A8:  BCF    FD8.0
009AA:  RLCF   00,F
009AC:  RLCF   01,F
009AE:  RLCF   02,F
009B0:  RLCF   03,F
009B2:  DECFSZ 2E,F
009B4:  BRA    09A8
009B6:  MOVF   00,W
009B8:  IORWF  2A,F
009BA:  MOVF   01,W
009BC:  IORWF  2B,F
009BE:  MOVF   02,W
009C0:  IORWF  2C,F
009C2:  MOVF   03,W
009C4:  IORWF  2D,F
009C6:  MOVF   2A,W
009C8:  ANDLW  F0
009CA:  MOVWF  08
009CC:  MOVF   2B,W
009CE:  MOVWF  09
009D0:  MOVF   2C,W
009D2:  MOVWF  0A
009D4:  MOVF   2D,W
009D6:  ANDLW  0F
009D8:  MOVWF  0B
....................          led32_display();
009DA:  CALL   0088
....................          for(k=0;k<=cho;k++) kt_nut_nhan();
009DE:  CLRF   28
009E0:  MOVF   28,W
009E2:  SUBWF  25,W
009E4:  BNC   09EC
009E6:  RCALL  0574
009E8:  INCF   28,F
009EA:  BRA    09E0
....................          j++;
009EC:  INCF   22,F
....................       }
009EE:  BRA    09F6
....................       else
....................       {
....................          j=4;
009F0:  MOVLW  04
009F2:  MOVWF  22
....................          i++;
009F4:  INCF   21,F
....................       }
....................    }
009F6:  BRA    09FA
....................    else i=0;
009F8:  CLRF   21
009FA:  GOTO   0AA6 (RETURN)
.................... }
.................... void main()
009FE:  CLRF   FF8
00A00:  BCF    FD0.7
00A02:  BCF    F63.5
00A04:  MOVLW  00
00A06:  MOVWF  F64
00A08:  MOVLW  20
00A0A:  MOVWF  F63
00A0C:  BCF    F95.4
00A0E:  BSF    F95.5
00A10:  BCF    F95.6
00A12:  MOVLW  01
00A14:  MOVWF  23
00A16:  MOVWF  24
00A18:  MOVWF  25
00A1A:  MOVWF  26
00A1C:  BCF    27.0
00A1E:  MOVF   FC1,W
00A20:  ANDLW  C0
00A22:  IORLW  0F
00A24:  MOVWF  FC1
00A26:  MOVLW  07
00A28:  MOVWF  FB4
00A2A:  SETF   0C
00A2C:  SETF   0D
00A2E:  SETF   0E
00A30:  SETF   0F
00A32:  SETF   10
00A34:  SETF   11
00A36:  SETF   12
00A38:  SETF   13
00A3A:  SETF   14
00A3C:  SETF   15
00A3E:  SETF   16
00A40:  SETF   17
00A42:  SETF   18
00A44:  SETF   19
00A46:  SETF   1A
00A48:  SETF   1B
00A4A:  SETF   1C
00A4C:  SETF   1D
00A4E:  CLRF   1E
00A50:  CLRF   1F
00A52:  CLRF   20
.................... {
....................       system_init();
00A54:  GOTO   019E
....................       while(true)
....................       {
....................          if(cdo==1) chop_tat_led_don();
00A58:  DECFSZ 23,W
00A5A:  BRA    0A5E
00A5C:  BRA    0620
....................          if(cdo==2) sang_tat_dan_pst();
00A5E:  MOVF   23,W
00A60:  SUBLW  02
00A62:  BTFSC  FD8.2
00A64:  BRA    066C
....................          if(cdo==3) sang_tat_dan_tsp();
00A66:  MOVF   23,W
00A68:  SUBLW  03
00A6A:  BTFSC  FD8.2
00A6C:  BRA    06E2
....................          if(cdo==4) sang_dich_pst();
00A6E:  MOVF   23,W
00A70:  SUBLW  04
00A72:  BTFSC  FD8.2
00A74:  BRA    0754
....................          if(cdo==5) sang_dich_tsp();
00A76:  MOVF   23,W
00A78:  SUBLW  05
00A7A:  BTFSC  FD8.2
00A7C:  BRA    0792
....................          if(cdo==6) sang_tat_dan_tu_trong_ra();
00A7E:  MOVF   23,W
00A80:  SUBLW  06
00A82:  BTFSC  FD8.2
00A84:  BRA    07D0
....................          if(cdo==7) sang_tat_dan_tu_ngoai_vao();
00A86:  MOVF   23,W
00A88:  SUBLW  07
00A8A:  BTFSC  FD8.2
00A8C:  BRA    0840
....................          if(cdo==8) sang_dich_tu_ngoai_vao();
00A8E:  MOVF   23,W
00A90:  SUBLW  08
00A92:  BTFSC  FD8.2
00A94:  BRA    08B6
....................          if(cdo==9) sang_dich_tu_trong_ra();
00A96:  MOVF   23,W
00A98:  SUBLW  09
00A9A:  BTFSC  FD8.2
00A9C:  BRA    0904
....................          if(cdo==10) sang_don_pst();
00A9E:  MOVF   23,W
00AA0:  SUBLW  0A
00AA2:  BTFSC  FD8.2
00AA4:  BRA    0952
00AA6:  BRA    0A58
....................       }
.................... }
.................... 
00AA8:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
