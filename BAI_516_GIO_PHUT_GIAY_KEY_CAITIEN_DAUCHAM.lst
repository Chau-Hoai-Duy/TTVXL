CCS PCH C Compiler, Version 5.101, 43599               26-Feb-23 21:59

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_516_GIO_PHUT_GIAY_KEY_CAITIEN_DAUCHAM.lst

               ROM used:   2318 bytes (2%)
                           Largest free fragment is 65536
               RAM used:   63 (2%) at main() level
                           82 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
00000:  GOTO   075C
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00E2
00068:  MOVFF  0E,00
0006C:  MOVFF  0F,01
00070:  MOVFF  10,02
00074:  MOVFF  11,03
00078:  MOVFF  0C,FE9
0007C:  MOVFF  07,FEA
00080:  BSF    07.7
00082:  MOVFF  08,FE1
00086:  MOVFF  09,FE2
0008A:  MOVFF  0A,FD9
0008E:  MOVFF  0B,FDA
00092:  MOVFF  12,FF3
00096:  MOVFF  13,FF4
0009A:  MOVFF  14,FFA
0009E:  MOVFF  15,FF5
000A2:  MOVFF  16,FF6
000A6:  MOVFF  17,FF7
000AA:  MOVFF  18,FF8
000AE:  MOVFF  19,FFB
000B2:  MOVF   04,W
000B4:  MOVFF  06,FE0
000B8:  MOVFF  05,FD8
000BC:  RETFIE 0
.................... //#DEFINE BOARD D501
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
000BE:  CLRF   FF7
000C0:  ADDLW  D2
000C2:  MOVWF  FF6
000C4:  MOVLW  00
000C6:  ADDWFC FF7,F
000C8:  MOVLW  00
000CA:  MOVWF  FF8
000CC:  TBLRD*+
000CE:  MOVF   FF5,W
000D0:  RETURN 0
000D2:  DATA C0,F9
000D4:  DATA A4,B0
000D6:  DATA 99,92
000D8:  DATA 82,F8
000DA:  DATA 80,90
000DC:  DATA 88,83
000DE:  DATA C6,A1
000E0:  DATA 86,7F
*
002C8:  MOVF   40,W
002CA:  ANDLW  07
002CC:  MOVWF  00
002CE:  RRCF   40,W
002D0:  MOVWF  01
002D2:  RRCF   01,F
002D4:  RRCF   01,F
002D6:  MOVLW  1F
002D8:  ANDWF  01,F
002DA:  MOVF   01,W
002DC:  ADDWF  42,W
002DE:  MOVWF  FE9
002E0:  MOVLW  00
002E2:  ADDWFC 43,W
002E4:  MOVWF  FEA
002E6:  CLRF   01
002E8:  INCF   01,F
002EA:  INCF   00,F
002EC:  BRA    02F0
002EE:  RLCF   01,F
002F0:  DECFSZ 00,F
002F2:  BRA    02EE
002F4:  MOVF   41,F
002F6:  BZ    02FE
002F8:  MOVF   01,W
002FA:  IORWF  FEF,F
002FC:  BRA    0304
002FE:  COMF   01,F
00300:  MOVF   01,W
00302:  ANDWF  FEF,F
00304:  RETURN 0
00306:  MOVF   40,W
00308:  ANDLW  07
0030A:  MOVWF  00
0030C:  RRCF   40,W
0030E:  MOVWF  01
00310:  RRCF   01,F
00312:  RRCF   01,F
00314:  MOVLW  1F
00316:  ANDWF  01,F
00318:  MOVF   01,W
0031A:  ADDWF  41,W
0031C:  MOVWF  FE9
0031E:  MOVLW  00
00320:  ADDWFC 42,W
00322:  MOVWF  FEA
00324:  MOVFF  FEF,01
00328:  INCF   00,F
0032A:  BRA    032E
0032C:  RRCF   01,F
0032E:  DECFSZ 00,F
00330:  BRA    032C
00332:  MOVLW  01
00334:  ANDWF  01,F
00336:  RETURN 0
00338:  BTFSC  FD8.1
0033A:  BRA    0342
0033C:  CLRF   FEA
0033E:  MOVLW  4C
00340:  MOVWF  FE9
00342:  CLRF   00
00344:  CLRF   01
00346:  CLRF   02
00348:  CLRF   03
0034A:  CLRF   4C
0034C:  CLRF   4D
0034E:  CLRF   4E
00350:  CLRF   4F
00352:  MOVF   4B,W
00354:  IORWF  4A,W
00356:  IORWF  49,W
00358:  IORWF  48,W
0035A:  BZ    03B4
0035C:  MOVLW  20
0035E:  MOVWF  50
00360:  BCF    FD8.0
00362:  RLCF   44,F
00364:  RLCF   45,F
00366:  RLCF   46,F
00368:  RLCF   47,F
0036A:  RLCF   4C,F
0036C:  RLCF   4D,F
0036E:  RLCF   4E,F
00370:  RLCF   4F,F
00372:  MOVF   4B,W
00374:  SUBWF  4F,W
00376:  BNZ   0388
00378:  MOVF   4A,W
0037A:  SUBWF  4E,W
0037C:  BNZ   0388
0037E:  MOVF   49,W
00380:  SUBWF  4D,W
00382:  BNZ   0388
00384:  MOVF   48,W
00386:  SUBWF  4C,W
00388:  BNC   03A8
0038A:  MOVF   48,W
0038C:  SUBWF  4C,F
0038E:  MOVF   49,W
00390:  BTFSS  FD8.0
00392:  INCFSZ 49,W
00394:  SUBWF  4D,F
00396:  MOVF   4A,W
00398:  BTFSS  FD8.0
0039A:  INCFSZ 4A,W
0039C:  SUBWF  4E,F
0039E:  MOVF   4B,W
003A0:  BTFSS  FD8.0
003A2:  INCFSZ 4B,W
003A4:  SUBWF  4F,F
003A6:  BSF    FD8.0
003A8:  RLCF   00,F
003AA:  RLCF   01,F
003AC:  RLCF   02,F
003AE:  RLCF   03,F
003B0:  DECFSZ 50,F
003B2:  BRA    0360
003B4:  MOVFF  4C,FEF
003B8:  MOVFF  4D,FEC
003BC:  MOVFF  4E,FEC
003C0:  MOVFF  4F,FEC
003C4:  RETURN 0
*
00638:  ADDWF  FE8,W
0063A:  CLRF   FF7
0063C:  RLCF   FF7,F
0063E:  ADDLW  59
00640:  MOVWF  FF6
00642:  MOVLW  06
00644:  ADDWFC FF7,F
00646:  MOVLW  00
00648:  MOVWF  FF8
0064A:  MOVWF  FFB
0064C:  TBLRD*-
0064E:  MOVF   FF5,W
00650:  MOVWF  FFA
00652:  TBLRD*
00654:  MOVF   FF5,W
00656:  MOVWF  FF9
00658:  DATA CA,04
0065A:  DATA 06,05
0065C:  DATA 6C,05
0065E:  DATA D2,05
*
00714:  MOVF   3F,W
00716:  XORWF  40,W
00718:  ANDLW  80
0071A:  MOVWF  42
0071C:  BTFSS  3F.7
0071E:  BRA    0724
00720:  COMF   3F,F
00722:  INCF   3F,F
00724:  BTFSS  40.7
00726:  BRA    072C
00728:  COMF   40,F
0072A:  INCF   40,F
0072C:  MOVF   40,W
0072E:  CLRF   01
00730:  SUBWF  3F,W
00732:  BC    073A
00734:  MOVFF  3F,00
00738:  BRA    0752
0073A:  CLRF   00
0073C:  MOVLW  08
0073E:  MOVWF  41
00740:  RLCF   3F,F
00742:  RLCF   00,F
00744:  MOVF   40,W
00746:  SUBWF  00,W
00748:  BTFSC  FD8.0
0074A:  MOVWF  00
0074C:  RLCF   01,F
0074E:  DECFSZ 41,F
00750:  BRA    0740
00752:  BTFSS  42.7
00754:  BRA    075A
00756:  COMF   01,F
00758:  INCF   01,F
0075A:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
000F4:  CLRF   FEA
000F6:  MOVLW  40
000F8:  MOVWF  FE9
000FA:  MOVF   FEF,W
000FC:  BZ    0118
000FE:  MOVLW  06
00100:  MOVWF  01
00102:  CLRF   00
00104:  DECFSZ 00,F
00106:  BRA    0104
00108:  DECFSZ 01,F
0010A:  BRA    0102
0010C:  MOVLW  7B
0010E:  MOVWF  00
00110:  DECFSZ 00,F
00112:  BRA    0110
00114:  DECFSZ FEF,F
00116:  BRA    00FE
00118:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
00174:  MOVF   F66,W
00176:  MOVFF  22,F66
0017A:  RRCF   F64,W
0017C:  BNC   017A
0017E:  MOVF   F66,W
00180:  MOVFF  21,F66
00184:  RRCF   F64,W
00186:  BNC   0184
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
00188:  MOVF   F66,W
0018A:  MOVFF  20,F66
0018E:  RRCF   F64,W
00190:  BNC   018E
00192:  MOVF   F66,W
00194:  MOVFF  1F,F66
00198:  RRCF   F64,W
0019A:  BNC   0198
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0019C:  BCF    F95.5
0019E:  BSF    F8C.5
001A0:  BCF    F95.5
001A2:  BCF    F8C.5
....................      return OK;
001A4:  MOVLW  00
001A6:  MOVWF  01
001A8:  GOTO   02B4 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
001AC:  MOVF   F66,W
001AE:  MOVFF  27,F66
001B2:  RRCF   F64,W
001B4:  BNC   01B2
001B6:  MOVF   F66,W
001B8:  MOVFF  28,F66
001BC:  RRCF   F64,W
001BE:  BNC   01BC
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
001C0:  MOVF   F66,W
001C2:  MOVFF  29,F66
001C6:  RRCF   F64,W
001C8:  BNC   01C6
001CA:  MOVF   F66,W
001CC:  MOVFF  2A,F66
001D0:  RRCF   F64,W
001D2:  BNC   01D0
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
001D4:  MOVF   F66,W
001D6:  MOVFF  23,F66
001DA:  RRCF   F64,W
001DC:  BNC   01DA
001DE:  MOVF   F66,W
001E0:  MOVFF  24,F66
001E4:  RRCF   F64,W
001E6:  BNC   01E4
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
001E8:  MOVF   F66,W
001EA:  MOVFF  25,F66
001EE:  RRCF   F64,W
001F0:  BNC   01EE
001F2:  MOVF   F66,W
001F4:  MOVFF  26,F66
001F8:  RRCF   F64,W
001FA:  BNC   01F8
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
001FC:  BCF    F95.7
001FE:  BSF    F8C.7
00200:  BCF    F95.7
00202:  BCF    F8C.7
....................       delay_ms(8);
00204:  MOVLW  08
00206:  MOVWF  40
00208:  RCALL  00F4
....................       return OK;
0020A:  MOVLW  00
0020C:  MOVWF  01
0020E:  GOTO   02B6 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
00212:  CLRF   3E
00214:  MOVF   3E,W
00216:  SUBLW  07
00218:  BNC   026C
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
0021A:  CLRF   03
0021C:  MOVF   3E,W
0021E:  ADDLW  2B
00220:  MOVWF  FE9
00222:  MOVLW  00
00224:  ADDWFC 03,W
00226:  MOVWF  FEA
00228:  MOVFF  FEF,F8D
0022C:  CLRF   F96
0022E:  MOVLW  80
00230:  MOVWF  3F
00232:  MOVF   3E,W
00234:  MOVWF  01
00236:  BZ    0240
00238:  BCF    FD8.0
0023A:  RRCF   3F,F
0023C:  DECFSZ 01,F
0023E:  BRA    0238
00240:  MOVF   F66,W
00242:  MOVFF  3F,F66
00246:  RRCF   F64,W
00248:  BNC   0246
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0024A:  BCF    F92.5
0024C:  BSF    F89.5
0024E:  BCF    F92.5
00250:  BCF    F89.5
....................             delay_ms(1);
00252:  MOVLW  01
00254:  MOVWF  40
00256:  RCALL  00F4
....................             spi_write2(0);
00258:  MOVF   F66,W
0025A:  CLRF   F66
0025C:  RRCF   F64,W
0025E:  BNC   025C
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
00260:  BCF    F92.5
00262:  BSF    F89.5
00264:  BCF    F92.5
00266:  BCF    F89.5
00268:  INCF   3E,F
0026A:  BRA    0214
....................       }
....................       return OK;
0026C:  MOVLW  00
0026E:  MOVWF  01
00270:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
....................         else             output_low(pin_b7);
....................         if(mq[cot]&0x40) output_float(pin_b6);
....................         else             output_low(pin_b6);
....................         if(mq[cot]&0x20) output_float(pin_b5);
....................         else             output_low(pin_b5);
....................         if(mq[cot]&0x10) output_float(pin_b4);
....................         else             output_low(pin_b4);
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
....................     }
....................     return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
....................     output_lcd(lcd_ins_hthi);
....................     return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
00272:  BCF    F97.7
00274:  BCF    F8E.7
00276:  MOVLW  00
00278:  MOVWF  01
0027A:  GOTO   02BA (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
0027E:  BCF    F97.6
00280:  BCF    F8E.6
00282:  MOVLW  00
00284:  MOVWF  01
00286:  GOTO   02BC (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
0028A:  BRA    011A
....................       set_tris_a(0xdf);
0028C:  MOVLW  DF
0028E:  MOVWF  F92
....................       set_tris_d(0x04);
00290:  MOVLW  04
00292:  MOVWF  F95
....................       set_tris_e(0);
00294:  MOVLW  00
00296:  MOVWF  F96
....................       set_tris_f(0);
00298:  MOVWF  F97
....................       set_tris_g(0);
0029A:  MOVWF  F98
....................       set_tris_c(0xff);
0029C:  MOVLW  FF
0029E:  MOVWF  F94
....................       port_b_pullups(0xFF);
002A0:  BCF    FF1.7
....................       output_g(0);
002A2:  CLRF   F98
002A4:  CLRF   F8F
....................       output_high(pin_g0);
002A6:  BCF    F98.0
002A8:  BSF    F8F.0
....................       led32.ledx32=0;
002AA:  CLRF   22
002AC:  CLRF   21
002AE:  CLRF   20
002B0:  CLRF   1F
....................       led32_display();
002B2:  BRA    0174
....................       d7seg_display();
002B4:  BRA    01AC
....................       s7seg_display();
002B6:  RCALL  0212
....................       buzzer_off(); 
002B8:  BRA    0272
....................       triac_2_off();
002BA:  BRA    027E
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
002BC:  MOVLW  BD
002BE:  MOVWF  FB1
....................       return OK;
002C0:  MOVLW  00
002C2:  MOVWF  01
002C4:  GOTO   07B4 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
0011A:  BSF    3E.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
0011C:  CLRF   3F
0011E:  MOVF   3F,W
00120:  SUBLW  09
00122:  BNC   014C
....................       {     output_bit(pin_d0,tt);
00124:  BTFSC  3E.0
00126:  BRA    012C
00128:  BCF    F8C.0
0012A:  BRA    012E
0012C:  BSF    F8C.0
0012E:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
00130:  BSF    F95.1
00132:  MOVLW  00
00134:  BTFSC  F83.1
00136:  MOVLW  01
00138:  MOVWF  41
0013A:  MOVLW  00
0013C:  BTFSC  3E.0
0013E:  MOVLW  01
00140:  SUBWF  41,W
00142:  BTFSS  FD8.2
00144:  BRA    014C
....................             tt=!tt;
00146:  BTG    3E.0
00148:  INCF   3F,F
0014A:  BRA    011E
....................       }
....................       if(n<10) while(true)
0014C:  MOVF   3F,W
0014E:  SUBLW  09
00150:  BNC   016C
....................       {    output_d(0xff);
00152:  CLRF   F95
00154:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
00156:  CLRF   F93
00158:  SETF   F8A
0015A:  MOVLW  0A
0015C:  MOVWF  40
0015E:  RCALL  00F4
....................            output_b(0); delay_ms(10);
00160:  CLRF   F93
00162:  CLRF   F8A
00164:  MOVLW  0A
00166:  MOVWF  40
00168:  RCALL  00F4
0016A:  BRA    0152
....................       }
....................       return OK;
0016C:  MOVLW  00
0016E:  MOVWF  01
00170:  GOTO   028C (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
003C6:  MOVF   FB2,W
003C8:  MOVFF  FB3,03
003CC:  ADDWF  1B,F
003CE:  MOVF   FB3,W
003D0:  ADDWFC 1C,F
003D2:  MOVLW  00
003D4:  ADDWFC 1D,F
003D6:  ADDWFC 1E,F
003D8:  CLRF   FB3
003DA:  MOVLW  02
003DC:  MOVWF  FB2
003DE:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
003E0:  BTFSS  FA1.1
003E2:  BRA    03EC
003E4:  MOVLW  01
003E6:  ADDWF  1D,F
003E8:  MOVLW  00
003EA:  ADDWFC 1E,F
003EC:  BCF    FA1.1
....................       return delay.timeline/625;
003EE:  BCF    FD8.1
003F0:  MOVFF  1E,47
003F4:  MOVFF  1D,46
003F8:  MOVFF  1C,45
003FC:  MOVFF  1B,44
00400:  CLRF   4B
00402:  CLRF   4A
00404:  MOVLW  02
00406:  MOVWF  49
00408:  MOVLW  71
0040A:  MOVWF  48
0040C:  RCALL  0338
0040E:  MOVFF  01,02
00412:  MOVFF  00,01
00416:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
00418:  MOVF   FB2,W
0041A:  MOVFF  FB3,03
0041E:  ADDWF  1B,F
00420:  MOVF   FB3,W
00422:  ADDWFC 1C,F
00424:  MOVLW  00
00426:  ADDWFC 1D,F
00428:  ADDWFC 1E,F
0042A:  CLRF   FB3
0042C:  MOVLW  02
0042E:  MOVWF  FB2
00430:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
00432:  BTFSS  FA1.1
00434:  BRA    043E
00436:  MOVLW  01
00438:  ADDWF  1D,F
0043A:  MOVLW  00
0043C:  ADDWFC 1E,F
0043E:  BCF    FA1.1
....................       tam = delay.timeline/625;
00440:  BCF    FD8.1
00442:  MOVFF  1E,47
00446:  MOVFF  1D,46
0044A:  MOVFF  1C,45
0044E:  MOVFF  1B,44
00452:  CLRF   4B
00454:  CLRF   4A
00456:  MOVLW  02
00458:  MOVWF  49
0045A:  MOVLW  71
0045C:  MOVWF  48
0045E:  RCALL  0338
00460:  MOVFF  01,43
00464:  MOVFF  00,42
....................       if(t<=tam) return tam-t;
00468:  MOVF   41,W
0046A:  SUBWF  43,W
0046C:  BNC   048C
0046E:  BNZ   0476
00470:  MOVF   40,W
00472:  SUBWF  42,W
00474:  BNC   048C
00476:  MOVF   40,W
00478:  SUBWF  42,W
0047A:  MOVWF  00
0047C:  MOVF   41,W
0047E:  SUBWFB 43,W
00480:  MOVWF  03
00482:  MOVFF  00,01
00486:  MOVWF  02
00488:  BRA    04A8
0048A:  BRA    04A8
....................       else       return 0xffff-t + tam;
0048C:  MOVLW  FF
0048E:  BSF    FD8.0
00490:  SUBFWB 40,W
00492:  MOVWF  44
00494:  MOVLW  FF
00496:  SUBFWB 41,W
00498:  MOVWF  45
0049A:  MOVF   42,W
0049C:  ADDWF  44,W
0049E:  MOVWF  01
004A0:  MOVF   43,W
004A2:  ADDWFC 45,W
004A4:  MOVWF  03
004A6:  MOVWF  02
004A8:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
004AA:  MOVFF  3E,40
004AE:  MOVLW  01
004B0:  MOVWF  41
004B2:  MOVLW  0F
004B4:  MOVWF  43
004B6:  MOVLW  92
004B8:  MOVWF  42
004BA:  RCALL  02C8
....................       switch (step)
004BC:  MOVF   37,W
004BE:  ADDLW  FC
004C0:  BTFSC  FD8.0
004C2:  BRA    0632
004C4:  ADDLW  04
004C6:  GOTO   0638
....................       {
....................           case 0:
....................                  if(input(pin)==0)
004CA:  MOVFF  3E,40
004CE:  MOVLW  01
004D0:  MOVWF  41
004D2:  MOVLW  0F
004D4:  MOVWF  43
004D6:  MOVLW  92
004D8:  MOVWF  42
004DA:  RCALL  02C8
004DC:  MOVFF  3E,40
004E0:  MOVLW  0F
004E2:  MOVWF  42
004E4:  MOVLW  80
004E6:  MOVWF  41
004E8:  RCALL  0306
004EA:  BTFSC  01.0
004EC:  BRA    0504
....................                   {
....................                         oldpin   = pin;
004EE:  MOVFF  3F,34
004F2:  MOVFF  3E,33
....................                         t        = delay_start();
004F6:  RCALL  03C6
004F8:  MOVFF  02,36
004FC:  MOVFF  01,35
....................                         step     = 1;
00500:  MOVLW  01
00502:  MOVWF  37
....................                   }
....................                  break;
00504:  BRA    0632
....................            case 1:
....................                  if(input(oldpin))step = 0;
00506:  MOVFF  33,40
0050A:  MOVLW  01
0050C:  MOVWF  41
0050E:  MOVLW  0F
00510:  MOVWF  43
00512:  MOVLW  92
00514:  MOVWF  42
00516:  RCALL  02C8
00518:  MOVFF  33,40
0051C:  MOVLW  0F
0051E:  MOVWF  42
00520:  MOVLW  80
00522:  MOVWF  41
00524:  RCALL  0306
00526:  BTFSS  01.0
00528:  BRA    052E
0052A:  CLRF   37
0052C:  BRA    056A
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
0052E:  MOVF   33,W
00530:  SUBWF  3E,W
00532:  BNZ   056A
00534:  MOVF   34,W
00536:  SUBWF  3F,W
00538:  BNZ   056A
0053A:  MOVFF  36,41
0053E:  MOVFF  35,40
00542:  RCALL  0418
00544:  MOVFF  02,41
00548:  MOVFF  01,40
0054C:  MOVF   41,F
0054E:  BNZ   0556
00550:  MOVF   40,W
00552:  SUBLW  1D
00554:  BC    056A
....................                    {
....................                       t    = delay_start();
00556:  RCALL  03C6
00558:  MOVFF  02,36
0055C:  MOVFF  01,35
....................                       step = 2;
00560:  MOVLW  02
00562:  MOVWF  37
....................                       return OK;
00564:  MOVLW  00
00566:  MOVWF  01
00568:  BRA    0636
....................                    }
....................                  break;
0056A:  BRA    0632
....................             case 2:
....................                  if(input(oldpin))step = 0;
0056C:  MOVFF  33,40
00570:  MOVLW  01
00572:  MOVWF  41
00574:  MOVLW  0F
00576:  MOVWF  43
00578:  MOVLW  92
0057A:  MOVWF  42
0057C:  RCALL  02C8
0057E:  MOVFF  33,40
00582:  MOVLW  0F
00584:  MOVWF  42
00586:  MOVLW  80
00588:  MOVWF  41
0058A:  RCALL  0306
0058C:  BTFSS  01.0
0058E:  BRA    0594
00590:  CLRF   37
00592:  BRA    05D0
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
00594:  MOVF   33,W
00596:  SUBWF  3E,W
00598:  BNZ   05D0
0059A:  MOVF   34,W
0059C:  SUBWF  3F,W
0059E:  BNZ   05D0
005A0:  MOVFF  36,41
005A4:  MOVFF  35,40
005A8:  RCALL  0418
005AA:  MOVFF  02,41
005AE:  MOVFF  01,40
005B2:  MOVF   02,W
005B4:  SUBLW  00
005B6:  BC    05D0
005B8:  XORLW  FF
005BA:  BNZ   05C2
005BC:  MOVF   40,W
005BE:  SUBLW  F3
005C0:  BC    05D0
....................                    {
....................                        t        = delay_start();
005C2:  RCALL  03C6
005C4:  MOVFF  02,36
005C8:  MOVFF  01,35
....................                        step     = 3;
005CC:  MOVLW  03
005CE:  MOVWF  37
....................                    } 
....................                  break;
005D0:  BRA    0632
....................             case 3:
....................                    if(input(oldpin))step = 0; 
005D2:  MOVFF  33,40
005D6:  MOVLW  01
005D8:  MOVWF  41
005DA:  MOVLW  0F
005DC:  MOVWF  43
005DE:  MOVLW  92
005E0:  MOVWF  42
005E2:  RCALL  02C8
005E4:  MOVFF  33,40
005E8:  MOVLW  0F
005EA:  MOVWF  42
005EC:  MOVLW  80
005EE:  MOVWF  41
005F0:  RCALL  0306
005F2:  BTFSS  01.0
005F4:  BRA    05FA
005F6:  CLRF   37
005F8:  BRA    0632
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
005FA:  MOVF   33,W
005FC:  SUBWF  3E,W
005FE:  BNZ   0632
00600:  MOVF   34,W
00602:  SUBWF  3F,W
00604:  BNZ   0632
00606:  MOVFF  36,41
0060A:  MOVFF  35,40
0060E:  RCALL  0418
00610:  MOVFF  02,41
00614:  MOVFF  01,40
00618:  MOVF   41,F
0061A:  BNZ   0622
0061C:  MOVF   40,W
0061E:  SUBLW  63
00620:  BC    0632
....................                        {
....................                           t  = delay_start();
00622:  RCALL  03C6
00624:  MOVFF  02,36
00628:  MOVFF  01,35
....................                           return OK;
0062C:  MOVLW  00
0062E:  MOVWF  01
00630:  BRA    0636
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
00632:  MOVLW  02
00634:  MOVWF  01
00636:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... signed int8 gio=0, phut=0, giay=0, bdn=0, cdo=0,i;
.................... void kt_nutnhan()
.................... {
....................    if(inputcd(mod)==0)
*
00660:  MOVLW  7C
00662:  MOVWF  3F
00664:  MOVLW  0F
00666:  MOVWF  3E
00668:  RCALL  04AA
0066A:  MOVF   01,F
0066C:  BNZ   067C
....................    {
....................       cdo++;
0066E:  INCF   3C,F
....................       if(cdo>=4) cdo=0;
00670:  BTFSC  3C.7
00672:  BRA    067C
00674:  MOVF   3C,W
00676:  SUBLW  03
00678:  BC    067C
0067A:  CLRF   3C
....................    }
....................    if(inputcd(up)==0)
0067C:  MOVLW  7C
0067E:  MOVWF  3F
00680:  MOVLW  0C
00682:  MOVWF  3E
00684:  RCALL  04AA
00686:  MOVF   01,F
00688:  BNZ   06CA
....................    {
....................       if(cdo==1) 
0068A:  DECFSZ 3C,W
0068C:  BRA    069E
....................       {
....................          giay++;
0068E:  INCF   3A,F
....................          if(giay>=60) giay=0;
00690:  BTFSC  3A.7
00692:  BRA    069C
00694:  MOVF   3A,W
00696:  SUBLW  3B
00698:  BC    069C
0069A:  CLRF   3A
....................       }
0069C:  BRA    06CA
....................       else if(cdo==2) 
0069E:  MOVF   3C,W
006A0:  SUBLW  02
006A2:  BNZ   06B4
....................       {
....................          phut++;
006A4:  INCF   39,F
....................          if(phut>=60) phut=0;
006A6:  BTFSC  39.7
006A8:  BRA    06B2
006AA:  MOVF   39,W
006AC:  SUBLW  3B
006AE:  BC    06B2
006B0:  CLRF   39
....................       }
006B2:  BRA    06CA
....................       else if(cdo==3) 
006B4:  MOVF   3C,W
006B6:  SUBLW  03
006B8:  BNZ   06CA
....................       {
....................          gio++;
006BA:  INCF   38,F
....................          if(gio>=13) gio=1;
006BC:  BTFSC  38.7
006BE:  BRA    06CA
006C0:  MOVF   38,W
006C2:  SUBLW  0C
006C4:  BC    06CA
006C6:  MOVLW  01
006C8:  MOVWF  38
....................       }
....................    }
....................    if(inputcd(dw)==0)
006CA:  MOVLW  7C
006CC:  MOVWF  3F
006CE:  MOVLW  0D
006D0:  MOVWF  3E
006D2:  RCALL  04AA
006D4:  MOVF   01,F
006D6:  BNZ   0710
....................    {
....................       if(cdo==1) 
006D8:  DECFSZ 3C,W
006DA:  BRA    06E8
....................       {
....................          giay--;
006DC:  DECF   3A,F
....................          if(giay<0) giay=59;
006DE:  BTFSS  3A.7
006E0:  BRA    06E6
006E2:  MOVLW  3B
006E4:  MOVWF  3A
....................       }
006E6:  BRA    0710
....................       else if(cdo==2) 
006E8:  MOVF   3C,W
006EA:  SUBLW  02
006EC:  BNZ   06FA
....................       {
....................          phut--;
006EE:  DECF   39,F
....................          if(phut<0) phut=59;
006F0:  BTFSS  39.7
006F2:  BRA    06F8
006F4:  MOVLW  3B
006F6:  MOVWF  39
....................       }
006F8:  BRA    0710
....................       else if(cdo==3) 
006FA:  MOVF   3C,W
006FC:  SUBLW  03
006FE:  BNZ   0710
....................       {
....................          gio--;
00700:  DECF   38,F
....................          if(gio<=0) gio=12;
00702:  BTFSC  38.7
00704:  BRA    070C
00706:  MOVF   38,W
00708:  SUBLW  00
0070A:  BNC   0710
0070C:  MOVLW  0C
0070E:  MOVWF  38
....................       }
....................    }
00710:  GOTO   07CA (RETURN)
.................... }
.................... void main()
*
0075C:  CLRF   FF8
0075E:  BCF    FD0.7
00760:  BSF    07.7
00762:  BCF    F63.5
00764:  MOVLW  00
00766:  MOVWF  F64
00768:  MOVLW  20
0076A:  MOVWF  F63
0076C:  BCF    F95.4
0076E:  BSF    F95.5
00770:  BCF    F95.6
00772:  CLRF   38
00774:  CLRF   39
00776:  CLRF   3A
00778:  CLRF   3B
0077A:  CLRF   3C
0077C:  MOVF   FC1,W
0077E:  ANDLW  C0
00780:  IORLW  0F
00782:  MOVWF  FC1
00784:  MOVLW  07
00786:  MOVWF  FB4
00788:  SETF   23
0078A:  SETF   24
0078C:  SETF   25
0078E:  SETF   26
00790:  SETF   27
00792:  SETF   28
00794:  SETF   29
00796:  SETF   2A
00798:  SETF   2B
0079A:  SETF   2C
0079C:  SETF   2D
0079E:  SETF   2E
007A0:  SETF   2F
007A2:  SETF   30
007A4:  SETF   31
007A6:  SETF   32
007A8:  SETF   33
007AA:  SETF   34
007AC:  CLRF   35
007AE:  CLRF   36
007B0:  CLRF   37
.................... {
....................    system_init();
007B2:  BRA    028A
....................    setup_timer_1(T1_INTERNAL| T1_DIV_BY_8);
007B4:  MOVLW  B5
007B6:  MOVWF  FCD
....................    set_timer1(3036);
007B8:  MOVLW  0B
007BA:  MOVWF  FCF
007BC:  MOVLW  DC
007BE:  MOVWF  FCE
007C0:  NOP   
....................    enable_interrupts(int_timer1);
007C2:  BSF    F9D.0
....................    enable_interrupts(global);
007C4:  MOVLW  C0
007C6:  IORWF  FF2,F
....................    while(true)
....................    {
....................       kt_nutnhan();
007C8:  BRA    0660
....................       if(bdn>=10)
007CA:  BTFSC  3B.7
007CC:  BRA    0804
007CE:  MOVF   3B,W
007D0:  SUBLW  09
007D2:  BC    0804
....................       {
....................          bdn=bdn-10;
007D4:  MOVLW  0A
007D6:  SUBWF  3B,F
....................          giay++;
007D8:  INCF   3A,F
....................          if(giay>=60) 
007DA:  BTFSC  3A.7
007DC:  BRA    0804
007DE:  MOVF   3A,W
007E0:  SUBLW  3B
007E2:  BC    0804
....................          {
....................             giay=0;
007E4:  CLRF   3A
....................             phut++;
007E6:  INCF   39,F
....................             if(phut>=60)
007E8:  BTFSC  39.7
007EA:  BRA    0804
007EC:  MOVF   39,W
007EE:  SUBLW  3B
007F0:  BC    0804
....................             {
....................                phut=0;
007F2:  CLRF   39
....................                gio++;
007F4:  INCF   38,F
....................                if(gio>=13) gio=1;
007F6:  BTFSC  38.7
007F8:  BRA    0804
007FA:  MOVF   38,W
007FC:  SUBLW  0C
007FE:  BC    0804
00800:  MOVLW  01
00802:  MOVWF  38
....................             }
....................          }
....................       }
....................       s7seg.led[0]=m7d[giay%10];
00804:  MOVFF  3A,3F
00808:  MOVLW  0A
0080A:  MOVWF  40
0080C:  RCALL  0714
0080E:  CLRF   03
00810:  MOVF   00,W
00812:  BTFSC  00.7
00814:  DECF   03,F
00816:  RCALL  00BE
00818:  MOVWF  2B
....................       s7seg.led[1]=m7d[giay/10%10];
0081A:  MOVFF  3A,3F
0081E:  MOVLW  0A
00820:  MOVWF  40
00822:  RCALL  0714
00824:  MOVFF  01,3F
00828:  MOVLW  0A
0082A:  MOVWF  40
0082C:  RCALL  0714
0082E:  CLRF   03
00830:  MOVF   00,W
00832:  BTFSC  00.7
00834:  DECF   03,F
00836:  RCALL  00BE
00838:  MOVWF  2C
....................       s7seg.led[2]=0xff-64;
0083A:  MOVLW  BF
0083C:  MOVWF  2D
....................       s7seg.led[3]=m7d[phut%10];
0083E:  MOVFF  39,3F
00842:  MOVLW  0A
00844:  MOVWF  40
00846:  RCALL  0714
00848:  CLRF   03
0084A:  MOVF   00,W
0084C:  BTFSC  00.7
0084E:  DECF   03,F
00850:  RCALL  00BE
00852:  MOVWF  2E
....................       s7seg.led[4]=m7d[phut/10%10];
00854:  MOVFF  39,3F
00858:  MOVLW  0A
0085A:  MOVWF  40
0085C:  RCALL  0714
0085E:  MOVFF  01,3F
00862:  MOVLW  0A
00864:  MOVWF  40
00866:  RCALL  0714
00868:  CLRF   03
0086A:  MOVF   00,W
0086C:  BTFSC  00.7
0086E:  DECF   03,F
00870:  RCALL  00BE
00872:  MOVWF  2F
....................       s7seg.led[5]=0xff-64;
00874:  MOVLW  BF
00876:  MOVWF  30
....................       s7seg.led[6]=m7d[gio%10];
00878:  MOVFF  38,3F
0087C:  MOVLW  0A
0087E:  MOVWF  40
00880:  RCALL  0714
00882:  CLRF   03
00884:  MOVF   00,W
00886:  BTFSC  00.7
00888:  DECF   03,F
0088A:  RCALL  00BE
0088C:  MOVWF  31
....................       s7seg.led[7]=m7d[gio/10%10];
0088E:  MOVFF  38,3F
00892:  MOVLW  0A
00894:  MOVWF  40
00896:  RCALL  0714
00898:  MOVFF  01,3F
0089C:  MOVLW  0A
0089E:  MOVWF  40
008A0:  RCALL  0714
008A2:  CLRF   03
008A4:  MOVF   00,W
008A6:  BTFSC  00.7
008A8:  DECF   03,F
008AA:  RCALL  00BE
008AC:  MOVWF  32
....................       if(cdo==1) s7seg.led[0]=m7d[giay%10]-128;
008AE:  DECFSZ 3C,W
008B0:  BRA    08CC
008B2:  MOVFF  3A,3F
008B6:  MOVLW  0A
008B8:  MOVWF  40
008BA:  RCALL  0714
008BC:  CLRF   03
008BE:  MOVF   00,W
008C0:  BTFSC  00.7
008C2:  DECF   03,F
008C4:  CALL   00BE
008C8:  ADDLW  80
008CA:  MOVWF  2B
....................       if(cdo==2) s7seg.led[3]=m7d[phut%10]-128;
008CC:  MOVF   3C,W
008CE:  SUBLW  02
008D0:  BNZ   08EC
008D2:  MOVFF  39,3F
008D6:  MOVLW  0A
008D8:  MOVWF  40
008DA:  RCALL  0714
008DC:  CLRF   03
008DE:  MOVF   00,W
008E0:  BTFSC  00.7
008E2:  DECF   03,F
008E4:  CALL   00BE
008E8:  ADDLW  80
008EA:  MOVWF  2E
....................       if(cdo==3) s7seg.led[6]=m7d[gio%10]-128;
008EC:  MOVF   3C,W
008EE:  SUBLW  03
008F0:  BNZ   090C
008F2:  MOVFF  38,3F
008F6:  MOVLW  0A
008F8:  MOVWF  40
008FA:  RCALL  0714
008FC:  CLRF   03
008FE:  MOVF   00,W
00900:  BTFSC  00.7
00902:  DECF   03,F
00904:  CALL   00BE
00908:  ADDLW  80
0090A:  MOVWF  31
....................       s7seg_display();
0090C:  RCALL  0212
0090E:  BRA    07C8
....................    }
.................... }
.................... #int_timer1
.................... void ngat_timer1()
00910:  SLEEP 
.................... {
....................    set_timer1(3036);
*
000E2:  MOVLW  0B
000E4:  MOVWF  FCF
000E6:  MOVLW  DC
000E8:  MOVWF  FCE
000EA:  NOP   
....................    bdn++;
000EC:  INCF   3B,F
000EE:  BCF    F9E.0
000F0:  GOTO   0068
.................... }

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
