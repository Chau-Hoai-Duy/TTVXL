CCS PCH C Compiler, Version 5.101, 43599               14-Feb-23 15:40

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_422_DEM_XUNG_T0_QUANG_CAO_32LED.lst

               ROM used:   2782 bytes (8%)
                           Largest free fragment is 29986
               RAM used:   48 (2%) at main() level
                           68 (3%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   09F0
.................... #define   BOARD     D501 
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
.................... #ifndef    __TV_D501_TH_C__
.................... #define    __TV_D501_TH_C__
.................... #include<TV_D501_TH.h>
.................... #ifndef    __TV_D501_TH_H__
.................... #define    __TV_D501_TH_H__
.................... #include     <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA C0,F9
0016:  DATA A4,B0
0018:  DATA 99,92
001A:  DATA 82,F8
001C:  DATA 80,90
001E:  DATA 88,83
0020:  DATA C6,A1
0022:  DATA 86,7F
*
0282:  CLRF   01
0284:  CLRF   02
0286:  CLRF   00
0288:  CLRF   03
028A:  MOVF   38,W
028C:  BNZ   0292
028E:  MOVF   37,W
0290:  BZ    02C2
0292:  MOVLW  10
0294:  MOVWF  39
0296:  BCF    FD8.0
0298:  RLCF   35,F
029A:  RLCF   36,F
029C:  RLCF   00,F
029E:  RLCF   03,F
02A0:  MOVF   38,W
02A2:  SUBWF  03,W
02A4:  BNZ   02AA
02A6:  MOVF   37,W
02A8:  SUBWF  00,W
02AA:  BNC   02BA
02AC:  MOVF   37,W
02AE:  SUBWF  00,F
02B0:  BTFSS  FD8.0
02B2:  DECF   03,F
02B4:  MOVF   38,W
02B6:  SUBWF  03,F
02B8:  BSF    FD8.0
02BA:  RLCF   01,F
02BC:  RLCF   02,F
02BE:  DECFSZ 39,F
02C0:  BRA    0296
02C2:  RETURN 0
*
0338:  MOVF   32,W
033A:  ANDLW  07
033C:  MOVWF  00
033E:  RRCF   32,W
0340:  MOVWF  01
0342:  RRCF   01,F
0344:  RRCF   01,F
0346:  MOVLW  1F
0348:  ANDWF  01,F
034A:  MOVF   01,W
034C:  ADDWF  34,W
034E:  MOVWF  FE9
0350:  MOVLW  00
0352:  ADDWFC 35,W
0354:  MOVWF  FEA
0356:  CLRF   01
0358:  INCF   01,F
035A:  INCF   00,F
035C:  BRA    0360
035E:  RLCF   01,F
0360:  DECFSZ 00,F
0362:  BRA    035E
0364:  MOVF   33,F
0366:  BZ    036E
0368:  MOVF   01,W
036A:  IORWF  FEF,F
036C:  BRA    0374
036E:  COMF   01,F
0370:  MOVF   01,W
0372:  ANDWF  FEF,F
0374:  RETURN 0
0376:  MOVF   32,W
0378:  ANDLW  07
037A:  MOVWF  00
037C:  RRCF   32,W
037E:  MOVWF  01
0380:  RRCF   01,F
0382:  RRCF   01,F
0384:  MOVLW  1F
0386:  ANDWF  01,F
0388:  MOVF   01,W
038A:  ADDWF  33,W
038C:  MOVWF  FE9
038E:  MOVLW  00
0390:  ADDWFC 34,W
0392:  MOVWF  FEA
0394:  MOVFF  FEF,01
0398:  INCF   00,F
039A:  BRA    039E
039C:  RRCF   01,F
039E:  DECFSZ 00,F
03A0:  BRA    039C
03A2:  MOVLW  01
03A4:  ANDWF  01,F
03A6:  RETURN 0
03A8:  BTFSC  FD8.1
03AA:  BRA    03B2
03AC:  CLRF   FEA
03AE:  MOVLW  3E
03B0:  MOVWF  FE9
03B2:  CLRF   00
03B4:  CLRF   01
03B6:  CLRF   02
03B8:  CLRF   03
03BA:  CLRF   3E
03BC:  CLRF   3F
03BE:  CLRF   40
03C0:  CLRF   41
03C2:  MOVF   3D,W
03C4:  IORWF  3C,W
03C6:  IORWF  3B,W
03C8:  IORWF  3A,W
03CA:  BZ    0424
03CC:  MOVLW  20
03CE:  MOVWF  42
03D0:  BCF    FD8.0
03D2:  RLCF   36,F
03D4:  RLCF   37,F
03D6:  RLCF   38,F
03D8:  RLCF   39,F
03DA:  RLCF   3E,F
03DC:  RLCF   3F,F
03DE:  RLCF   40,F
03E0:  RLCF   41,F
03E2:  MOVF   3D,W
03E4:  SUBWF  41,W
03E6:  BNZ   03F8
03E8:  MOVF   3C,W
03EA:  SUBWF  40,W
03EC:  BNZ   03F8
03EE:  MOVF   3B,W
03F0:  SUBWF  3F,W
03F2:  BNZ   03F8
03F4:  MOVF   3A,W
03F6:  SUBWF  3E,W
03F8:  BNC   0418
03FA:  MOVF   3A,W
03FC:  SUBWF  3E,F
03FE:  MOVF   3B,W
0400:  BTFSS  FD8.0
0402:  INCFSZ 3B,W
0404:  SUBWF  3F,F
0406:  MOVF   3C,W
0408:  BTFSS  FD8.0
040A:  INCFSZ 3C,W
040C:  SUBWF  40,F
040E:  MOVF   3D,W
0410:  BTFSS  FD8.0
0412:  INCFSZ 3D,W
0414:  SUBWF  41,F
0416:  BSF    FD8.0
0418:  RLCF   00,F
041A:  RLCF   01,F
041C:  RLCF   02,F
041E:  RLCF   03,F
0420:  DECFSZ 42,F
0422:  BRA    03D0
0424:  MOVFF  3E,FEF
0428:  MOVFF  3F,FEC
042C:  MOVFF  40,FEC
0430:  MOVFF  41,FEC
0434:  RETURN 0
*
06A8:  ADDWF  FE8,W
06AA:  CLRF   FF7
06AC:  RLCF   FF7,F
06AE:  ADDLW  C3
06B0:  MOVWF  FF6
06B2:  MOVLW  06
06B4:  ADDWFC FF7,F
06B6:  TBLRD*-
06B8:  MOVF   FF5,W
06BA:  MOVWF  FFA
06BC:  TBLRD*
06BE:  MOVF   FF5,W
06C0:  MOVWF  FF9
06C2:  DATA 3A,05
06C4:  DATA 76,05
06C6:  DATA DC,05
06C8:  DATA 42,06
.................... 
.................... #list
.................... 
.................... #device      adc=10
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use         delay(clock=20000000)
*
00FE:  CLRF   FEA
0100:  MOVLW  32
0102:  MOVWF  FE9
0104:  MOVF   FEF,W
0106:  BZ    0122
0108:  MOVLW  06
010A:  MOVWF  01
010C:  CLRF   00
010E:  DECFSZ 00,F
0110:  BRA    010E
0112:  DECFSZ 01,F
0114:  BRA    010C
0116:  MOVLW  7B
0118:  MOVWF  00
011A:  DECFSZ 00,F
011C:  BRA    011A
011E:  DECFSZ FEF,F
0120:  BRA    0108
0122:  RETURN 0
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... #include     <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit         TIM3IF                 = 0xFA1.1
.................... #bit         SSDO                   = 0xF84.2
.................... #bit         SSCK                   = 0xF84.0
.................... #define      analog_pins            an0_to_an2
.................... #define      lm35a_channel          0
.................... #define      lm35b_channel          1
.................... #define      gp2d12_channel         2
.................... #define      photoresis_channel     3
.................... #define      DCMOTOR_IN1            PIN_c1
.................... #define      TOUCH_PIN              pin_a5
.................... #define      DHT11_PIN              pin_d1
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      SRF04_TRIGER           PIN_E2
.................... #define      soft_i2c_sda           pin_b0
.................... #define      soft_i2c_scl           pin_b1
.................... #define      bt0                    pin_b5
.................... #define      bt1                    pin_b4
.................... #define      bt2                    pin_b3
.................... #define      bt3                    pin_b2
.................... #define      on                     bt0      
.................... #define      off                    bt1
.................... #define      inv                    bt2
.................... #define      up                     bt0    
.................... #define      dw                     bt1
.................... #define      clr                    bt2
.................... #define      mod                    bt3
.................... #define      stop                   bt3
.................... #define      on1                    bt0     
.................... #define      off1                   bt1
.................... #define      on2                    bt2       
.................... #define      off2                   bt3
.................... #define      S7SEG_RCK              pin_d5
.................... #define      LED32_RCK              pin_d4
.................... #define      D7SEG_RCK              pin_d6
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte 
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct 
.................... {
....................       int1      STEP_MOTOR_ENABLE;
....................       int1      STEP_MOTOR_IN1;
....................       int1      STEP_MOTOR_IN2;
....................       int1      STEP_MOTOR_IN3;
....................       int1      STEP_MOTOR_IN4;
....................       int1      DC_MOTOR_ENABLE;
....................       int1      PWRKEY;
....................       int1      NC_PIN1;          
....................       int1      BUZZER;
....................       int1      TRIAC_1;
....................       int1      TRIAC_2;
....................       int1      RELAY_1;
....................       int1      RELAY_2 ;
....................       int1      NC_PIN2 ;  
....................       int1      NC_PIN3;   
....................       int1      NC_PIN4;  
.................... }RBDC_STRUCT;
.................... typedef union
.................... {
....................       RBDC_STRUCT         bit;
....................       unsigned int8       xbyte[2];
.................... }RBDC_UNION;
.................... 
.................... typedef struct 
.................... {
....................     RBDC_UNION           rbdc;
....................     unsigned int8        lcddata; 
....................     unsigned int8        lcdcontrol;
....................     unsigned int8        glcddata;
....................     unsigned int8        glcdcontrol;    
.................... }SYSTEM_VAR_STRUCT;
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0};
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[4];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT;
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on();
.................... result buzzer_off();
.................... result relay_1_on();
.................... result relay_1_off();
.................... result relay_2_on();
.................... result relay_2_off();
.................... result triac_1_on();
.................... result triac_1_off();
.................... result triac_2_on();
.................... result triac_2_off();
.................... result DCMOTOR_ENABLE();
.................... result STEPMOTOR_ENABLE();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... void SSPI_WRITE(unsigned int8 x);
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]);
*
00B2:  MOVFF  11,3A
00B6:  RCALL  0024
00B8:  MOVFF  10,3A
00BC:  RCALL  0024
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]);
00BE:  MOVFF  0F,3A
00C2:  RCALL  0024
00C4:  MOVFF  0E,3A
00C8:  RCALL  0024
....................      output_high(LED32_RCK); output_low(LED32_RCK);
00CA:  BCF    F95.4
00CC:  BSF    F8C.4
00CE:  BCF    F95.4
00D0:  BCF    F8C.4
....................      return OK; 
00D2:  MOVLW  00
00D4:  MOVWF  01
00D6:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]);
00D8:  MOVFF  12,3A
00DC:  RCALL  0024
00DE:  MOVFF  13,3A
00E2:  RCALL  0024
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]);
00E4:  MOVFF  14,3A
00E8:  RCALL  0024
00EA:  MOVFF  15,3A
00EE:  RCALL  0024
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
00F0:  BCF    F95.6
00F2:  BSF    F8C.6
00F4:  BCF    F95.6
00F6:  BCF    F8C.6
....................       return OK;
00F8:  MOVLW  00
00FA:  MOVWF  01
00FC:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1)
*
0124:  MOVLW  80
0126:  MOVWF  30
0128:  CLRF   31
012A:  MOVF   31,W
012C:  SUBLW  07
012E:  BNC   0172
....................       {
....................             SSPI_WRITE(i);
0130:  MOVFF  30,3A
0134:  RCALL  0024
....................             SSPI_WRITE(~s7seg.led[n]);     
0136:  CLRF   03
0138:  MOVF   31,W
013A:  ADDLW  16
013C:  MOVWF  FE9
013E:  MOVLW  00
0140:  ADDWFC 03,W
0142:  MOVWF  FEA
0144:  MOVF   FEF,W
0146:  XORLW  FF
0148:  MOVWF  32
014A:  MOVWF  3A
014C:  RCALL  0024
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
014E:  BCF    F95.5
0150:  BSF    F8C.5
0152:  BCF    F95.5
0154:  BCF    F8C.5
....................             delay_ms(1);
0156:  MOVLW  01
0158:  MOVWF  32
015A:  RCALL  00FE
....................             SSPI_WRITE(~0xff);
015C:  CLRF   3A
015E:  RCALL  0024
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0160:  BCF    F95.5
0162:  BSF    F8C.5
0164:  BCF    F95.5
0166:  BCF    F8C.5
0168:  MOVF   31,W
016A:  INCF   31,F
016C:  BCF    FD8.0
016E:  RRCF   30,F
0170:  BRA    012A
....................       }
....................       return OK;
0172:  MOVLW  00
0174:  MOVWF  01
0176:  GOTO   0240 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {
....................      unsigned int8 cot;
....................      for(cot=0;cot<4;cot++)
....................      {
....................         output_bit(pin_b7,cot&0x02);
....................         output_bit(pin_b6,cot&0x01);
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);             
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);               
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);            
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4);
....................      }
....................      return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_glcd_lcd()
.................... {      
....................     SSPI_WRITE(system_var.glcdcontrol);             
017A:  MOVFF  09,3A
017E:  RCALL  0024
....................     SSPI_WRITE(system_var.glcddata);
0180:  MOVFF  08,3A
0184:  RCALL  0024
....................     SSPI_WRITE(system_var.lcdcontrol);       
0186:  MOVFF  07,3A
018A:  RCALL  0024
....................     SSPI_WRITE(system_var.lcddata);           
018C:  MOVFF  06,3A
0190:  RCALL  0024
....................     output_high(LCD_RCK);     
0192:  BCF    F95.2
0194:  BSF    F8C.2
....................     output_low(LCD_RCK);
0196:  BCF    F95.2
0198:  BCF    F8C.2
....................     return OK;
019A:  MOVLW  00
019C:  MOVWF  01
019E:  RETURN 0
.................... }
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {     
....................     system_var.lcdcontrol = ~lcd_signal;
01A0:  MOVF   30,W
01A2:  MOVWF  07
01A4:  COMF   07,F
....................     system_var.lcddata    = ~lcd_ins_hthi;      
01A6:  MOVFF  31,06
01AA:  COMF   06,F
....................     private_write_glcd_lcd();
01AC:  RCALL  017A
....................     return OK;
01AE:  MOVLW  00
01B0:  MOVWF  01
01B2:  GOTO   0246 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     system_var.glcdcontrol = ~glcd_signal;
01B6:  MOVF   30,W
01B8:  MOVWF  09
01BA:  COMF   09,F
....................     system_var.glcddata    = ~glcd_ins_hthi;     
01BC:  MOVFF  31,08
01C0:  COMF   08,F
....................     private_write_glcd_lcd();
01C2:  RCALL  017A
....................     return OK;
01C4:  MOVLW  00
01C6:  MOVWF  01
01C8:  GOTO   024C (RETURN)
.................... }
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {     
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3);
01CC:  CLRF   39
01CE:  MOVFF  37,3A
01D2:  RCALL  0024
01D4:  MOVFF  36,3A
01D8:  RCALL  0024
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2);
01DA:  CLRF   39
01DC:  MOVFF  35,3A
01E0:  RCALL  0024
01E2:  MOVFF  34,3A
01E6:  RCALL  0024
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1);
01E8:  CLRF   39
01EA:  MOVFF  33,3A
01EE:  RCALL  0024
01F0:  MOVFF  32,3A
01F4:  RCALL  0024
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang);
01F6:  CLRF   39
01F8:  MOVFF  31,3A
01FC:  RCALL  0024
01FE:  MOVFF  30,3A
0202:  RCALL  0024
....................       output_high(matrix_rck);
0204:  BCF    F95.7
0206:  BSF    F8C.7
....................       output_low(matrix_rck); 
0208:  BCF    F95.7
020A:  BCF    F8C.7
....................       return OK;
020C:  MOVLW  00
020E:  MOVWF  01
0210:  GOTO   025E (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_buzzer_relay()
.................... {       
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);      
*
0096:  MOVFF  05,3A
009A:  RCALL  0024
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]);
009C:  MOVFF  04,3A
00A0:  RCALL  0024
....................       output_high(rbdc_rck);
00A2:  BCF    F95.3
00A4:  BSF    F8C.3
....................       output_low(rbdc_rck); 
00A6:  BCF    F95.3
00A8:  BCF    F8C.3
....................       return OK;
00AA:  MOVLW  00
00AC:  MOVWF  01
00AE:  GOTO   0232 (RETURN)
.................... }
.................... result buzzer_on()
.................... {    
....................       system_var.rbdc.bit.buzzer=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result buzzer_off()
.................... {     
....................       system_var.rbdc.bit.buzzer=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_1_on()
.................... {    
....................       system_var.rbdc.bit.relay_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_1_off()
.................... {    
....................       system_var.rbdc.bit.relay_1=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_2_on()
.................... {    
....................       system_var.rbdc.bit.relay_2=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_2_off()
.................... {    
....................       system_var.rbdc.bit.relay_2=0;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_on()
.................... {    
....................       system_var.rbdc.bit.triac_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_off()
.................... {    
....................       system_var.rbdc.bit.triac_1=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result triac_2_on()
.................... {    
....................       system_var.rbdc.bit.triac_2=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result triac_2_off()
.................... {    
....................       system_var.rbdc.bit.triac_2=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result DCMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1;
....................       private_write_buzzer_relay();  
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................       setup_ccp1(ccp_pwm);  
....................       setup_ccp2(ccp_pwm);  
....................       return OK;
.................... }
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  }
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  }
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  }
....................      return OK;
.................... }
.................... 
.................... result STEPMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.step_motor_enable=1;
....................       return OK;
.................... }
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07};
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0);
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1);
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2);
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3);
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................      output_high(ALLMODULE_G);  
*
0214:  BCF    F95.0
0216:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                   
0218:  MOVLW  FF
021A:  MOVWF  F92
021C:  MOVLW  3C
021E:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                               
0220:  MOVLW  F1
0222:  MOVWF  F94
0224:  MOVLW  00
0226:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00); 
0228:  MOVWF  F95
022A:  CLRF   F95
022C:  CLRF   F8C
....................      port_b_pullups(0xff); 
022E:  BCF    FF1.7
....................      private_write_buzzer_relay();
0230:  BRA    0096
....................      led32.ledx32=0;
0232:  CLRF   11
0234:  CLRF   10
0236:  CLRF   0F
0238:  CLRF   0E
....................      led32_display();
023A:  RCALL  00B2
....................      d7seg_display();
023C:  RCALL  00D8
....................      s7seg_display();
023E:  BRA    0124
....................      write_lcd20x4(0xff,0xff);
0240:  SETF   30
0242:  SETF   31
0244:  BRA    01A0
....................      write_glcd128x64(0xff,0xff);
0246:  SETF   30
0248:  SETF   31
024A:  BRA    01B6
....................      write_ledmatrix(0,0,0,0); 
024C:  CLRF   31
024E:  CLRF   30
0250:  CLRF   33
0252:  CLRF   32
0254:  CLRF   35
0256:  CLRF   34
0258:  CLRF   37
025A:  CLRF   36
025C:  BRA    01CC
....................      output_low(ALLMODULE_G);  
025E:  BCF    F95.0
0260:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);        
0262:  MOVF   FC0,W
0264:  ANDLW  C0
0266:  IORLW  02
0268:  MOVWF  FC0
026A:  BSF    FC0.7
026C:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);   
026E:  MOVF   FC1,W
0270:  ANDLW  C0
0272:  IORLW  0C
0274:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8);
0276:  MOVLW  B5
0278:  MOVWF  FB1
....................      return OK;
027A:  MOVLW  00
027C:  MOVWF  01
027E:  GOTO   0A74 (RETURN)
.................... }
.................... void SSPI_WRITE(unsigned int8 x)
.................... { 
....................          if(x&0x80) ssdo=1; 
*
0024:  BTFSS  3A.7
0026:  BRA    002C
0028:  BSF    F84.2
002A:  BRA    002E
....................          else       ssdo=0;
002C:  BCF    F84.2
....................          ssck=0;    ssck=1;   
002E:  BCF    F84.0
0030:  BSF    F84.0
....................          if(x&0x40) ssdo=1; 
0032:  BTFSS  3A.6
0034:  BRA    003A
0036:  BSF    F84.2
0038:  BRA    003C
....................          else       ssdo=0;
003A:  BCF    F84.2
....................          ssck=0;    ssck=1;  
003C:  BCF    F84.0
003E:  BSF    F84.0
....................          if(x&0x20) ssdo=1; 
0040:  BTFSS  3A.5
0042:  BRA    0048
0044:  BSF    F84.2
0046:  BRA    004A
....................          else       ssdo=0;
0048:  BCF    F84.2
....................          ssck=0;    ssck=1;  
004A:  BCF    F84.0
004C:  BSF    F84.0
....................          if(x&0x10) ssdo=1; 
004E:  BTFSS  3A.4
0050:  BRA    0056
0052:  BSF    F84.2
0054:  BRA    0058
....................          else       ssdo=0;
0056:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0058:  BCF    F84.0
005A:  BSF    F84.0
....................          if(x&0x08) ssdo=1; 
005C:  BTFSS  3A.3
005E:  BRA    0064
0060:  BSF    F84.2
0062:  BRA    0066
....................          else       ssdo=0;
0064:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0066:  BCF    F84.0
0068:  BSF    F84.0
....................          if(x&0x04) ssdo=1; 
006A:  BTFSS  3A.2
006C:  BRA    0072
006E:  BSF    F84.2
0070:  BRA    0074
....................          else       ssdo=0;
0072:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0074:  BCF    F84.0
0076:  BSF    F84.0
....................          if(x&0x02) ssdo=1; 
0078:  BTFSS  3A.1
007A:  BRA    0080
007C:  BSF    F84.2
007E:  BRA    0082
....................          else       ssdo=0;
0080:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0082:  BCF    F84.0
0084:  BSF    F84.0
....................          if(x&0x01) ssdo=1; 
0086:  BTFSS  3A.0
0088:  BRA    008E
008A:  BSF    F84.2
008C:  BRA    0090
....................          else       ssdo=0;
008E:  BCF    F84.2
....................          ssck=0;    ssck=1;       
0090:  BCF    F84.0
0092:  BSF    F84.0
0094:  RETURN 0
.................... }
.................... #endif
.................... 
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
0436:  MOVF   FB2,W
0438:  MOVFF  FB3,03
043C:  ADDWF  0A,F
043E:  MOVF   FB3,W
0440:  ADDWFC 0B,F
0442:  MOVLW  00
0444:  ADDWFC 0C,F
0446:  ADDWFC 0D,F
0448:  CLRF   FB3
044A:  MOVLW  02
044C:  MOVWF  FB2
044E:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
0450:  BTFSS  FA1.1
0452:  BRA    045C
0454:  MOVLW  01
0456:  ADDWF  0C,F
0458:  MOVLW  00
045A:  ADDWFC 0D,F
045C:  BCF    FA1.1
....................       return delay.timeline/625;
045E:  BCF    FD8.1
0460:  MOVFF  0D,39
0464:  MOVFF  0C,38
0468:  MOVFF  0B,37
046C:  MOVFF  0A,36
0470:  CLRF   3D
0472:  CLRF   3C
0474:  MOVLW  02
0476:  MOVWF  3B
0478:  MOVLW  71
047A:  MOVWF  3A
047C:  RCALL  03A8
047E:  MOVFF  01,02
0482:  MOVFF  00,01
0486:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
0488:  MOVF   FB2,W
048A:  MOVFF  FB3,03
048E:  ADDWF  0A,F
0490:  MOVF   FB3,W
0492:  ADDWFC 0B,F
0494:  MOVLW  00
0496:  ADDWFC 0C,F
0498:  ADDWFC 0D,F
049A:  CLRF   FB3
049C:  MOVLW  02
049E:  MOVWF  FB2
04A0:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
04A2:  BTFSS  FA1.1
04A4:  BRA    04AE
04A6:  MOVLW  01
04A8:  ADDWF  0C,F
04AA:  MOVLW  00
04AC:  ADDWFC 0D,F
04AE:  BCF    FA1.1
....................       tam = delay.timeline/625;
04B0:  BCF    FD8.1
04B2:  MOVFF  0D,39
04B6:  MOVFF  0C,38
04BA:  MOVFF  0B,37
04BE:  MOVFF  0A,36
04C2:  CLRF   3D
04C4:  CLRF   3C
04C6:  MOVLW  02
04C8:  MOVWF  3B
04CA:  MOVLW  71
04CC:  MOVWF  3A
04CE:  RCALL  03A8
04D0:  MOVFF  01,35
04D4:  MOVFF  00,34
....................       if(t<=tam) return tam-t;
04D8:  MOVF   33,W
04DA:  SUBWF  35,W
04DC:  BNC   04FC
04DE:  BNZ   04E6
04E0:  MOVF   32,W
04E2:  SUBWF  34,W
04E4:  BNC   04FC
04E6:  MOVF   32,W
04E8:  SUBWF  34,W
04EA:  MOVWF  00
04EC:  MOVF   33,W
04EE:  SUBWFB 35,W
04F0:  MOVWF  03
04F2:  MOVFF  00,01
04F6:  MOVWF  02
04F8:  BRA    0518
04FA:  BRA    0518
....................       else       return 0xffff-t + tam;
04FC:  MOVLW  FF
04FE:  BSF    FD8.0
0500:  SUBFWB 32,W
0502:  MOVWF  36
0504:  MOVLW  FF
0506:  SUBFWB 33,W
0508:  MOVWF  37
050A:  MOVF   34,W
050C:  ADDWF  36,W
050E:  MOVWF  01
0510:  MOVF   35,W
0512:  ADDWFC 37,W
0514:  MOVWF  03
0516:  MOVWF  02
0518:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
051A:  MOVFF  30,32
051E:  MOVLW  01
0520:  MOVWF  33
0522:  MOVLW  0F
0524:  MOVWF  35
0526:  MOVLW  92
0528:  MOVWF  34
052A:  RCALL  0338
....................       switch (step)
052C:  MOVF   22,W
052E:  ADDLW  FC
0530:  BTFSC  FD8.0
0532:  BRA    06A2
0534:  ADDLW  04
0536:  GOTO   06A8
....................       {
....................           case 0:
....................                  if(input(pin)==0)
053A:  MOVFF  30,32
053E:  MOVLW  01
0540:  MOVWF  33
0542:  MOVLW  0F
0544:  MOVWF  35
0546:  MOVLW  92
0548:  MOVWF  34
054A:  RCALL  0338
054C:  MOVFF  30,32
0550:  MOVLW  0F
0552:  MOVWF  34
0554:  MOVLW  80
0556:  MOVWF  33
0558:  RCALL  0376
055A:  BTFSC  01.0
055C:  BRA    0574
....................                   {
....................                         oldpin   = pin;
055E:  MOVFF  31,1F
0562:  MOVFF  30,1E
....................                         t        = delay_start();
0566:  RCALL  0436
0568:  MOVFF  02,21
056C:  MOVFF  01,20
....................                         step     = 1;
0570:  MOVLW  01
0572:  MOVWF  22
....................                   }
....................                  break;
0574:  BRA    06A2
....................            case 1:
....................                  if(input(oldpin))step = 0;
0576:  MOVFF  1E,32
057A:  MOVLW  01
057C:  MOVWF  33
057E:  MOVLW  0F
0580:  MOVWF  35
0582:  MOVLW  92
0584:  MOVWF  34
0586:  RCALL  0338
0588:  MOVFF  1E,32
058C:  MOVLW  0F
058E:  MOVWF  34
0590:  MOVLW  80
0592:  MOVWF  33
0594:  RCALL  0376
0596:  BTFSS  01.0
0598:  BRA    059E
059A:  CLRF   22
059C:  BRA    05DA
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
059E:  MOVF   1E,W
05A0:  SUBWF  30,W
05A2:  BNZ   05DA
05A4:  MOVF   1F,W
05A6:  SUBWF  31,W
05A8:  BNZ   05DA
05AA:  MOVFF  21,33
05AE:  MOVFF  20,32
05B2:  RCALL  0488
05B4:  MOVFF  02,33
05B8:  MOVFF  01,32
05BC:  MOVF   33,F
05BE:  BNZ   05C6
05C0:  MOVF   32,W
05C2:  SUBLW  1D
05C4:  BC    05DA
....................                    {
....................                       t    = delay_start();
05C6:  RCALL  0436
05C8:  MOVFF  02,21
05CC:  MOVFF  01,20
....................                       step = 2;
05D0:  MOVLW  02
05D2:  MOVWF  22
....................                       return OK;
05D4:  MOVLW  00
05D6:  MOVWF  01
05D8:  BRA    06A6
....................                    }
....................                  break;
05DA:  BRA    06A2
....................             case 2:
....................                  if(input(oldpin))step = 0;
05DC:  MOVFF  1E,32
05E0:  MOVLW  01
05E2:  MOVWF  33
05E4:  MOVLW  0F
05E6:  MOVWF  35
05E8:  MOVLW  92
05EA:  MOVWF  34
05EC:  RCALL  0338
05EE:  MOVFF  1E,32
05F2:  MOVLW  0F
05F4:  MOVWF  34
05F6:  MOVLW  80
05F8:  MOVWF  33
05FA:  RCALL  0376
05FC:  BTFSS  01.0
05FE:  BRA    0604
0600:  CLRF   22
0602:  BRA    0640
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
0604:  MOVF   1E,W
0606:  SUBWF  30,W
0608:  BNZ   0640
060A:  MOVF   1F,W
060C:  SUBWF  31,W
060E:  BNZ   0640
0610:  MOVFF  21,33
0614:  MOVFF  20,32
0618:  RCALL  0488
061A:  MOVFF  02,33
061E:  MOVFF  01,32
0622:  MOVF   02,W
0624:  SUBLW  00
0626:  BC    0640
0628:  XORLW  FF
062A:  BNZ   0632
062C:  MOVF   32,W
062E:  SUBLW  F3
0630:  BC    0640
....................                    {
....................                        t        = delay_start();
0632:  RCALL  0436
0634:  MOVFF  02,21
0638:  MOVFF  01,20
....................                        step     = 3;
063C:  MOVLW  03
063E:  MOVWF  22
....................                    } 
....................                  break;
0640:  BRA    06A2
....................             case 3:
....................                    if(input(oldpin))step = 0; 
0642:  MOVFF  1E,32
0646:  MOVLW  01
0648:  MOVWF  33
064A:  MOVLW  0F
064C:  MOVWF  35
064E:  MOVLW  92
0650:  MOVWF  34
0652:  RCALL  0338
0654:  MOVFF  1E,32
0658:  MOVLW  0F
065A:  MOVWF  34
065C:  MOVLW  80
065E:  MOVWF  33
0660:  RCALL  0376
0662:  BTFSS  01.0
0664:  BRA    066A
0666:  CLRF   22
0668:  BRA    06A2
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
066A:  MOVF   1E,W
066C:  SUBWF  30,W
066E:  BNZ   06A2
0670:  MOVF   1F,W
0672:  SUBWF  31,W
0674:  BNZ   06A2
0676:  MOVFF  21,33
067A:  MOVFF  20,32
067E:  RCALL  0488
0680:  MOVFF  02,33
0684:  MOVFF  01,32
0688:  MOVF   33,F
068A:  BNZ   0692
068C:  MOVF   32,W
068E:  SUBLW  63
0690:  BC    06A2
....................                        {
....................                           t  = delay_start();
0692:  RCALL  0436
0694:  MOVFF  02,21
0698:  MOVFF  01,20
....................                           return OK;
069C:  MOVLW  00
069E:  MOVWF  01
06A0:  BRA    06A6
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
06A2:  MOVLW  02
06A4:  MOVWF  01
06A6:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_key4x4.c>
.................... #ifndef  __TV_KEY4x4_C__
.................... #define  __TV_KEY4x4_C__
.................... #include<tv_key4x4.h>
.................... #ifndef  __TV_KEY4x4_H__
.................... #define  __TV_KEY4x4_H__
.................... typedef struct
.................... {
....................       unsigned int8 key;
.................... }KEY4x4_STRUCT;
.................... KEY4x4_STRUCT  key4x4;
.................... result key4x4_read(void);
.................... #endif
.................... 
.................... result key4x4_read()
.................... {      
....................          static unsigned int8  step=0;
....................          static unsigned int16 t;
....................          key4x4.key = KEYREAD();
....................          switch (step)
....................          {
....................              case 0:
....................                    if( key4x4.key!=0xff)
....................                       {     t   = delay_start();
....................                             step=1;
....................                       } 
....................                     break;
....................               case 1:
....................                     if(key4x4.key==0xff)step =0;
....................                     else if(delay_stop(t)>=30)
....................                     {   step = 2;
....................                         t    = delay_start(); 
....................                         return OK;
....................                     }
....................                     break; 
....................               case 2:
....................                     if(key4x4.key==0xff)step =0;
....................                     else if(delay_stop(t)>=500)
....................                        {
....................                            t    = delay_start(); 
....................                            step = 3;
....................                        } 
....................                     break;
....................               case 3:
....................                     if(key4x4.key==0xff)step =0;
....................                     else if(delay_stop(t)>=100)
....................                       {
....................                          t    = delay_start(); 
....................                          return OK;
....................                       }
....................                      break; 
....................          }
....................          return BUSY;
.................... }
.................... #endif
.................... 
.................... unsigned int8 cd=1,cdold=1;
.................... unsigned int8 i,T0=0, T0old=0;
.................... unsigned int16 j,k;
.................... void d7seg_xoa0VN(unsigned int16 d)
*
02C4:  CLRF   32
.................... {
....................    unsigned int8 n=0;
....................    do
....................    {  d7seg.led[n]= m7d[d%10];
02C6:  CLRF   03
02C8:  MOVF   32,W
02CA:  ADDLW  12
02CC:  MOVWF  FE9
02CE:  MOVLW  00
02D0:  ADDWFC 03,W
02D2:  MOVWF  FEA
02D4:  MOVFF  31,36
02D8:  MOVFF  30,35
02DC:  CLRF   38
02DE:  MOVLW  0A
02E0:  MOVWF  37
02E2:  RCALL  0282
02E4:  MOVFF  00,35
02E8:  MOVFF  03,36
02EC:  MOVFF  03,03
02F0:  MOVF   00,W
02F2:  RCALL  0004
02F4:  MOVWF  FEF
....................       d/=10;n++;
02F6:  MOVFF  31,36
02FA:  MOVFF  30,35
02FE:  CLRF   38
0300:  MOVLW  0A
0302:  MOVWF  37
0304:  RCALL  0282
0306:  MOVFF  02,31
030A:  MOVFF  01,30
030E:  INCF   32,F
....................    }while(d!=0);
0310:  MOVF   30,F
0312:  BNZ   02C6
0314:  MOVF   31,F
0316:  BNZ   02C6
....................    for(;n<4;n++) d7seg.led[n]= 0xff;
0318:  MOVF   32,W
031A:  SUBLW  03
031C:  BNC   0332
031E:  CLRF   03
0320:  MOVF   32,W
0322:  ADDLW  12
0324:  MOVWF  FE9
0326:  MOVLW  00
0328:  ADDWFC 03,W
032A:  MOVWF  FEA
032C:  SETF   FEF
032E:  INCF   32,F
0330:  BRA    0318
....................    d7seg_display();
0332:  RCALL  00D8
0334:  GOTO   0AA4 (RETURN)
.................... }
.................... void kiemtra_xuli_nutnhan()
.................... {
....................       if(inputcd(up)==0)
*
06CA:  MOVLW  7C
06CC:  MOVWF  31
06CE:  MOVLW  0D
06D0:  MOVWF  30
06D2:  RCALL  051A
06D4:  MOVF   01,F
06D6:  BNZ   06F4
....................       {
....................         led32.ledx32=0;
06D8:  CLRF   11
06DA:  CLRF   10
06DC:  CLRF   0F
06DE:  CLRF   0E
....................         i=0;
06E0:  CLRF   29
....................         j=0;
06E2:  CLRF   2D
06E4:  CLRF   2C
....................         if(cd==7) cd=7;
06E6:  MOVF   27,W
06E8:  SUBLW  07
06EA:  BNZ   06F2
06EC:  MOVLW  07
06EE:  MOVWF  27
06F0:  BRA    06F4
....................         else cd++;
06F2:  INCF   27,F
....................       }
....................       if(inputcd(dw)==0) 
06F4:  MOVLW  7C
06F6:  MOVWF  31
06F8:  MOVLW  0C
06FA:  MOVWF  30
06FC:  RCALL  051A
06FE:  MOVF   01,F
0700:  BNZ   071C
....................       {
....................          led32.ledx32=0;
0702:  CLRF   11
0704:  CLRF   10
0706:  CLRF   0F
0708:  CLRF   0E
....................          i=0;
070A:  CLRF   29
....................          j=0;
070C:  CLRF   2D
070E:  CLRF   2C
....................          if(cd==1) cd=1;
0710:  DECFSZ 27,W
0712:  BRA    071A
0714:  MOVLW  01
0716:  MOVWF  27
0718:  BRA    071C
....................          else cd--;
071A:  DECF   27,F
....................       }
....................       if(inputcd(clr)==0) 
071C:  MOVLW  7C
071E:  MOVWF  31
0720:  MOVLW  0B
0722:  MOVWF  30
0724:  RCALL  051A
0726:  MOVF   01,F
0728:  BNZ   0730
....................       {
....................          i=0;
072A:  CLRF   29
....................          cd=1;
072C:  MOVLW  01
072E:  MOVWF  27
....................       }
0730:  RETURN 0
.................... }
.................... void chop_tat_led()
.................... {
....................    led32.ledx32=~led32.ledx32;
0732:  COMF   0E,F
0734:  COMF   0F,F
0736:  COMF   10,F
0738:  COMF   11,F
....................    led32_display();
073A:  RCALL  00B2
....................    for(j=0;j<=2000;j++)   kiemtra_xuli_nutnhan();
073C:  CLRF   2D
073E:  CLRF   2C
0740:  MOVF   2D,W
0742:  SUBLW  07
0744:  BNC   0758
0746:  BNZ   074E
0748:  MOVF   2C,W
074A:  SUBLW  D0
074C:  BNC   0758
074E:  RCALL  06CA
0750:  INCF   2C,F
0752:  BTFSC  FD8.2
0754:  INCF   2D,F
0756:  BRA    0740
0758:  GOTO   0AAA (RETURN)
.................... }
.................... void sang_tat_dan_pst()
.................... {
....................    if(i<=64)
075C:  MOVF   29,W
075E:  SUBLW  40
0760:  BNC   07AA
....................    {
....................       if(i<32)  led32.ledx32=(led32.ledx32<<1)|1;
0762:  MOVF   29,W
0764:  SUBLW  1F
0766:  BNC   078C
0768:  BCF    FD8.0
076A:  RLCF   0E,W
076C:  MOVWF  31
076E:  RLCF   0F,W
0770:  MOVWF  32
0772:  RLCF   10,W
0774:  MOVWF  33
0776:  RLCF   11,W
0778:  MOVWF  34
077A:  MOVF   31,W
077C:  IORLW  01
077E:  MOVWF  0E
0780:  MOVFF  32,0F
0784:  MOVFF  33,10
0788:  MOVFF  34,11
....................       if(i>=32) led32.ledx32=led32.ledx32<<1;
078C:  MOVF   29,W
078E:  SUBLW  1F
0790:  BC    079C
0792:  BCF    FD8.0
0794:  RLCF   0E,F
0796:  RLCF   0F,F
0798:  RLCF   10,F
079A:  RLCF   11,F
....................       led32_display();
079C:  RCALL  00B2
....................       delay_ms(50);
079E:  MOVLW  32
07A0:  MOVWF  32
07A2:  RCALL  00FE
....................       i++;
07A4:  INCF   29,F
....................       kiemtra_xuli_nutnhan();
07A6:  RCALL  06CA
....................    }
07A8:  BRA    07AC
....................    else
....................       i=0;
07AA:  CLRF   29
07AC:  GOTO   0AB2 (RETURN)
.................... }
.................... void sang_tat_dan_tsp()
.................... {
....................    if(i<=64)
07B0:  MOVF   29,W
07B2:  SUBLW  40
07B4:  BNC   07FA
....................       {
....................          if(i<32)  led32.ledx32=(led32.ledx32>>1)|0x80000000;
07B6:  MOVF   29,W
07B8:  SUBLW  1F
07BA:  BNC   07DC
07BC:  BCF    FD8.0
07BE:  RRCF   11,W
07C0:  MOVWF  34
07C2:  RRCF   10,W
07C4:  MOVWF  33
07C6:  RRCF   0F,W
07C8:  MOVWF  32
07CA:  RRCF   0E,W
07CC:  MOVWF  0E
07CE:  MOVFF  32,0F
07D2:  MOVFF  33,10
07D6:  MOVF   34,W
07D8:  IORLW  80
07DA:  MOVWF  11
....................          if(i>=32) led32.ledx32=led32.ledx32>>1;
07DC:  MOVF   29,W
07DE:  SUBLW  1F
07E0:  BC    07EC
07E2:  BCF    FD8.0
07E4:  RRCF   11,F
07E6:  RRCF   10,F
07E8:  RRCF   0F,F
07EA:  RRCF   0E,F
....................          led32_display();
07EC:  RCALL  00B2
....................          delay_ms(50);
07EE:  MOVLW  32
07F0:  MOVWF  32
07F2:  RCALL  00FE
....................          i++;
07F4:  INCF   29,F
....................          kiemtra_xuli_nutnhan();
07F6:  RCALL  06CA
....................       }
07F8:  BRA    07FC
....................       else
....................          i=0;
07FA:  CLRF   29
07FC:  GOTO   0ABA (RETURN)
.................... }
.................... void sang_tat_dan_ngoai_vao()
.................... {
....................    if(i<=32)
0800:  MOVF   29,W
0802:  SUBLW  20
0804:  BNC   0850
....................    {
....................       if(i<16) 
0806:  MOVF   29,W
0808:  SUBLW  0F
080A:  BNC   0830
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1)|0x8000;
080C:  BCF    FD8.0
080E:  RRCF   11,W
0810:  MOVWF  31
0812:  RRCF   10,W
0814:  MOVWF  10
0816:  MOVF   31,W
0818:  IORLW  80
081A:  MOVWF  11
....................          led32.ledx16[0]=(led32.ledx16[0]<<1)|0x0001;
081C:  BCF    FD8.0
081E:  RLCF   0E,W
0820:  MOVWF  30
0822:  RLCF   0F,W
0824:  MOVWF  31
0826:  MOVF   30,W
0828:  IORLW  01
082A:  MOVWF  0E
082C:  MOVFF  31,0F
....................       }
....................       if(i>=16) 
0830:  MOVF   29,W
0832:  SUBLW  0F
0834:  BC    0842
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1);
0836:  BCF    FD8.0
0838:  RRCF   11,F
083A:  RRCF   10,F
....................          led32.ledx16[0]=(led32.ledx16[0]<<1);
083C:  BCF    FD8.0
083E:  RLCF   0E,F
0840:  RLCF   0F,F
....................       }
....................       led32_display();
0842:  RCALL  00B2
....................       delay_ms(50);
0844:  MOVLW  32
0846:  MOVWF  32
0848:  RCALL  00FE
....................       kiemtra_xuli_nutnhan();
084A:  RCALL  06CA
....................       i++;
084C:  INCF   29,F
....................    }
084E:  BRA    0852
....................    else i=0;
0850:  CLRF   29
0852:  GOTO   0AC2 (RETURN)
.................... }
.................... void sang_tat_dan_trong_ra()
.................... {
....................    if(i<=32)
0856:  MOVF   29,W
0858:  SUBLW  20
085A:  BNC   08A6
....................    {
....................       if(i<16) 
085C:  MOVF   29,W
085E:  SUBLW  0F
0860:  BNC   0886
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1)|0x0001;
0862:  BCF    FD8.0
0864:  RLCF   10,W
0866:  MOVWF  30
0868:  RLCF   11,W
086A:  MOVWF  31
086C:  MOVF   30,W
086E:  IORLW  01
0870:  MOVWF  10
0872:  MOVFF  31,11
....................          led32.ledx16[0]=(led32.ledx16[0]>>1)|0x8000;
0876:  BCF    FD8.0
0878:  RRCF   0F,W
087A:  MOVWF  31
087C:  RRCF   0E,W
087E:  MOVWF  0E
0880:  MOVF   31,W
0882:  IORLW  80
0884:  MOVWF  0F
....................       }
....................       if(i>=16) 
0886:  MOVF   29,W
0888:  SUBLW  0F
088A:  BC    0898
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1);
088C:  BCF    FD8.0
088E:  RLCF   10,F
0890:  RLCF   11,F
....................          led32.ledx16[0]=(led32.ledx16[0]>>1);
0892:  BCF    FD8.0
0894:  RRCF   0F,F
0896:  RRCF   0E,F
....................       }
....................       led32_display();
0898:  RCALL  00B2
....................       delay_ms(50);
089A:  MOVLW  32
089C:  MOVWF  32
089E:  RCALL  00FE
....................       kiemtra_xuli_nutnhan();
08A0:  RCALL  06CA
....................       i++;
08A2:  INCF   29,F
....................    }
08A4:  BRA    08A8
....................    else i=0;
08A6:  CLRF   29
08A8:  GOTO   0ACA (RETURN)
.................... }
.................... void sang_don_pst()
.................... {
....................    if(i<=32)
08AC:  MOVF   29,W
08AE:  SUBLW  20
08B0:  BNC   0948
....................    {
....................       if(j<32-i)
08B2:  MOVLW  20
08B4:  BSF    FD8.0
08B6:  SUBFWB 29,W
08B8:  MOVF   2D,F
08BA:  BNZ   0940
08BC:  SUBWF  2C,W
08BE:  BC    0940
....................       {
....................          led32.ledx32=~(0xffffffff>>i)|((int32)1<<j);
08C0:  SETF   03
08C2:  SETF   02
08C4:  SETF   01
08C6:  SETF   00
08C8:  MOVF   29,W
08CA:  MOVWF  30
08CC:  BZ    08DC
08CE:  BCF    FD8.0
08D0:  RRCF   03,F
08D2:  RRCF   02,F
08D4:  RRCF   01,F
08D6:  RRCF   00,F
08D8:  DECFSZ 30,F
08DA:  BRA    08CE
08DC:  MOVF   00,W
08DE:  MOVWF  31
08E0:  COMF   31,F
08E2:  MOVF   01,W
08E4:  MOVWF  32
08E6:  COMF   32,F
08E8:  MOVF   02,W
08EA:  MOVWF  33
08EC:  COMF   33,F
08EE:  MOVF   03,W
08F0:  MOVWF  34
08F2:  COMF   34,F
08F4:  CLRF   03
08F6:  CLRF   02
08F8:  CLRF   01
08FA:  MOVLW  01
08FC:  MOVWF  00
08FE:  MOVF   2C,W
0900:  MOVWF  35
0902:  BZ    0912
0904:  BCF    FD8.0
0906:  RLCF   00,F
0908:  RLCF   01,F
090A:  RLCF   02,F
090C:  RLCF   03,F
090E:  DECFSZ 35,F
0910:  BRA    0904
0912:  MOVF   00,W
0914:  IORWF  31,W
0916:  MOVWF  0E
0918:  MOVF   01,W
091A:  IORWF  32,W
091C:  MOVWF  0F
091E:  MOVF   02,W
0920:  IORWF  33,W
0922:  MOVWF  10
0924:  MOVF   03,W
0926:  IORWF  34,W
0928:  MOVWF  11
....................          j++;
092A:  INCF   2C,F
092C:  BTFSC  FD8.2
092E:  INCF   2D,F
....................          delay_ms(50);
0930:  MOVLW  32
0932:  MOVWF  32
0934:  CALL   00FE
....................          led32_display();
0938:  CALL   00B2
....................          kiemtra_xuli_nutnhan();
093C:  RCALL  06CA
....................       }
093E:  BRA    0946
....................       else 
....................       {
....................          j=0;
0940:  CLRF   2D
0942:  CLRF   2C
....................          i++;  
0944:  INCF   29,F
....................       }
....................    }
0946:  BRA    094A
....................    else i=0;
0948:  CLRF   29
094A:  GOTO   0AD2 (RETURN)
.................... }
.................... void sang_don_tsp()
.................... {
....................    if(i<=32)
094E:  MOVF   29,W
0950:  SUBLW  20
0952:  BNC   09EA
....................    {
....................       if(j<32-i)
0954:  MOVLW  20
0956:  BSF    FD8.0
0958:  SUBFWB 29,W
095A:  MOVF   2D,F
095C:  BNZ   09E2
095E:  SUBWF  2C,W
0960:  BC    09E2
....................       {
....................          led32.ledx32=~(0xffffffff<<i)|(0x80000000>>j);
0962:  SETF   03
0964:  SETF   02
0966:  SETF   01
0968:  SETF   00
096A:  MOVF   29,W
096C:  MOVWF  30
096E:  BZ    097E
0970:  BCF    FD8.0
0972:  RLCF   00,F
0974:  RLCF   01,F
0976:  RLCF   02,F
0978:  RLCF   03,F
097A:  DECFSZ 30,F
097C:  BRA    0970
097E:  MOVF   00,W
0980:  MOVWF  31
0982:  COMF   31,F
0984:  MOVF   01,W
0986:  MOVWF  32
0988:  COMF   32,F
098A:  MOVF   02,W
098C:  MOVWF  33
098E:  COMF   33,F
0990:  MOVF   03,W
0992:  MOVWF  34
0994:  COMF   34,F
0996:  MOVLW  80
0998:  MOVWF  03
099A:  CLRF   02
099C:  CLRF   01
099E:  CLRF   00
09A0:  MOVF   2C,W
09A2:  MOVWF  35
09A4:  BZ    09B4
09A6:  BCF    FD8.0
09A8:  RRCF   03,F
09AA:  RRCF   02,F
09AC:  RRCF   01,F
09AE:  RRCF   00,F
09B0:  DECFSZ 35,F
09B2:  BRA    09A6
09B4:  MOVF   00,W
09B6:  IORWF  31,W
09B8:  MOVWF  0E
09BA:  MOVF   01,W
09BC:  IORWF  32,W
09BE:  MOVWF  0F
09C0:  MOVF   02,W
09C2:  IORWF  33,W
09C4:  MOVWF  10
09C6:  MOVF   03,W
09C8:  IORWF  34,W
09CA:  MOVWF  11
....................          j++;
09CC:  INCF   2C,F
09CE:  BTFSC  FD8.2
09D0:  INCF   2D,F
....................          delay_ms(50);
09D2:  MOVLW  32
09D4:  MOVWF  32
09D6:  CALL   00FE
....................          led32_display();
09DA:  CALL   00B2
....................          kiemtra_xuli_nutnhan();
09DE:  RCALL  06CA
....................       }
09E0:  BRA    09E8
....................       else 
....................       {
....................          j=0;
09E2:  CLRF   2D
09E4:  CLRF   2C
....................          i++;
09E6:  INCF   29,F
....................       }
....................    }
09E8:  BRA    09EC
....................    else i=0;
09EA:  CLRF   29
09EC:  GOTO   0ADA (RETURN)
.................... }
.................... void main()
09F0:  CLRF   FF8
09F2:  BCF    FD0.7
09F4:  BSF    FB8.3
09F6:  MOVLW  08
09F8:  MOVWF  FAF
09FA:  MOVLW  02
09FC:  MOVWF  FB0
09FE:  MOVLW  A6
0A00:  MOVWF  FAC
0A02:  MOVLW  90
0A04:  MOVWF  FAB
0A06:  MOVLW  01
0A08:  MOVWF  27
0A0A:  MOVWF  28
0A0C:  CLRF   2A
0A0E:  CLRF   2B
0A10:  MOVF   FC1,W
0A12:  ANDLW  C0
0A14:  IORLW  0F
0A16:  MOVWF  FC1
0A18:  MOVLW  07
0A1A:  MOVWF  FB4
0A1C:  BRA    0A32
0A1E:  DATA 06,40
0A20:  DATA 04,00
0A22:  DATA 0E,40
0A24:  DATA 12,FF
0A26:  DATA 03,80
0A28:  DATA 00,00
0A2A:  DATA 00,03
0A2C:  DATA 00,24
0A2E:  DATA 00,00
0A30:  DATA 00,00
0A32:  MOVLW  00
0A34:  MOVWF  FF8
0A36:  MOVLW  0A
0A38:  MOVWF  FF7
0A3A:  MOVLW  1E
0A3C:  MOVWF  FF6
0A3E:  TBLRD*+
0A40:  MOVF   FF5,W
0A42:  MOVWF  00
0A44:  XORLW  00
0A46:  BZ    0A6E
0A48:  TBLRD*+
0A4A:  MOVF   FF5,W
0A4C:  MOVWF  01
0A4E:  BTFSC  FE8.7
0A50:  BRA    0A5C
0A52:  ANDLW  3F
0A54:  MOVWF  FEA
0A56:  TBLRD*+
0A58:  MOVFF  FF5,FE9
0A5C:  BTFSC  01.6
0A5E:  TBLRD*+
0A60:  BTFSS  01.6
0A62:  TBLRD*+
0A64:  MOVFF  FF5,FEE
0A68:  DCFSNZ 00,F
0A6A:  BRA    0A3E
0A6C:  BRA    0A60
0A6E:  CLRF   FF8
.................... {
....................       system_init();
0A70:  GOTO   0214
....................       setup_timer_0(t0_ext_l_to_h|t0_div_1);
0A74:  MOVLW  A8
0A76:  MOVWF  FD5
....................       set_timer0(98);
0A78:  CLRF   FD7
0A7A:  MOVLW  62
0A7C:  MOVWF  FD6
0A7E:  NOP   
....................       while(true)
....................       {  
....................          T0=get_timer0();
0A80:  MOVF   FD6,W
0A82:  MOVWF  2A
....................          if(T0>100) set_timer0(1);
0A84:  MOVF   2A,W
0A86:  SUBLW  64
0A88:  BC    0A92
0A8A:  CLRF   FD7
0A8C:  MOVLW  01
0A8E:  MOVWF  FD6
0A90:  NOP   
....................          if(T0!=T0old)
0A92:  MOVF   2B,W
0A94:  SUBWF  2A,W
0A96:  BZ    0AA4
....................          {
....................             T0old=T0;
0A98:  MOVFF  2A,2B
....................             d7seg_xoa0VN(T0);
0A9C:  CLRF   31
0A9E:  MOVFF  2A,30
0AA2:  BRA    02C4
....................          }
....................          if(cd==1) chop_tat_led();
0AA4:  DECFSZ 27,W
0AA6:  BRA    0AAA
0AA8:  BRA    0732
....................          if(cd==2) sang_tat_dan_pst();
0AAA:  MOVF   27,W
0AAC:  SUBLW  02
0AAE:  BTFSC  FD8.2
0AB0:  BRA    075C
....................          if(cd==3) sang_tat_dan_tsp();
0AB2:  MOVF   27,W
0AB4:  SUBLW  03
0AB6:  BTFSC  FD8.2
0AB8:  BRA    07B0
....................          if(cd==4) sang_tat_dan_ngoai_vao();
0ABA:  MOVF   27,W
0ABC:  SUBLW  04
0ABE:  BTFSC  FD8.2
0AC0:  BRA    0800
....................          if(cd==5) sang_tat_dan_trong_ra();
0AC2:  MOVF   27,W
0AC4:  SUBLW  05
0AC6:  BTFSC  FD8.2
0AC8:  BRA    0856
....................          if(cd==6) sang_don_pst();
0ACA:  MOVF   27,W
0ACC:  SUBLW  06
0ACE:  BTFSC  FD8.2
0AD0:  BRA    08AC
....................          if(cd==7) sang_don_tsp();
0AD2:  MOVF   27,W
0AD4:  SUBLW  07
0AD6:  BTFSC  FD8.2
0AD8:  BRA    094E
0ADA:  BRA    0A80
....................          
....................       }
.................... }
0ADC:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
