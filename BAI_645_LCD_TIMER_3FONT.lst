CCS PCH C Compiler, Version 5.101, 43599               14-Mar-23 16:48

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_645_LCD_TIMER_3FONT.lst

               ROM used:   4206 bytes (13%)
                           Largest free fragment is 28558
               RAM used:   67 (3%) at main() level
                           86 (4%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0CC8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   029E
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #DEFINE BOARD D501
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
.................... #ifndef    __TV_D501_TH_C__
.................... #define    __TV_D501_TH_C__
.................... #include<TV_D501_TH.h>
.................... #ifndef    __TV_D501_TH_H__
.................... #define    __TV_D501_TH_H__
.................... #include     <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 00,01
00C0:  DATA 02,05
00C2:  DATA 03,04
00C4:  DATA 01,02
00C6:  DATA 20,03
00C8:  DATA 07,03
00CA:  DATA 06,06
00CC:  DATA 02,05
00CE:  DATA 03,03
00D0:  DATA 06,06
00D2:  DATA 02,03
00D4:  DATA 03,04
00D6:  DATA 05,03
00D8:  DATA 07,20
00DA:  DATA 20,07
00DC:  DATA 07,06
00DE:  DATA 06,03
00E0:  DATA 03,04
00E2:  DATA 00,06
00E4:  DATA 06,05
00E6:  DATA 03,04
00E8:  DATA 01,01
00EA:  DATA 07,20
00EC:  DATA 20,07
00EE:  DATA 00,06
00F0:  DATA 02,05
00F2:  DATA 03,04
00F4:  DATA 00,06
00F6:  DATA 02,03
00F8:  DATA 03,04
00FA:  DATA 20,20
00FC:  DATA 20,20
00FE:  DATA 20,20
0100:  CLRF   FF7
0102:  ADDLW  10
0104:  MOVWF  FF6
0106:  MOVLW  01
0108:  ADDWFC FF7,F
010A:  TBLRD*+
010C:  MOVF   FF5,W
010E:  RETURN 0
0110:  DATA 00,01
0112:  DATA 02,07
0114:  DATA 20,07
0116:  DATA 07,20
0118:  DATA 07,05
011A:  DATA 03,04
011C:  DATA 01,02
011E:  DATA 20,20
0120:  DATA 07,20
0122:  DATA 20,07
0124:  DATA 20,03
0126:  DATA 07,03
0128:  DATA 01,01
012A:  DATA 02,03
012C:  DATA 03,07
012E:  DATA 07,20
0130:  DATA 20,05
0132:  DATA 03,03
0134:  DATA 00,01
0136:  DATA 02,20
0138:  DATA 03,04
013A:  DATA 20,20
013C:  DATA 02,05
013E:  DATA 03,04
0140:  DATA 07,20
0142:  DATA 07,05
0144:  DATA 03,07
0146:  DATA 20,20
0148:  DATA 07,20
014A:  DATA 20,07
014C:  DATA 07,01
014E:  DATA 01,07
0150:  DATA 03,03
0152:  DATA 20,20
0154:  DATA 07,05
0156:  DATA 03,04
0158:  DATA 00,01
015A:  DATA 02,07
015C:  DATA 03,03
015E:  DATA 07,20
0160:  DATA 07,05
0162:  DATA 03,04
0164:  DATA 01,01
0166:  DATA 07,20
0168:  DATA 20,04
016A:  DATA 20,00
016C:  DATA 20,20
016E:  DATA 07,20
0170:  DATA 00,01
0172:  DATA 02,05
0174:  DATA 03,04
0176:  DATA 00,20
0178:  DATA 02,05
017A:  DATA 03,04
017C:  DATA 00,01
017E:  DATA 02,05
0180:  DATA 03,07
0182:  DATA 20,20
0184:  DATA 07,05
0186:  DATA 03,04
0188:  DATA 20,20
018A:  DATA 20,20
018C:  DATA 20,20
018E:  DATA 20,20
0190:  DATA 20,20
0192:  DATA 20,20
0194:  CLRF   FF7
0196:  ADDLW  A4
0198:  MOVWF  FF6
019A:  MOVLW  01
019C:  ADDWFC FF7,F
019E:  TBLRD*+
01A0:  MOVF   FF5,W
01A2:  RETURN 0
01A4:  DATA 07,0F
01A6:  DATA 1F,1F
01A8:  DATA 1F,1F
01AA:  DATA 1F,1F
01AC:  DATA 1F,1F
01AE:  DATA 1F,00
01B0:  DATA 00,00
01B2:  DATA 00,00
01B4:  DATA 1C,1E
01B6:  DATA 1F,1F
01B8:  DATA 1F,1F
01BA:  DATA 1F,1F
01BC:  DATA 00,00
01BE:  DATA 00,00
01C0:  DATA 00,1F
01C2:  DATA 1F,1F
01C4:  DATA 1F,1F
01C6:  DATA 1F,1F
01C8:  DATA 1F,1F
01CA:  DATA 1E,1C
01CC:  DATA 1F,1F
01CE:  DATA 1F,1F
01D0:  DATA 1F,1F
01D2:  DATA 0F,07
01D4:  DATA 1F,1F
01D6:  DATA 1F,00
01D8:  DATA 00,00
01DA:  DATA 1F,1F
01DC:  DATA 1F,1F
01DE:  DATA 1F,1F
01E0:  DATA 1F,1F
01E2:  DATA 1F,1F
01E4:  CLRF   FF7
01E6:  ADDLW  F4
01E8:  MOVWF  FF6
01EA:  MOVLW  01
01EC:  ADDWFC FF7,F
01EE:  TBLRD*+
01F0:  MOVF   FF5,W
01F2:  RETURN 0
01F4:  DATA 80,C0
01F6:  DATA 94,D4
01F8:  DATA 20,20
01FA:  DATA 20,20
01FC:  DATA 20,20
01FE:  DATA 20,20
0200:  DATA 20,20
0202:  DATA 20,20
0204:  DATA 20,20
0206:  DATA 20,20
0208:  DATA 20,20
020A:  DATA 20,20
020C:  DATA 00,00
020E:  DATA 20,20
0210:  DATA 20,20
0212:  DATA 20,20
0214:  DATA 20,20
0216:  DATA 20,20
0218:  DATA 20,20
021A:  DATA 20,20
021C:  DATA 20,20
021E:  DATA 20,20
0220:  DATA 20,20
0222:  DATA 00,00
0224:  DATA 20,20
0226:  DATA 20,20
0228:  DATA 20,20
022A:  DATA 20,20
022C:  DATA 20,20
022E:  DATA 20,20
0230:  DATA 20,20
0232:  DATA 20,20
0234:  DATA 20,20
0236:  DATA 20,20
0238:  DATA 00,00
023A:  DATA 20,20
023C:  DATA 20,20
023E:  DATA 20,20
0240:  DATA 20,20
0242:  DATA 20,20
0244:  DATA 20,20
0246:  DATA 20,20
0248:  DATA 20,20
024A:  DATA 20,20
024C:  DATA 20,20
024E:  DATA 00,00
0250:  DATA 20,20
0252:  DATA 20,20
0254:  DATA 20,20
0256:  DATA 20,20
0258:  DATA 20,20
025A:  DATA 20,20
025C:  DATA 20,20
025E:  DATA 20,20
0260:  DATA 20,20
0262:  DATA 20,20
0264:  DATA 00,00
0266:  DATA 20,20
0268:  DATA 20,20
026A:  DATA 20,20
026C:  DATA 20,20
026E:  DATA 20,20
0270:  DATA 20,20
0272:  DATA 20,20
0274:  DATA 20,20
0276:  DATA 20,20
0278:  DATA 20,20
027A:  DATA 00,00
027C:  DATA 20,20
027E:  DATA 20,20
0280:  DATA 20,20
0282:  DATA 20,20
0284:  DATA 20,20
0286:  DATA 20,20
0288:  DATA 20,20
028A:  DATA 20,20
028C:  DATA 20,20
028E:  DATA 20,20
0290:  DATA 00,00
0292:  DATA 20,20
0294:  DATA 00,00
0296:  DATA 20,20
0298:  DATA 00,00
029A:  DATA 20,20
029C:  DATA 00,00
*
05BE:  MOVF   44,W
05C0:  ANDLW  07
05C2:  MOVWF  00
05C4:  RRCF   44,W
05C6:  MOVWF  01
05C8:  RRCF   01,F
05CA:  RRCF   01,F
05CC:  MOVLW  1F
05CE:  ANDWF  01,F
05D0:  MOVF   01,W
05D2:  ADDWF  46,W
05D4:  MOVWF  FE9
05D6:  MOVLW  00
05D8:  ADDWFC 47,W
05DA:  MOVWF  FEA
05DC:  CLRF   01
05DE:  INCF   01,F
05E0:  INCF   00,F
05E2:  BRA    05E6
05E4:  RLCF   01,F
05E6:  DECFSZ 00,F
05E8:  BRA    05E4
05EA:  MOVF   45,F
05EC:  BZ    05F4
05EE:  MOVF   01,W
05F0:  IORWF  FEF,F
05F2:  BRA    05FA
05F4:  COMF   01,F
05F6:  MOVF   01,W
05F8:  ANDWF  FEF,F
05FA:  RETURN 0
05FC:  MOVF   44,W
05FE:  ANDLW  07
0600:  MOVWF  00
0602:  RRCF   44,W
0604:  MOVWF  01
0606:  RRCF   01,F
0608:  RRCF   01,F
060A:  MOVLW  1F
060C:  ANDWF  01,F
060E:  MOVF   01,W
0610:  ADDWF  45,W
0612:  MOVWF  FE9
0614:  MOVLW  00
0616:  ADDWFC 46,W
0618:  MOVWF  FEA
061A:  MOVFF  FEF,01
061E:  INCF   00,F
0620:  BRA    0624
0622:  RRCF   01,F
0624:  DECFSZ 00,F
0626:  BRA    0622
0628:  MOVLW  01
062A:  ANDWF  01,F
062C:  RETURN 0
062E:  BTFSC  FD8.1
0630:  BRA    0638
0632:  CLRF   FEA
0634:  MOVLW  50
0636:  MOVWF  FE9
0638:  CLRF   00
063A:  CLRF   01
063C:  CLRF   02
063E:  CLRF   03
0640:  CLRF   50
0642:  CLRF   51
0644:  CLRF   52
0646:  CLRF   53
0648:  MOVF   4F,W
064A:  IORWF  4E,W
064C:  IORWF  4D,W
064E:  IORWF  4C,W
0650:  BZ    06AA
0652:  MOVLW  20
0654:  MOVWF  54
0656:  BCF    FD8.0
0658:  RLCF   48,F
065A:  RLCF   49,F
065C:  RLCF   4A,F
065E:  RLCF   4B,F
0660:  RLCF   50,F
0662:  RLCF   51,F
0664:  RLCF   52,F
0666:  RLCF   53,F
0668:  MOVF   4F,W
066A:  SUBWF  53,W
066C:  BNZ   067E
066E:  MOVF   4E,W
0670:  SUBWF  52,W
0672:  BNZ   067E
0674:  MOVF   4D,W
0676:  SUBWF  51,W
0678:  BNZ   067E
067A:  MOVF   4C,W
067C:  SUBWF  50,W
067E:  BNC   069E
0680:  MOVF   4C,W
0682:  SUBWF  50,F
0684:  MOVF   4D,W
0686:  BTFSS  FD8.0
0688:  INCFSZ 4D,W
068A:  SUBWF  51,F
068C:  MOVF   4E,W
068E:  BTFSS  FD8.0
0690:  INCFSZ 4E,W
0692:  SUBWF  52,F
0694:  MOVF   4F,W
0696:  BTFSS  FD8.0
0698:  INCFSZ 4F,W
069A:  SUBWF  53,F
069C:  BSF    FD8.0
069E:  RLCF   00,F
06A0:  RLCF   01,F
06A2:  RLCF   02,F
06A4:  RLCF   03,F
06A6:  DECFSZ 54,F
06A8:  BRA    0656
06AA:  MOVFF  50,FEF
06AE:  MOVFF  51,FEC
06B2:  MOVFF  52,FEC
06B6:  MOVFF  53,FEC
06BA:  RETURN 0
*
092E:  ADDWF  FE8,W
0930:  CLRF   FF7
0932:  RLCF   FF7,F
0934:  ADDLW  49
0936:  MOVWF  FF6
0938:  MOVLW  09
093A:  ADDWFC FF7,F
093C:  TBLRD*-
093E:  MOVF   FF5,W
0940:  MOVWF  FFA
0942:  TBLRD*
0944:  MOVF   FF5,W
0946:  MOVWF  FF9
0948:  DATA C0,07
094A:  DATA FC,07
094C:  DATA 62,08
094E:  DATA C8,08
*
0964:  TBLRD*+
0966:  MOVF   FF5,F
0968:  BZ    0982
096A:  MOVFF  FF6,42
096E:  MOVFF  FF7,43
0972:  MOVFF  FF5,48
0976:  RCALL  0548
0978:  MOVFF  42,FF6
097C:  MOVFF  43,FF7
0980:  BRA    0964
0982:  RETURN 0
*
0AE8:  MOVF   47,W
0AEA:  CLRF   01
0AEC:  SUBWF  46,W
0AEE:  BC    0AF6
0AF0:  MOVFF  46,00
0AF4:  BRA    0B0E
0AF6:  CLRF   00
0AF8:  MOVLW  08
0AFA:  MOVWF  48
0AFC:  RLCF   46,F
0AFE:  RLCF   00,F
0B00:  MOVF   47,W
0B02:  SUBWF  00,W
0B04:  BTFSC  FD8.0
0B06:  MOVWF  00
0B08:  RLCF   01,F
0B0A:  DECFSZ 48,F
0B0C:  BRA    0AFC
0B0E:  RETURN 0
0B10:  MOVF   01,W
0B12:  MOVFF  42,46
0B16:  MOVLW  64
0B18:  MOVWF  47
0B1A:  RCALL  0AE8
0B1C:  MOVFF  00,42
0B20:  MOVF   01,W
0B22:  MOVLW  30
0B24:  BNZ   0B34
0B26:  BTFSS  43.1
0B28:  BRA    0B42
0B2A:  BTFSC  43.3
0B2C:  BRA    0B42
0B2E:  BTFSC  43.4
0B30:  MOVLW  20
0B32:  BRA    0B3A
0B34:  BCF    43.3
0B36:  BCF    43.4
0B38:  BSF    43.0
0B3A:  ADDWF  01,F
0B3C:  MOVFF  01,48
0B40:  RCALL  0548
0B42:  MOVFF  42,46
0B46:  MOVLW  0A
0B48:  MOVWF  47
0B4A:  RCALL  0AE8
0B4C:  MOVFF  00,42
0B50:  MOVF   01,W
0B52:  MOVLW  30
0B54:  BNZ   0B62
0B56:  BTFSC  43.3
0B58:  BRA    0B6A
0B5A:  BTFSS  43.0
0B5C:  BRA    0B6A
0B5E:  BTFSC  43.4
0B60:  MOVLW  20
0B62:  ADDWF  01,F
0B64:  MOVFF  01,48
0B68:  RCALL  0548
0B6A:  MOVLW  30
0B6C:  ADDWF  42,F
0B6E:  MOVFF  42,48
0B72:  RCALL  0548
0B74:  RETURN 0
0B76:  MOVF   43,W
0B78:  XORWF  44,W
0B7A:  ANDLW  80
0B7C:  MOVWF  46
0B7E:  BTFSS  43.7
0B80:  BRA    0B86
0B82:  COMF   43,F
0B84:  INCF   43,F
0B86:  BTFSS  44.7
0B88:  BRA    0B8E
0B8A:  COMF   44,F
0B8C:  INCF   44,F
0B8E:  MOVF   44,W
0B90:  CLRF   01
0B92:  SUBWF  43,W
0B94:  BC    0B9C
0B96:  MOVFF  43,00
0B9A:  BRA    0BB4
0B9C:  CLRF   00
0B9E:  MOVLW  08
0BA0:  MOVWF  45
0BA2:  RLCF   43,F
0BA4:  RLCF   00,F
0BA6:  MOVF   44,W
0BA8:  SUBWF  00,W
0BAA:  BTFSC  FD8.0
0BAC:  MOVWF  00
0BAE:  RLCF   01,F
0BB0:  DECFSZ 45,F
0BB2:  BRA    0BA2
0BB4:  BTFSS  46.7
0BB6:  BRA    0BBC
0BB8:  COMF   01,F
0BBA:  INCF   01,F
0BBC:  RETURN 0
0BBE:  CLRF   00
0BC0:  CLRF   01
0BC2:  MOVF   47,W
0BC4:  BCF    FD8.0
0BC6:  BTFSC  48.0
0BC8:  ADDWF  00,F
0BCA:  RRCF   00,F
0BCC:  RRCF   01,F
0BCE:  BTFSC  48.1
0BD0:  ADDWF  00,F
0BD2:  RRCF   00,F
0BD4:  RRCF   01,F
0BD6:  BTFSC  48.2
0BD8:  ADDWF  00,F
0BDA:  RRCF   00,F
0BDC:  RRCF   01,F
0BDE:  BTFSC  48.3
0BE0:  ADDWF  00,F
0BE2:  RRCF   00,F
0BE4:  RRCF   01,F
0BE6:  BTFSC  48.4
0BE8:  ADDWF  00,F
0BEA:  RRCF   00,F
0BEC:  RRCF   01,F
0BEE:  BTFSC  48.5
0BF0:  ADDWF  00,F
0BF2:  RRCF   00,F
0BF4:  RRCF   01,F
0BF6:  BTFSC  48.6
0BF8:  ADDWF  00,F
0BFA:  RRCF   00,F
0BFC:  RRCF   01,F
0BFE:  BTFSC  48.7
0C00:  ADDWF  00,F
0C02:  RRCF   00,F
0C04:  RRCF   01,F
0C06:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device      adc=10
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use         delay(clock=20000000)
*
038E:  CLRF   FEA
0390:  MOVLW  44
0392:  MOVWF  FE9
0394:  MOVF   FEF,W
0396:  BZ    03B2
0398:  MOVLW  06
039A:  MOVWF  01
039C:  CLRF   00
039E:  DECFSZ 00,F
03A0:  BRA    039E
03A2:  DECFSZ 01,F
03A4:  BRA    039C
03A6:  MOVLW  7B
03A8:  MOVWF  00
03AA:  DECFSZ 00,F
03AC:  BRA    03AA
03AE:  DECFSZ FEF,F
03B0:  BRA    0398
03B2:  RETURN 0
*
0510:  MOVLW  03
0512:  SUBWF  4C,F
0514:  BNC   0528
0516:  CLRF   FEA
0518:  MOVLW  4C
051A:  MOVWF  FE9
051C:  MOVF   FEF,W
051E:  BZ    0528
0520:  BRA    0524
0522:  BRA    0524
0524:  DECFSZ FEF,F
0526:  BRA    0522
0528:  RETURN 0
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... #include     <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit         TIM3IF                 = 0xFA1.1
.................... #bit         SSDO                   = 0xF84.2
.................... #bit         SSCK                   = 0xF84.0
.................... #define      analog_pins            an0_to_an2
.................... #define      lm35a_channel          0
.................... #define      lm35b_channel          1
.................... #define      gp2d12_channel         2
.................... #define      photoresis_channel     3
.................... #define      DCMOTOR_IN1            PIN_c1
.................... #define      TOUCH_PIN              pin_a5
.................... #define      DHT11_PIN              pin_d1
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      SRF04_TRIGER           PIN_E2
.................... #define      soft_i2c_sda           pin_b0
.................... #define      soft_i2c_scl           pin_b1
.................... #define      bt0                    pin_b5
.................... #define      bt1                    pin_b4
.................... #define      bt2                    pin_b3
.................... #define      bt3                    pin_b2
.................... #define      on                     bt0      
.................... #define      off                    bt1
.................... #define      inv                    bt2
.................... #define      up                     bt0    
.................... #define      dw                     bt1
.................... #define      clr                    bt2
.................... #define      mod                    bt3
.................... #define      stop                   bt3
.................... #define      on1                    bt0     
.................... #define      off1                   bt1
.................... #define      on2                    bt2       
.................... #define      off2                   bt3
.................... #define      S7SEG_RCK              pin_d5
.................... #define      LED32_RCK              pin_d4
.................... #define      D7SEG_RCK              pin_d6
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte 
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct 
.................... {
....................       int1      STEP_MOTOR_ENABLE;
....................       int1      STEP_MOTOR_IN1;
....................       int1      STEP_MOTOR_IN2;
....................       int1      STEP_MOTOR_IN3;
....................       int1      STEP_MOTOR_IN4;
....................       int1      DC_MOTOR_ENABLE;
....................       int1      PWRKEY;
....................       int1      NC_PIN1;          
....................       int1      BUZZER;
....................       int1      TRIAC_1;
....................       int1      TRIAC_2;
....................       int1      RELAY_1;
....................       int1      RELAY_2 ;
....................       int1      NC_PIN2 ;  
....................       int1      NC_PIN3;   
....................       int1      NC_PIN4;  
.................... }RBDC_STRUCT;
.................... typedef union
.................... {
....................       RBDC_STRUCT         bit;
....................       unsigned int8       xbyte[2];
.................... }RBDC_UNION;
.................... 
.................... typedef struct 
.................... {
....................     RBDC_UNION           rbdc;
....................     unsigned int8        lcddata; 
....................     unsigned int8        lcdcontrol;
....................     unsigned int8        glcddata;
....................     unsigned int8        glcdcontrol;    
.................... }SYSTEM_VAR_STRUCT;
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0};
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[4];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT;
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on();
.................... result buzzer_off();
.................... result relay_1_on();
.................... result relay_1_off();
.................... result relay_2_on();
.................... result relay_2_off();
.................... result triac_1_on();
.................... result triac_1_off();
.................... result triac_2_on();
.................... result triac_2_off();
.................... result DCMOTOR_ENABLE();
.................... result STEPMOTOR_ENABLE();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... void SSPI_WRITE(unsigned int8 x);
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]);
*
033E:  MOVFF  26,4E
0342:  RCALL  02B0
0344:  MOVFF  25,4E
0348:  RCALL  02B0
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]);
034A:  MOVFF  24,4E
034E:  RCALL  02B0
0350:  MOVFF  23,4E
0354:  RCALL  02B0
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0356:  BCF    F95.4
0358:  BSF    F8C.4
035A:  BCF    F95.4
035C:  BCF    F8C.4
....................      return OK; 
035E:  MOVLW  00
0360:  MOVWF  01
0362:  GOTO   04CA (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]);
0366:  MOVFF  27,4E
036A:  RCALL  02B0
036C:  MOVFF  28,4E
0370:  RCALL  02B0
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]);
0372:  MOVFF  29,4E
0376:  RCALL  02B0
0378:  MOVFF  2A,4E
037C:  RCALL  02B0
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
037E:  BCF    F95.6
0380:  BSF    F8C.6
0382:  BCF    F95.6
0384:  BCF    F8C.6
....................       return OK;
0386:  MOVLW  00
0388:  MOVWF  01
038A:  GOTO   04CC (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1)
*
03B4:  MOVLW  80
03B6:  MOVWF  42
03B8:  CLRF   43
03BA:  MOVF   43,W
03BC:  SUBLW  07
03BE:  BNC   0402
....................       {
....................             SSPI_WRITE(i);
03C0:  MOVFF  42,4E
03C4:  RCALL  02B0
....................             SSPI_WRITE(~s7seg.led[n]);     
03C6:  CLRF   03
03C8:  MOVF   43,W
03CA:  ADDLW  2B
03CC:  MOVWF  FE9
03CE:  MOVLW  00
03D0:  ADDWFC 03,W
03D2:  MOVWF  FEA
03D4:  MOVF   FEF,W
03D6:  XORLW  FF
03D8:  MOVWF  44
03DA:  MOVWF  4E
03DC:  RCALL  02B0
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
03DE:  BCF    F95.5
03E0:  BSF    F8C.5
03E2:  BCF    F95.5
03E4:  BCF    F8C.5
....................             delay_ms(1);
03E6:  MOVLW  01
03E8:  MOVWF  44
03EA:  RCALL  038E
....................             SSPI_WRITE(~0xff);
03EC:  CLRF   4E
03EE:  RCALL  02B0
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
03F0:  BCF    F95.5
03F2:  BSF    F8C.5
03F4:  BCF    F95.5
03F6:  BCF    F8C.5
03F8:  MOVF   43,W
03FA:  INCF   43,F
03FC:  BCF    FD8.0
03FE:  RRCF   42,F
0400:  BRA    03BA
....................       }
....................       return OK;
0402:  MOVLW  00
0404:  MOVWF  01
0406:  GOTO   04CE (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {
....................      unsigned int8 cot;
....................      for(cot=0;cot<4;cot++)
....................      {
....................         output_bit(pin_b7,cot&0x02);
....................         output_bit(pin_b6,cot&0x01);
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);             
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);               
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);            
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4);
....................      }
....................      return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_glcd_lcd()
.................... {      
....................     SSPI_WRITE(system_var.glcdcontrol);             
040A:  MOVFF  1E,4E
040E:  RCALL  02B0
....................     SSPI_WRITE(system_var.glcddata);
0410:  MOVFF  1D,4E
0414:  RCALL  02B0
....................     SSPI_WRITE(system_var.lcdcontrol);       
0416:  MOVFF  1C,4E
041A:  RCALL  02B0
....................     SSPI_WRITE(system_var.lcddata);           
041C:  MOVFF  1B,4E
0420:  RCALL  02B0
....................     output_high(LCD_RCK);     
0422:  BCF    F95.2
0424:  BSF    F8C.2
....................     output_low(LCD_RCK);
0426:  BCF    F95.2
0428:  BCF    F8C.2
....................     return OK;
042A:  MOVLW  00
042C:  MOVWF  01
042E:  RETURN 0
.................... }
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {     
....................     system_var.lcdcontrol = ~lcd_signal;
0430:  MOVF   4C,W
0432:  MOVWF  1C
0434:  COMF   1C,F
....................     system_var.lcddata    = ~lcd_ins_hthi;      
0436:  MOVFF  4D,1B
043A:  COMF   1B,F
....................     private_write_glcd_lcd();
043C:  RCALL  040A
....................     return OK;
043E:  MOVLW  00
0440:  MOVWF  01
0442:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     system_var.glcdcontrol = ~glcd_signal;
0444:  MOVF   42,W
0446:  MOVWF  1E
0448:  COMF   1E,F
....................     system_var.glcddata    = ~glcd_ins_hthi;     
044A:  MOVFF  43,1D
044E:  COMF   1D,F
....................     private_write_glcd_lcd();
0450:  RCALL  040A
....................     return OK;
0452:  MOVLW  00
0454:  MOVWF  01
0456:  GOTO   04DA (RETURN)
.................... }
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {     
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3);
045A:  CLRF   4B
045C:  MOVFF  49,4E
0460:  RCALL  02B0
0462:  MOVFF  48,4E
0466:  RCALL  02B0
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2);
0468:  CLRF   4B
046A:  MOVFF  47,4E
046E:  RCALL  02B0
0470:  MOVFF  46,4E
0474:  RCALL  02B0
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1);
0476:  CLRF   4B
0478:  MOVFF  45,4E
047C:  RCALL  02B0
047E:  MOVFF  44,4E
0482:  RCALL  02B0
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang);
0484:  CLRF   4B
0486:  MOVFF  43,4E
048A:  RCALL  02B0
048C:  MOVFF  42,4E
0490:  RCALL  02B0
....................       output_high(matrix_rck);
0492:  BCF    F95.7
0494:  BSF    F8C.7
....................       output_low(matrix_rck); 
0496:  BCF    F95.7
0498:  BCF    F8C.7
....................       return OK;
049A:  MOVLW  00
049C:  MOVWF  01
049E:  GOTO   04EC (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_buzzer_relay()
.................... {       
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);      
*
0322:  MOVFF  1A,4E
0326:  RCALL  02B0
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]);
0328:  MOVFF  19,4E
032C:  RCALL  02B0
....................       output_high(rbdc_rck);
032E:  BCF    F95.3
0330:  BSF    F8C.3
....................       output_low(rbdc_rck); 
0332:  BCF    F95.3
0334:  BCF    F8C.3
....................       return OK;
0336:  MOVLW  00
0338:  MOVWF  01
033A:  GOTO   04C0 (RETURN)
.................... }
.................... result buzzer_on()
.................... {    
....................       system_var.rbdc.bit.buzzer=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result buzzer_off()
.................... {     
....................       system_var.rbdc.bit.buzzer=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_1_on()
.................... {    
....................       system_var.rbdc.bit.relay_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_1_off()
.................... {    
....................       system_var.rbdc.bit.relay_1=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_2_on()
.................... {    
....................       system_var.rbdc.bit.relay_2=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_2_off()
.................... {    
....................       system_var.rbdc.bit.relay_2=0;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_on()
.................... {    
....................       system_var.rbdc.bit.triac_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_off()
.................... {    
....................       system_var.rbdc.bit.triac_1=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result triac_2_on()
.................... {    
....................       system_var.rbdc.bit.triac_2=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result triac_2_off()
.................... {    
....................       system_var.rbdc.bit.triac_2=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result DCMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1;
....................       private_write_buzzer_relay();  
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................       setup_ccp1(ccp_pwm);  
....................       setup_ccp2(ccp_pwm);  
....................       return OK;
.................... }
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  }
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  }
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  }
....................      return OK;
.................... }
.................... 
.................... result STEPMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.step_motor_enable=1;
....................       return OK;
.................... }
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07};
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0);
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1);
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2);
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3);
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................      output_high(ALLMODULE_G);  
*
04A2:  BCF    F95.0
04A4:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                   
04A6:  MOVLW  FF
04A8:  MOVWF  F92
04AA:  MOVLW  3C
04AC:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                               
04AE:  MOVLW  F1
04B0:  MOVWF  F94
04B2:  MOVLW  00
04B4:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00); 
04B6:  MOVWF  F95
04B8:  CLRF   F95
04BA:  CLRF   F8C
....................      port_b_pullups(0xff); 
04BC:  BCF    FF1.7
....................      private_write_buzzer_relay();
04BE:  BRA    0322
....................      led32.ledx32=0;
04C0:  CLRF   26
04C2:  CLRF   25
04C4:  CLRF   24
04C6:  CLRF   23
....................      led32_display();
04C8:  BRA    033E
....................      d7seg_display();
04CA:  BRA    0366
....................      s7seg_display();
04CC:  BRA    03B4
....................      write_lcd20x4(0xff,0xff);
04CE:  SETF   4C
04D0:  SETF   4D
04D2:  RCALL  0430
....................      write_glcd128x64(0xff,0xff);
04D4:  SETF   42
04D6:  SETF   43
04D8:  BRA    0444
....................      write_ledmatrix(0,0,0,0); 
04DA:  CLRF   43
04DC:  CLRF   42
04DE:  CLRF   45
04E0:  CLRF   44
04E2:  CLRF   47
04E4:  CLRF   46
04E6:  CLRF   49
04E8:  CLRF   48
04EA:  BRA    045A
....................      output_low(ALLMODULE_G);  
04EC:  BCF    F95.0
04EE:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);        
04F0:  MOVF   FC0,W
04F2:  ANDLW  C0
04F4:  IORLW  02
04F6:  MOVWF  FC0
04F8:  BSF    FC0.7
04FA:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);   
04FC:  MOVF   FC1,W
04FE:  ANDLW  C0
0500:  IORLW  0C
0502:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8);
0504:  MOVLW  B5
0506:  MOVWF  FB1
....................      return OK;
0508:  MOVLW  00
050A:  MOVWF  01
050C:  GOTO   0D2E (RETURN)
.................... }
.................... void SSPI_WRITE(unsigned int8 x)
.................... { 
....................          if(x&0x80) ssdo=1; 
*
02B0:  BTFSS  4E.7
02B2:  BRA    02B8
02B4:  BSF    F84.2
02B6:  BRA    02BA
....................          else       ssdo=0;
02B8:  BCF    F84.2
....................          ssck=0;    ssck=1;   
02BA:  BCF    F84.0
02BC:  BSF    F84.0
....................          if(x&0x40) ssdo=1; 
02BE:  BTFSS  4E.6
02C0:  BRA    02C6
02C2:  BSF    F84.2
02C4:  BRA    02C8
....................          else       ssdo=0;
02C6:  BCF    F84.2
....................          ssck=0;    ssck=1;  
02C8:  BCF    F84.0
02CA:  BSF    F84.0
....................          if(x&0x20) ssdo=1; 
02CC:  BTFSS  4E.5
02CE:  BRA    02D4
02D0:  BSF    F84.2
02D2:  BRA    02D6
....................          else       ssdo=0;
02D4:  BCF    F84.2
....................          ssck=0;    ssck=1;  
02D6:  BCF    F84.0
02D8:  BSF    F84.0
....................          if(x&0x10) ssdo=1; 
02DA:  BTFSS  4E.4
02DC:  BRA    02E2
02DE:  BSF    F84.2
02E0:  BRA    02E4
....................          else       ssdo=0;
02E2:  BCF    F84.2
....................          ssck=0;    ssck=1;  
02E4:  BCF    F84.0
02E6:  BSF    F84.0
....................          if(x&0x08) ssdo=1; 
02E8:  BTFSS  4E.3
02EA:  BRA    02F0
02EC:  BSF    F84.2
02EE:  BRA    02F2
....................          else       ssdo=0;
02F0:  BCF    F84.2
....................          ssck=0;    ssck=1;  
02F2:  BCF    F84.0
02F4:  BSF    F84.0
....................          if(x&0x04) ssdo=1; 
02F6:  BTFSS  4E.2
02F8:  BRA    02FE
02FA:  BSF    F84.2
02FC:  BRA    0300
....................          else       ssdo=0;
02FE:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0300:  BCF    F84.0
0302:  BSF    F84.0
....................          if(x&0x02) ssdo=1; 
0304:  BTFSS  4E.1
0306:  BRA    030C
0308:  BSF    F84.2
030A:  BRA    030E
....................          else       ssdo=0;
030C:  BCF    F84.2
....................          ssck=0;    ssck=1;  
030E:  BCF    F84.0
0310:  BSF    F84.0
....................          if(x&0x01) ssdo=1; 
0312:  BTFSS  4E.0
0314:  BRA    031A
0316:  BSF    F84.2
0318:  BRA    031C
....................          else       ssdo=0;
031A:  BCF    F84.2
....................          ssck=0;    ssck=1;       
031C:  BCF    F84.0
031E:  BSF    F84.0
0320:  RETURN 0
.................... }
.................... #endif
.................... 
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
06BC:  MOVF   FB2,W
06BE:  MOVFF  FB3,03
06C2:  ADDWF  1F,F
06C4:  MOVF   FB3,W
06C6:  ADDWFC 20,F
06C8:  MOVLW  00
06CA:  ADDWFC 21,F
06CC:  ADDWFC 22,F
06CE:  CLRF   FB3
06D0:  MOVLW  02
06D2:  MOVWF  FB2
06D4:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
06D6:  BTFSS  FA1.1
06D8:  BRA    06E2
06DA:  MOVLW  01
06DC:  ADDWF  21,F
06DE:  MOVLW  00
06E0:  ADDWFC 22,F
06E2:  BCF    FA1.1
....................       return delay.timeline/625;
06E4:  BCF    FD8.1
06E6:  MOVFF  22,4B
06EA:  MOVFF  21,4A
06EE:  MOVFF  20,49
06F2:  MOVFF  1F,48
06F6:  CLRF   4F
06F8:  CLRF   4E
06FA:  MOVLW  02
06FC:  MOVWF  4D
06FE:  MOVLW  71
0700:  MOVWF  4C
0702:  RCALL  062E
0704:  MOVFF  01,02
0708:  MOVFF  00,01
070C:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
070E:  MOVF   FB2,W
0710:  MOVFF  FB3,03
0714:  ADDWF  1F,F
0716:  MOVF   FB3,W
0718:  ADDWFC 20,F
071A:  MOVLW  00
071C:  ADDWFC 21,F
071E:  ADDWFC 22,F
0720:  CLRF   FB3
0722:  MOVLW  02
0724:  MOVWF  FB2
0726:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
0728:  BTFSS  FA1.1
072A:  BRA    0734
072C:  MOVLW  01
072E:  ADDWF  21,F
0730:  MOVLW  00
0732:  ADDWFC 22,F
0734:  BCF    FA1.1
....................       tam = delay.timeline/625;
0736:  BCF    FD8.1
0738:  MOVFF  22,4B
073C:  MOVFF  21,4A
0740:  MOVFF  20,49
0744:  MOVFF  1F,48
0748:  CLRF   4F
074A:  CLRF   4E
074C:  MOVLW  02
074E:  MOVWF  4D
0750:  MOVLW  71
0752:  MOVWF  4C
0754:  RCALL  062E
0756:  MOVFF  01,47
075A:  MOVFF  00,46
....................       if(t<=tam) return tam-t;
075E:  MOVF   45,W
0760:  SUBWF  47,W
0762:  BNC   0782
0764:  BNZ   076C
0766:  MOVF   44,W
0768:  SUBWF  46,W
076A:  BNC   0782
076C:  MOVF   44,W
076E:  SUBWF  46,W
0770:  MOVWF  00
0772:  MOVF   45,W
0774:  SUBWFB 47,W
0776:  MOVWF  03
0778:  MOVFF  00,01
077C:  MOVWF  02
077E:  BRA    079E
0780:  BRA    079E
....................       else       return 0xffff-t + tam;
0782:  MOVLW  FF
0784:  BSF    FD8.0
0786:  SUBFWB 44,W
0788:  MOVWF  48
078A:  MOVLW  FF
078C:  SUBFWB 45,W
078E:  MOVWF  49
0790:  MOVF   46,W
0792:  ADDWF  48,W
0794:  MOVWF  01
0796:  MOVF   47,W
0798:  ADDWFC 49,W
079A:  MOVWF  03
079C:  MOVWF  02
079E:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
07A0:  MOVFF  42,44
07A4:  MOVLW  01
07A6:  MOVWF  45
07A8:  MOVLW  0F
07AA:  MOVWF  47
07AC:  MOVLW  92
07AE:  MOVWF  46
07B0:  RCALL  05BE
....................       switch (step)
07B2:  MOVF   37,W
07B4:  ADDLW  FC
07B6:  BTFSC  FD8.0
07B8:  BRA    0928
07BA:  ADDLW  04
07BC:  GOTO   092E
....................       {
....................           case 0:
....................                  if(input(pin)==0)
07C0:  MOVFF  42,44
07C4:  MOVLW  01
07C6:  MOVWF  45
07C8:  MOVLW  0F
07CA:  MOVWF  47
07CC:  MOVLW  92
07CE:  MOVWF  46
07D0:  RCALL  05BE
07D2:  MOVFF  42,44
07D6:  MOVLW  0F
07D8:  MOVWF  46
07DA:  MOVLW  80
07DC:  MOVWF  45
07DE:  RCALL  05FC
07E0:  BTFSC  01.0
07E2:  BRA    07FA
....................                   {
....................                         oldpin   = pin;
07E4:  MOVFF  43,34
07E8:  MOVFF  42,33
....................                         t        = delay_start();
07EC:  RCALL  06BC
07EE:  MOVFF  02,36
07F2:  MOVFF  01,35
....................                         step     = 1;
07F6:  MOVLW  01
07F8:  MOVWF  37
....................                   }
....................                  break;
07FA:  BRA    0928
....................            case 1:
....................                  if(input(oldpin))step = 0;
07FC:  MOVFF  33,44
0800:  MOVLW  01
0802:  MOVWF  45
0804:  MOVLW  0F
0806:  MOVWF  47
0808:  MOVLW  92
080A:  MOVWF  46
080C:  RCALL  05BE
080E:  MOVFF  33,44
0812:  MOVLW  0F
0814:  MOVWF  46
0816:  MOVLW  80
0818:  MOVWF  45
081A:  RCALL  05FC
081C:  BTFSS  01.0
081E:  BRA    0824
0820:  CLRF   37
0822:  BRA    0860
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
0824:  MOVF   33,W
0826:  SUBWF  42,W
0828:  BNZ   0860
082A:  MOVF   34,W
082C:  SUBWF  43,W
082E:  BNZ   0860
0830:  MOVFF  36,45
0834:  MOVFF  35,44
0838:  RCALL  070E
083A:  MOVFF  02,45
083E:  MOVFF  01,44
0842:  MOVF   45,F
0844:  BNZ   084C
0846:  MOVF   44,W
0848:  SUBLW  1D
084A:  BC    0860
....................                    {
....................                       t    = delay_start();
084C:  RCALL  06BC
084E:  MOVFF  02,36
0852:  MOVFF  01,35
....................                       step = 2;
0856:  MOVLW  02
0858:  MOVWF  37
....................                       return OK;
085A:  MOVLW  00
085C:  MOVWF  01
085E:  BRA    092C
....................                    }
....................                  break;
0860:  BRA    0928
....................             case 2:
....................                  if(input(oldpin))step = 0;
0862:  MOVFF  33,44
0866:  MOVLW  01
0868:  MOVWF  45
086A:  MOVLW  0F
086C:  MOVWF  47
086E:  MOVLW  92
0870:  MOVWF  46
0872:  RCALL  05BE
0874:  MOVFF  33,44
0878:  MOVLW  0F
087A:  MOVWF  46
087C:  MOVLW  80
087E:  MOVWF  45
0880:  RCALL  05FC
0882:  BTFSS  01.0
0884:  BRA    088A
0886:  CLRF   37
0888:  BRA    08C6
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
088A:  MOVF   33,W
088C:  SUBWF  42,W
088E:  BNZ   08C6
0890:  MOVF   34,W
0892:  SUBWF  43,W
0894:  BNZ   08C6
0896:  MOVFF  36,45
089A:  MOVFF  35,44
089E:  RCALL  070E
08A0:  MOVFF  02,45
08A4:  MOVFF  01,44
08A8:  MOVF   02,W
08AA:  SUBLW  00
08AC:  BC    08C6
08AE:  XORLW  FF
08B0:  BNZ   08B8
08B2:  MOVF   44,W
08B4:  SUBLW  F3
08B6:  BC    08C6
....................                    {
....................                        t        = delay_start();
08B8:  RCALL  06BC
08BA:  MOVFF  02,36
08BE:  MOVFF  01,35
....................                        step     = 3;
08C2:  MOVLW  03
08C4:  MOVWF  37
....................                    } 
....................                  break;
08C6:  BRA    0928
....................             case 3:
....................                    if(input(oldpin))step = 0; 
08C8:  MOVFF  33,44
08CC:  MOVLW  01
08CE:  MOVWF  45
08D0:  MOVLW  0F
08D2:  MOVWF  47
08D4:  MOVLW  92
08D6:  MOVWF  46
08D8:  RCALL  05BE
08DA:  MOVFF  33,44
08DE:  MOVLW  0F
08E0:  MOVWF  46
08E2:  MOVLW  80
08E4:  MOVWF  45
08E6:  RCALL  05FC
08E8:  BTFSS  01.0
08EA:  BRA    08F0
08EC:  CLRF   37
08EE:  BRA    0928
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
08F0:  MOVF   33,W
08F2:  SUBWF  42,W
08F4:  BNZ   0928
08F6:  MOVF   34,W
08F8:  SUBWF  43,W
08FA:  BNZ   0928
08FC:  MOVFF  36,45
0900:  MOVFF  35,44
0904:  RCALL  070E
0906:  MOVFF  02,45
090A:  MOVFF  01,44
090E:  MOVF   45,F
0910:  BNZ   0918
0912:  MOVF   44,W
0914:  SUBLW  63
0916:  BC    0928
....................                        {
....................                           t  = delay_start();
0918:  RCALL  06BC
091A:  MOVFF  02,36
091E:  MOVFF  01,35
....................                           return OK;
0922:  MOVLW  00
0924:  MOVWF  01
0926:  BRA    092C
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
0928:  MOVLW  02
092A:  MOVWF  01
092C:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_lcd.c>
.................... #ifndef  __TV_LCD_C__
.................... #define  __TV_LCD_C__
.................... #include<TV_LCD.h>
.................... #ifndef __tv_lcd_h__
.................... #define __tv_lcd_h__
.................... typedef enum 
.................... {
....................       lcd_clear_display  = 0x01,
....................       lcd_shift_left     = 0x18,
....................       lcd_shift_right    = 0x1c,
.................... }LCD_COMMANDS;
.................... result lcd_command(int8 command);
.................... result lcd_data(int8 data);
.................... result lcd_setup(void);
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) ; 
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2);
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17);
.................... //xxxxxxxxxxxxxxxxxxxxxxxx Font xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 LCD_SO_X[11][6] ={       // Font 3x2
....................                   0,1,2,5,3,4,               // SO 0
....................                   1,2,32,3,7,3,              // SO 1
....................                   6,6,2,5,3,3,               // SO 2
....................                   6,6,2,3,3,4,               // SO 3
....................                   5,3,7,32,32,7,             // SO 4
....................                   7,6,6,3,3,4,               // SO 5
....................                   0,6,6,5,3,4,               // SO 6
....................                   1,1,7,32,32,7,             // SO 7
....................                   0,6,2,5,3,4,               // SO 8
....................                   0,6,2,3,3,4,               // SO 9
....................                   32,32,32,32,32,32          // XOA
....................                   };             
.................... const unsigned int8 LCD_SO_X1[11][12] ={           //Font 3x4
....................                   0,1,2,7,32,7,7,32,7,5,3,4,       //0   
....................                   1,2,32,32,7,32,32,7,32,3,7,3,    //1  
....................                   1,1,2,3,3,7,7,32,32,5,3,3,       //2           
....................                   0,1,2,32,3,4,32,32,2,5,3,4,      //3
....................                   7,32,7,5,3,7,32,32,7,32,32,7,    //4             
....................                   7,1,1,7,3,3,32,32,7,5,3,4,       //5           
....................                   0,1,2,7,3,3,7,32,7,5,3,4,        //6             
....................                   1,1,7,32,32,4,32,0,32,32,7,32,   //7             
....................                   0,1,2,5,3,4,0,32,2,5,3,4,        //8     
....................                   0,1,2,5,3,7,32,32,7,5,3,4,       //9 
....................                   32,32,32,32,32,32,32,32,32,32,32,32}; //XOA                  
....................                   
.................... const unsigned int8 LCD_MA_8DOAN[] = {
....................                   0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  
....................                   0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, 
....................                   0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07, 
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; 
....................    
.................... const unsigned char LCD_MA_TRAITAO[]={
....................                0,0,0,0x0c,0x1f,0x1f,0x1f,0x1f,
....................                0x0e,0x1c,0x10,0x06,0x1f,0x1f,0x1f,0x1f
....................                ,0x0f,0x07,0x03,0,0,0,0,0,
....................                0x1e,0x1c,0x18,0,0,0,0,0};
.................... #endif
.................... 
.................... result  lcd_command(int8 command)
.................... {    
....................       write_lcd20x4(0x01,command);     
*
052A:  MOVLW  01
052C:  MOVWF  4C
052E:  MOVFF  4B,4D
0532:  RCALL  0430
....................       write_lcd20x4(0x00,command); 
0534:  CLRF   4C
0536:  MOVFF  4B,4D
053A:  RCALL  0430
....................       delay_us(200);
053C:  MOVLW  C8
053E:  MOVWF  4C
0540:  RCALL  0510
....................       return OK;
0542:  MOVLW  00
0544:  MOVWF  01
0546:  RETURN 0
.................... }
.................... result lcd_data(int8 data)
.................... {
....................       write_lcd20x4(0x05,data);     
0548:  MOVLW  05
054A:  MOVWF  4C
054C:  MOVFF  48,4D
0550:  RCALL  0430
....................       write_lcd20x4(0x04,data); 
0552:  MOVLW  04
0554:  MOVWF  4C
0556:  MOVFF  48,4D
055A:  RCALL  0430
....................       delay_us(200);
055C:  MOVLW  C8
055E:  MOVWF  4C
0560:  RCALL  0510
....................       return OK;
0562:  MOVLW  00
0564:  MOVWF  01
0566:  RETURN 0
.................... }
.................... result lcd_setup()
.................... {
....................       int8 n;
....................       lcd_command(0x3c);  delay_ms(5);
0568:  MOVLW  3C
056A:  MOVWF  4B
056C:  RCALL  052A
056E:  MOVLW  05
0570:  MOVWF  44
0572:  RCALL  038E
....................       lcd_command(0x3c);  delay_ms(5);
0574:  MOVLW  3C
0576:  MOVWF  4B
0578:  RCALL  052A
057A:  MOVLW  05
057C:  MOVWF  44
057E:  RCALL  038E
....................       lcd_command(0x0c);    
0580:  MOVLW  0C
0582:  MOVWF  4B
0584:  RCALL  052A
....................       lcd_command(0x06); 
0586:  MOVLW  06
0588:  MOVWF  4B
058A:  RCALL  052A
....................       lcd_command(0x40);                             // di chuyen den dia chi dau vung nho CGRAM
058C:  MOVLW  40
058E:  MOVWF  4B
0590:  RCALL  052A
....................       for(n=0;n<64;n++) lcd_data(LCD_MA_8DOAN[n]);   // ghi ma cua ky tu moi tao vao CGRAM
0592:  CLRF   42
0594:  MOVF   42,W
0596:  SUBLW  3F
0598:  BNC   05AA
059A:  CLRF   03
059C:  MOVF   42,W
059E:  RCALL  0194
05A0:  MOVWF  43
05A2:  MOVWF  48
05A4:  RCALL  0548
05A6:  INCF   42,F
05A8:  BRA    0594
....................       lcd_command(lcd_clear_display); delay_ms(2);
05AA:  MOVLW  01
05AC:  MOVWF  4B
05AE:  RCALL  052A
05B0:  MOVLW  02
05B2:  MOVWF  44
05B4:  RCALL  038E
....................       return OK;
05B6:  MOVLW  00
05B8:  MOVWF  01
05BA:  GOTO   0D30 (RETURN)
.................... }
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) 
.................... {
....................       const unsigned int8 dc[]={0x80,0xc0,0x94,0xd4};
....................        lcd_command(dc[row_0_3]+colum_0_19);
*
0950:  CLRF   03
0952:  MOVF   49,W
0954:  RCALL  01E4
0956:  ADDWF  48,W
0958:  MOVWF  4A
095A:  MOVWF  4B
095C:  RCALL  052A
....................        return OK;
095E:  MOVLW  00
0960:  MOVWF  01
0962:  RETURN 0
.................... }
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2)
.................... {     
....................       lcd_goto(colum_0_17,row_0_2);
*
0C08:  MOVFF  44,48
0C0C:  MOVFF  45,49
0C10:  RCALL  0950
....................       for (int8 i=0;i<6;i++)     
0C12:  CLRF   46
0C14:  MOVF   46,W
0C16:  SUBLW  05
0C18:  BNC   0C5E
....................       {                  
....................         if (i==3)   lcd_goto(colum_0_17,row_0_2+1);             
0C1A:  MOVF   46,W
0C1C:  SUBLW  03
0C1E:  BNZ   0C2E
0C20:  MOVLW  01
0C22:  ADDWF  45,W
0C24:  MOVWF  47
0C26:  MOVFF  44,48
0C2A:  MOVWF  49
0C2C:  RCALL  0950
....................         lcd_data(lcd_so_x[num_0_9][i]);     
0C2E:  MOVFF  43,47
0C32:  MOVLW  06
0C34:  MOVWF  48
0C36:  RCALL  0BBE
0C38:  MOVF   01,W
0C3A:  CLRF   48
0C3C:  MOVWF  47
0C3E:  BTFSC  FE8.7
0C40:  DECF   48,F
0C42:  CLRF   03
0C44:  MOVF   46,W
0C46:  ADDWF  47,W
0C48:  MOVWF  01
0C4A:  MOVF   48,W
0C4C:  ADDWFC 03,F
0C4E:  MOVF   01,W
0C50:  CALL   00AE
0C54:  MOVWF  47
0C56:  MOVWF  48
0C58:  RCALL  0548
0C5A:  INCF   46,F
0C5C:  BRA    0C14
....................       } 
....................       return OK;
0C5E:  MOVLW  00
0C60:  MOVWF  01
0C62:  RETURN 0
.................... }
.................... 
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17)
.................... {
....................       for(int8 n=0;n<12;n++)
0C64:  CLRF   45
0C66:  MOVF   45,W
0C68:  SUBLW  0B
0C6A:  BNC   0CC2
....................       {
....................             if(n%3==0)LCD_GOTO(colum_0_17,n/3); 
0C6C:  MOVFF  45,46
0C70:  MOVLW  03
0C72:  MOVWF  47
0C74:  RCALL  0AE8
0C76:  MOVF   00,F
0C78:  BNZ   0C92
0C7A:  MOVFF  45,46
0C7E:  MOVLW  03
0C80:  MOVWF  47
0C82:  RCALL  0AE8
0C84:  MOVFF  01,46
0C88:  MOVFF  44,48
0C8C:  MOVFF  01,49
0C90:  RCALL  0950
....................             LCD_DATA(LCD_SO_X1[num_0_9][n]);
0C92:  MOVFF  43,47
0C96:  MOVLW  0C
0C98:  MOVWF  48
0C9A:  RCALL  0BBE
0C9C:  MOVF   01,W
0C9E:  CLRF   47
0CA0:  MOVWF  46
0CA2:  BTFSC  FE8.7
0CA4:  DECF   47,F
0CA6:  CLRF   03
0CA8:  MOVF   45,W
0CAA:  ADDWF  46,W
0CAC:  MOVWF  01
0CAE:  MOVF   47,W
0CB0:  ADDWFC 03,F
0CB2:  MOVF   01,W
0CB4:  CALL   0100
0CB8:  MOVWF  46
0CBA:  MOVWF  48
0CBC:  RCALL  0548
0CBE:  INCF   45,F
0CC0:  BRA    0C66
....................       }
....................       return OK;
0CC2:  MOVLW  00
0CC4:  MOVWF  01
0CC6:  RETURN 0
.................... }
.................... #endif
.................... 
.................... signed int8 bdn=0,giay=0,phut=0,gio=0,cd=0,font=0;
.................... unsigned int16 k;
.................... void kt_nutnhan()
.................... {
....................    if(inputcd(inv)==0)
*
0984:  MOVLW  7C
0986:  MOVWF  43
0988:  MOVLW  0B
098A:  MOVWF  42
098C:  RCALL  07A0
098E:  MOVF   01,F
0990:  BNZ   0A28
....................    {
....................       font++;
0992:  INCF   3D,F
....................       if(font>=3) font=0;
0994:  BTFSC  3D.7
0996:  BRA    09A0
0998:  MOVF   3D,W
099A:  SUBLW  02
099C:  BC    09A0
099E:  CLRF   3D
....................       if(font==1)
09A0:  DECFSZ 3D,W
09A2:  BRA    09B4
....................       {
....................          lcd_goto(0,0);
09A4:  CLRF   48
09A6:  CLRF   49
09A8:  RCALL  0950
....................          lcd_data("                    ");
09AA:  MOVLW  F8
09AC:  MOVWF  FF6
09AE:  MOVLW  01
09B0:  MOVWF  FF7
09B2:  RCALL  0964
....................       }
....................       if(font==2)
09B4:  MOVF   3D,W
09B6:  SUBLW  02
09B8:  BNZ   09DE
....................       {
....................          lcd_goto(0,1);
09BA:  CLRF   48
09BC:  MOVLW  01
09BE:  MOVWF  49
09C0:  RCALL  0950
....................          lcd_data("                    ");
09C2:  MOVLW  0E
09C4:  MOVWF  FF6
09C6:  MOVLW  02
09C8:  MOVWF  FF7
09CA:  RCALL  0964
....................          lcd_goto(0,2);
09CC:  CLRF   48
09CE:  MOVLW  02
09D0:  MOVWF  49
09D2:  RCALL  0950
....................          lcd_data("                    ");
09D4:  MOVLW  24
09D6:  MOVWF  FF6
09D8:  MOVLW  02
09DA:  MOVWF  FF7
09DC:  RCALL  0964
....................       }
....................       if(font==0)
09DE:  MOVF   3D,F
09E0:  BNZ   0A28
....................       {
....................          lcd_goto(0,1);
09E2:  CLRF   48
09E4:  MOVLW  01
09E6:  MOVWF  49
09E8:  RCALL  0950
....................          lcd_data("                    ");
09EA:  MOVLW  3A
09EC:  MOVWF  FF6
09EE:  MOVLW  02
09F0:  MOVWF  FF7
09F2:  RCALL  0964
....................          lcd_goto(0,2);
09F4:  CLRF   48
09F6:  MOVLW  02
09F8:  MOVWF  49
09FA:  RCALL  0950
....................          lcd_data("                    ");
09FC:  MOVLW  50
09FE:  MOVWF  FF6
0A00:  MOVLW  02
0A02:  MOVWF  FF7
0A04:  RCALL  0964
....................          lcd_goto(0,0);
0A06:  CLRF   48
0A08:  CLRF   49
0A0A:  RCALL  0950
....................          lcd_data("                    ");
0A0C:  MOVLW  66
0A0E:  MOVWF  FF6
0A10:  MOVLW  02
0A12:  MOVWF  FF7
0A14:  RCALL  0964
....................          lcd_goto(0,3);
0A16:  CLRF   48
0A18:  MOVLW  03
0A1A:  MOVWF  49
0A1C:  RCALL  0950
....................          lcd_data("                    ");
0A1E:  MOVLW  7C
0A20:  MOVWF  FF6
0A22:  MOVLW  02
0A24:  MOVWF  FF7
0A26:  RCALL  0964
....................       }
....................    }
....................    if(inputcd(mod)==0)
0A28:  MOVLW  7C
0A2A:  MOVWF  43
0A2C:  MOVLW  0A
0A2E:  MOVWF  42
0A30:  RCALL  07A0
0A32:  MOVF   01,F
0A34:  BNZ   0A44
....................    {
....................       cd++;
0A36:  INCF   3C,F
....................       if(cd>=4) cd=0;
0A38:  BTFSC  3C.7
0A3A:  BRA    0A44
0A3C:  MOVF   3C,W
0A3E:  SUBLW  03
0A40:  BC    0A44
0A42:  CLRF   3C
....................    }
....................    if(inputcd(up)==0)
0A44:  MOVLW  7C
0A46:  MOVWF  43
0A48:  MOVLW  0D
0A4A:  MOVWF  42
0A4C:  RCALL  07A0
0A4E:  MOVF   01,F
0A50:  BNZ   0A92
....................    {
....................       if(cd==1) 
0A52:  DECFSZ 3C,W
0A54:  BRA    0A66
....................       {
....................          giay++;
0A56:  INCF   39,F
....................          if(giay>=60) giay=0;
0A58:  BTFSC  39.7
0A5A:  BRA    0A64
0A5C:  MOVF   39,W
0A5E:  SUBLW  3B
0A60:  BC    0A64
0A62:  CLRF   39
....................       }
0A64:  BRA    0A92
....................       else if(cd==2) 
0A66:  MOVF   3C,W
0A68:  SUBLW  02
0A6A:  BNZ   0A7C
....................       {
....................          phut++;
0A6C:  INCF   3A,F
....................          if(phut>=60) phut=0;
0A6E:  BTFSC  3A.7
0A70:  BRA    0A7A
0A72:  MOVF   3A,W
0A74:  SUBLW  3B
0A76:  BC    0A7A
0A78:  CLRF   3A
....................       }
0A7A:  BRA    0A92
....................       else if(cd==3) 
0A7C:  MOVF   3C,W
0A7E:  SUBLW  03
0A80:  BNZ   0A92
....................       {
....................          gio++;
0A82:  INCF   3B,F
....................          if(gio>=13) gio=1;
0A84:  BTFSC  3B.7
0A86:  BRA    0A92
0A88:  MOVF   3B,W
0A8A:  SUBLW  0C
0A8C:  BC    0A92
0A8E:  MOVLW  01
0A90:  MOVWF  3B
....................       }
....................    }
....................       if(inputcd(dw)==0)
0A92:  MOVLW  7C
0A94:  MOVWF  43
0A96:  MOVLW  0C
0A98:  MOVWF  42
0A9A:  RCALL  07A0
0A9C:  MOVF   01,F
0A9E:  BNZ   0AE4
....................       {
....................          if(cd==1) 
0AA0:  DECFSZ 3C,W
0AA2:  BRA    0AB6
....................          {
....................             giay--;
0AA4:  DECF   39,F
....................             if(giay<=0) giay=59;
0AA6:  BTFSC  39.7
0AA8:  BRA    0AB0
0AAA:  MOVF   39,W
0AAC:  SUBLW  00
0AAE:  BNC   0AB4
0AB0:  MOVLW  3B
0AB2:  MOVWF  39
....................          }
0AB4:  BRA    0AE4
....................          else if(cd==2) 
0AB6:  MOVF   3C,W
0AB8:  SUBLW  02
0ABA:  BNZ   0ACE
....................          {
....................             phut--;
0ABC:  DECF   3A,F
....................             if(phut<=0) phut=59;
0ABE:  BTFSC  3A.7
0AC0:  BRA    0AC8
0AC2:  MOVF   3A,W
0AC4:  SUBLW  00
0AC6:  BNC   0ACC
0AC8:  MOVLW  3B
0ACA:  MOVWF  3A
....................          }
0ACC:  BRA    0AE4
....................          else if(cd==3) 
0ACE:  MOVF   3C,W
0AD0:  SUBLW  03
0AD2:  BNZ   0AE4
....................          {
....................             gio--;
0AD4:  DECF   3B,F
....................             if(gio<=0) gio=13;
0AD6:  BTFSC  3B.7
0AD8:  BRA    0AE0
0ADA:  MOVF   3B,W
0ADC:  SUBLW  00
0ADE:  BNC   0AE4
0AE0:  MOVLW  0D
0AE2:  MOVWF  3B
....................          }
....................       }
0AE4:  GOTO   0D46 (RETURN)
.................... }
.................... void main()
*
0CC8:  CLRF   FF8
0CCA:  BCF    FD0.7
0CCC:  BSF    07.7
0CCE:  BSF    FB8.3
0CD0:  MOVLW  08
0CD2:  MOVWF  FAF
0CD4:  MOVLW  02
0CD6:  MOVWF  FB0
0CD8:  MOVLW  A6
0CDA:  MOVWF  FAC
0CDC:  MOVLW  90
0CDE:  MOVWF  FAB
0CE0:  CLRF   38
0CE2:  CLRF   39
0CE4:  CLRF   3A
0CE6:  CLRF   3B
0CE8:  CLRF   3C
0CEA:  CLRF   3D
0CEC:  CLRF   41
0CEE:  CLRF   40
0CF0:  MOVF   FC1,W
0CF2:  ANDLW  C0
0CF4:  IORLW  0F
0CF6:  MOVWF  FC1
0CF8:  MOVLW  07
0CFA:  MOVWF  FB4
0CFC:  CLRF   19
0CFE:  CLRF   1A
0D00:  CLRF   1B
0D02:  CLRF   1C
0D04:  CLRF   1D
0D06:  CLRF   1E
0D08:  SETF   27
0D0A:  SETF   28
0D0C:  SETF   29
0D0E:  SETF   2A
0D10:  SETF   2B
0D12:  SETF   2C
0D14:  SETF   2D
0D16:  SETF   2E
0D18:  SETF   2F
0D1A:  SETF   30
0D1C:  SETF   31
0D1E:  SETF   32
0D20:  SETF   33
0D22:  SETF   34
0D24:  CLRF   35
0D26:  CLRF   36
0D28:  CLRF   37
.................... {
....................    system_init();
0D2A:  GOTO   04A2
....................    lcd_setup();
0D2E:  BRA    0568
....................    setup_timer_1(T1_INTERNAL| T1_DIV_BY_8);
0D30:  MOVLW  B5
0D32:  MOVWF  FCD
....................    set_timer1(3036);
0D34:  MOVLW  0B
0D36:  MOVWF  FCF
0D38:  MOVLW  DC
0D3A:  MOVWF  FCE
0D3C:  NOP   
....................    enable_interrupts(int_timer1);
0D3E:  BSF    F9D.0
....................    enable_interrupts(global);
0D40:  MOVLW  C0
0D42:  IORWF  FF2,F
....................    while(true)
....................    { 
....................         kt_nutnhan();
0D44:  BRA    0984
....................         if(bdn>=10)
0D46:  BTFSC  38.7
0D48:  BRA    0D80
0D4A:  MOVF   38,W
0D4C:  SUBLW  09
0D4E:  BC    0D80
....................         {
....................             bdn=bdn-10;
0D50:  MOVLW  0A
0D52:  SUBWF  38,F
....................             giay++;
0D54:  INCF   39,F
....................             if(giay>=60)
0D56:  BTFSC  39.7
0D58:  BRA    0D80
0D5A:  MOVF   39,W
0D5C:  SUBLW  3B
0D5E:  BC    0D80
....................             {
....................                giay=0;
0D60:  CLRF   39
....................                phut++;
0D62:  INCF   3A,F
....................                if(phut>=60)   
0D64:  BTFSC  3A.7
0D66:  BRA    0D80
0D68:  MOVF   3A,W
0D6A:  SUBLW  3B
0D6C:  BC    0D80
....................                {
....................                   phut=0;
0D6E:  CLRF   3A
....................                   gio++;
0D70:  INCF   3B,F
....................                   if(gio>=13) gio=1;
0D72:  BTFSC  3B.7
0D74:  BRA    0D80
0D76:  MOVF   3B,W
0D78:  SUBLW  0C
0D7A:  BC    0D80
0D7C:  MOVLW  01
0D7E:  MOVWF  3B
....................                }
....................             }
....................         }
....................         if(cd==0)
0D80:  MOVF   3C,F
0D82:  BTFSS  FD8.2
0D84:  BRA    0F3A
....................         {
....................            if(font==0)
0D86:  MOVF   3D,F
0D88:  BNZ   0DC0
....................            {
....................               lcd_goto(5,0);
0D8A:  MOVLW  05
0D8C:  MOVWF  48
0D8E:  CLRF   49
0D90:  RCALL  0950
....................               printf(lcd_data,"%02u",gio);
0D92:  MOVFF  3B,42
0D96:  MOVLW  01
0D98:  MOVWF  43
0D9A:  RCALL  0B10
....................               lcd_data(':');
0D9C:  MOVLW  3A
0D9E:  MOVWF  48
0DA0:  CALL   0548
....................               printf(lcd_data,"%02u",phut);
0DA4:  MOVFF  3A,42
0DA8:  MOVLW  01
0DAA:  MOVWF  43
0DAC:  RCALL  0B10
....................               lcd_data(':');
0DAE:  MOVLW  3A
0DB0:  MOVWF  48
0DB2:  CALL   0548
....................               printf(lcd_data,"%02u",giay);
0DB6:  MOVFF  39,42
0DBA:  MOVLW  01
0DBC:  MOVWF  43
0DBE:  RCALL  0B10
....................            }
....................            if(font==1)
0DC0:  DECFSZ 3D,W
0DC2:  BRA    0E88
....................            {
....................               lcd_write_2x3_num(gio/10%10,0,1);
0DC4:  MOVFF  3B,43
0DC8:  MOVLW  0A
0DCA:  MOVWF  44
0DCC:  RCALL  0B76
0DCE:  MOVFF  01,43
0DD2:  MOVLW  0A
0DD4:  MOVWF  44
0DD6:  RCALL  0B76
0DD8:  MOVFF  00,42
0DDC:  MOVFF  00,43
0DE0:  CLRF   44
0DE2:  MOVLW  01
0DE4:  MOVWF  45
0DE6:  RCALL  0C08
....................               lcd_write_2x3_num(gio%10,3,1);
0DE8:  MOVFF  3B,43
0DEC:  MOVLW  0A
0DEE:  MOVWF  44
0DF0:  RCALL  0B76
0DF2:  MOVFF  00,42
0DF6:  MOVFF  00,43
0DFA:  MOVLW  03
0DFC:  MOVWF  44
0DFE:  MOVLW  01
0E00:  MOVWF  45
0E02:  RCALL  0C08
....................               lcd_write_2x3_num(phut/10%10,7,1);
0E04:  MOVFF  3A,43
0E08:  MOVLW  0A
0E0A:  MOVWF  44
0E0C:  RCALL  0B76
0E0E:  MOVFF  01,43
0E12:  MOVLW  0A
0E14:  MOVWF  44
0E16:  RCALL  0B76
0E18:  MOVFF  00,42
0E1C:  MOVFF  00,43
0E20:  MOVLW  07
0E22:  MOVWF  44
0E24:  MOVLW  01
0E26:  MOVWF  45
0E28:  RCALL  0C08
....................               lcd_write_2x3_num(phut%10,10,1);
0E2A:  MOVFF  3A,43
0E2E:  MOVLW  0A
0E30:  MOVWF  44
0E32:  RCALL  0B76
0E34:  MOVFF  00,42
0E38:  MOVFF  00,43
0E3C:  MOVLW  0A
0E3E:  MOVWF  44
0E40:  MOVLW  01
0E42:  MOVWF  45
0E44:  RCALL  0C08
....................               lcd_write_2x3_num(giay/10%10,14,1);
0E46:  MOVFF  39,43
0E4A:  MOVLW  0A
0E4C:  MOVWF  44
0E4E:  RCALL  0B76
0E50:  MOVFF  01,43
0E54:  MOVLW  0A
0E56:  MOVWF  44
0E58:  RCALL  0B76
0E5A:  MOVFF  00,42
0E5E:  MOVFF  00,43
0E62:  MOVLW  0E
0E64:  MOVWF  44
0E66:  MOVLW  01
0E68:  MOVWF  45
0E6A:  RCALL  0C08
....................               lcd_write_2x3_num(giay%10,17,1);
0E6C:  MOVFF  39,43
0E70:  MOVLW  0A
0E72:  MOVWF  44
0E74:  RCALL  0B76
0E76:  MOVFF  00,42
0E7A:  MOVFF  00,43
0E7E:  MOVLW  11
0E80:  MOVWF  44
0E82:  MOVLW  01
0E84:  MOVWF  45
0E86:  RCALL  0C08
....................            }
....................            if(font==2)
0E88:  MOVF   3D,W
0E8A:  SUBLW  02
0E8C:  BNZ   0F3A
....................            {
....................               lcd_write_4x3_num(gio/10%10,0);
0E8E:  MOVFF  3B,43
0E92:  MOVLW  0A
0E94:  MOVWF  44
0E96:  RCALL  0B76
0E98:  MOVFF  01,43
0E9C:  MOVLW  0A
0E9E:  MOVWF  44
0EA0:  RCALL  0B76
0EA2:  MOVFF  00,42
0EA6:  MOVFF  00,43
0EAA:  CLRF   44
0EAC:  RCALL  0C64
....................               lcd_write_4x3_num(gio%10,3);
0EAE:  MOVFF  3B,43
0EB2:  MOVLW  0A
0EB4:  MOVWF  44
0EB6:  RCALL  0B76
0EB8:  MOVFF  00,42
0EBC:  MOVFF  00,43
0EC0:  MOVLW  03
0EC2:  MOVWF  44
0EC4:  RCALL  0C64
....................               lcd_write_4x3_num(phut/10%10,7);
0EC6:  MOVFF  3A,43
0ECA:  MOVLW  0A
0ECC:  MOVWF  44
0ECE:  RCALL  0B76
0ED0:  MOVFF  01,43
0ED4:  MOVLW  0A
0ED6:  MOVWF  44
0ED8:  RCALL  0B76
0EDA:  MOVFF  00,42
0EDE:  MOVFF  00,43
0EE2:  MOVLW  07
0EE4:  MOVWF  44
0EE6:  RCALL  0C64
....................               lcd_write_4x3_num(phut%10,10);
0EE8:  MOVFF  3A,43
0EEC:  MOVLW  0A
0EEE:  MOVWF  44
0EF0:  RCALL  0B76
0EF2:  MOVFF  00,42
0EF6:  MOVFF  00,43
0EFA:  MOVLW  0A
0EFC:  MOVWF  44
0EFE:  RCALL  0C64
....................               lcd_write_4x3_num(giay/10%10,14);
0F00:  MOVFF  39,43
0F04:  MOVLW  0A
0F06:  MOVWF  44
0F08:  RCALL  0B76
0F0A:  MOVFF  01,43
0F0E:  MOVLW  0A
0F10:  MOVWF  44
0F12:  RCALL  0B76
0F14:  MOVFF  00,42
0F18:  MOVFF  00,43
0F1C:  MOVLW  0E
0F1E:  MOVWF  44
0F20:  RCALL  0C64
....................               lcd_write_4x3_num(giay%10,17);
0F22:  MOVFF  39,43
0F26:  MOVLW  0A
0F28:  MOVWF  44
0F2A:  RCALL  0B76
0F2C:  MOVFF  00,42
0F30:  MOVFF  00,43
0F34:  MOVLW  11
0F36:  MOVWF  44
0F38:  RCALL  0C64
....................            }
....................         }
....................         if(cd==3)
0F3A:  MOVF   3C,W
0F3C:  SUBLW  03
0F3E:  BNZ   0FA8
....................         {
....................             lcd_goto(8,0);
0F40:  MOVLW  08
0F42:  MOVWF  48
0F44:  CLRF   49
0F46:  RCALL  0950
....................             printf(lcd_data,"%02u",phut);
0F48:  MOVFF  3A,42
0F4C:  MOVLW  01
0F4E:  MOVWF  43
0F50:  RCALL  0B10
....................             if(k<1000)
0F52:  MOVF   3F,W
0F54:  SUBLW  03
0F56:  BNC   0F7A
0F58:  BNZ   0F60
0F5A:  MOVF   3E,W
0F5C:  SUBLW  E7
0F5E:  BNC   0F7A
....................             {
....................                lcd_goto(5,0);
0F60:  MOVLW  05
0F62:  MOVWF  48
0F64:  CLRF   49
0F66:  RCALL  0950
....................                lcd_data("  ");
0F68:  MOVLW  92
0F6A:  MOVWF  FF6
0F6C:  MOVLW  02
0F6E:  MOVWF  FF7
0F70:  RCALL  0964
....................                k++;
0F72:  INCF   3E,F
0F74:  BTFSC  FD8.2
0F76:  INCF   3F,F
....................             }
0F78:  BRA    0FA6
....................             else if(k<2000)
0F7A:  MOVF   3F,W
0F7C:  SUBLW  07
0F7E:  BNC   0FA2
0F80:  BNZ   0F88
0F82:  MOVF   3E,W
0F84:  SUBLW  CF
0F86:  BNC   0FA2
....................             {
....................                lcd_goto(5,0);
0F88:  MOVLW  05
0F8A:  MOVWF  48
0F8C:  CLRF   49
0F8E:  RCALL  0950
....................                printf(lcd_data,"%02u",gio);
0F90:  MOVFF  3B,42
0F94:  MOVLW  01
0F96:  MOVWF  43
0F98:  RCALL  0B10
....................                k++;
0F9A:  INCF   3E,F
0F9C:  BTFSC  FD8.2
0F9E:  INCF   3F,F
....................             }
0FA0:  BRA    0FA6
....................             else k=0;
0FA2:  CLRF   3F
0FA4:  CLRF   3E
....................         }
0FA6:  BRA    106E
....................         else if(cd==2)
0FA8:  MOVF   3C,W
0FAA:  SUBLW  02
0FAC:  BNZ   1016
....................         {
....................             lcd_goto(11,0);
0FAE:  MOVLW  0B
0FB0:  MOVWF  48
0FB2:  CLRF   49
0FB4:  RCALL  0950
....................             printf(lcd_data,"%02u",giay);
0FB6:  MOVFF  39,42
0FBA:  MOVLW  01
0FBC:  MOVWF  43
0FBE:  RCALL  0B10
....................             if(k<1000)
0FC0:  MOVF   3F,W
0FC2:  SUBLW  03
0FC4:  BNC   0FE8
0FC6:  BNZ   0FCE
0FC8:  MOVF   3E,W
0FCA:  SUBLW  E7
0FCC:  BNC   0FE8
....................             {
....................                lcd_goto(8,0);
0FCE:  MOVLW  08
0FD0:  MOVWF  48
0FD2:  CLRF   49
0FD4:  RCALL  0950
....................                lcd_data("  ");
0FD6:  MOVLW  96
0FD8:  MOVWF  FF6
0FDA:  MOVLW  02
0FDC:  MOVWF  FF7
0FDE:  RCALL  0964
....................                k++;
0FE0:  INCF   3E,F
0FE2:  BTFSC  FD8.2
0FE4:  INCF   3F,F
....................             }
0FE6:  BRA    1014
....................             else if(k<2000)
0FE8:  MOVF   3F,W
0FEA:  SUBLW  07
0FEC:  BNC   1010
0FEE:  BNZ   0FF6
0FF0:  MOVF   3E,W
0FF2:  SUBLW  CF
0FF4:  BNC   1010
....................             {
....................                lcd_goto(8,0);
0FF6:  MOVLW  08
0FF8:  MOVWF  48
0FFA:  CLRF   49
0FFC:  RCALL  0950
....................                printf(lcd_data,"%02u",phut);
0FFE:  MOVFF  3A,42
1002:  MOVLW  01
1004:  MOVWF  43
1006:  RCALL  0B10
....................                k++;
1008:  INCF   3E,F
100A:  BTFSC  FD8.2
100C:  INCF   3F,F
....................             }
100E:  BRA    1014
....................             else k=0;
1010:  CLRF   3F
1012:  CLRF   3E
....................         }
1014:  BRA    106E
....................         else if(cd==1)
1016:  DECFSZ 3C,W
1018:  BRA    106E
....................         {
....................             if(k<1000)
101A:  MOVF   3F,W
101C:  SUBLW  03
101E:  BNC   1042
1020:  BNZ   1028
1022:  MOVF   3E,W
1024:  SUBLW  E7
1026:  BNC   1042
....................             {
....................                lcd_goto(11,0);
1028:  MOVLW  0B
102A:  MOVWF  48
102C:  CLRF   49
102E:  RCALL  0950
....................                lcd_data("  ");
1030:  MOVLW  9A
1032:  MOVWF  FF6
1034:  MOVLW  02
1036:  MOVWF  FF7
1038:  RCALL  0964
....................                k++;
103A:  INCF   3E,F
103C:  BTFSC  FD8.2
103E:  INCF   3F,F
....................             }
1040:  BRA    106E
....................             else if(k<2000)
1042:  MOVF   3F,W
1044:  SUBLW  07
1046:  BNC   106A
1048:  BNZ   1050
104A:  MOVF   3E,W
104C:  SUBLW  CF
104E:  BNC   106A
....................             {
....................                lcd_goto(11,0);
1050:  MOVLW  0B
1052:  MOVWF  48
1054:  CLRF   49
1056:  RCALL  0950
....................                printf(lcd_data,"%02u",giay);
1058:  MOVFF  39,42
105C:  MOVLW  01
105E:  MOVWF  43
1060:  RCALL  0B10
....................                k++;
1062:  INCF   3E,F
1064:  BTFSC  FD8.2
1066:  INCF   3F,F
....................             }
1068:  BRA    106E
....................             else k=0;
106A:  CLRF   3F
106C:  CLRF   3E
....................         }
106E:  BRA    0D44
....................    }
.................... }
.................... #int_timer1
.................... void ngat_timer1()
1070:  SLEEP 
.................... {
....................    set_timer1(3036);
*
029E:  MOVLW  0B
02A0:  MOVWF  FCF
02A2:  MOVLW  DC
02A4:  MOVWF  FCE
02A6:  NOP   
....................    bdn++;
02A8:  INCF   38,F
02AA:  BCF    F9E.0
02AC:  GOTO   0060
.................... }

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
