CCS PCH C Compiler, Version 5.101, 43599               07-Feb-23 16:40

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_335_7CT_7BTN.lst

               ROM used:   2296 bytes (7%)
                           Largest free fragment is 30472
               RAM used:   45 (2%) at main() level
                           65 (3%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0842
.................... #DEFINE BOARD D501
.................... #include <tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
.................... #ifndef    __TV_D501_TH_C__
.................... #define    __TV_D501_TH_C__
.................... #include<TV_D501_TH.h>
.................... #ifndef    __TV_D501_TH_H__
.................... #define    __TV_D501_TH_H__
.................... #include     <18f4550.h>
.................... //////////// Standard Header file for the PIC18F4550 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4550
*
02FC:  BTFSC  FD8.1
02FE:  BRA    0306
0300:  CLRF   FEA
0302:  MOVLW  39
0304:  MOVWF  FE9
0306:  CLRF   00
0308:  CLRF   01
030A:  CLRF   02
030C:  CLRF   03
030E:  CLRF   39
0310:  CLRF   3A
0312:  CLRF   3B
0314:  CLRF   3C
0316:  MOVF   38,W
0318:  IORWF  37,W
031A:  IORWF  36,W
031C:  IORWF  35,W
031E:  BZ    0378
0320:  MOVLW  20
0322:  MOVWF  3D
0324:  BCF    FD8.0
0326:  RLCF   31,F
0328:  RLCF   32,F
032A:  RLCF   33,F
032C:  RLCF   34,F
032E:  RLCF   39,F
0330:  RLCF   3A,F
0332:  RLCF   3B,F
0334:  RLCF   3C,F
0336:  MOVF   38,W
0338:  SUBWF  3C,W
033A:  BNZ   034C
033C:  MOVF   37,W
033E:  SUBWF  3B,W
0340:  BNZ   034C
0342:  MOVF   36,W
0344:  SUBWF  3A,W
0346:  BNZ   034C
0348:  MOVF   35,W
034A:  SUBWF  39,W
034C:  BNC   036C
034E:  MOVF   35,W
0350:  SUBWF  39,F
0352:  MOVF   36,W
0354:  BTFSS  FD8.0
0356:  INCFSZ 36,W
0358:  SUBWF  3A,F
035A:  MOVF   37,W
035C:  BTFSS  FD8.0
035E:  INCFSZ 37,W
0360:  SUBWF  3B,F
0362:  MOVF   38,W
0364:  BTFSS  FD8.0
0366:  INCFSZ 38,W
0368:  SUBWF  3C,F
036A:  BSF    FD8.0
036C:  RLCF   00,F
036E:  RLCF   01,F
0370:  RLCF   02,F
0372:  RLCF   03,F
0374:  DECFSZ 3D,F
0376:  BRA    0324
0378:  MOVFF  39,FEF
037C:  MOVFF  3A,FEC
0380:  MOVFF  3B,FEC
0384:  MOVFF  3C,FEC
0388:  RETURN 0
*
0548:  ADDWF  FE8,W
054A:  CLRF   FF7
054C:  RLCF   FF7,F
054E:  ADDLW  63
0550:  MOVWF  FF6
0552:  MOVLW  05
0554:  ADDWFC FF7,F
0556:  TBLRD*-
0558:  MOVF   FF5,W
055A:  MOVWF  FFA
055C:  TBLRD*
055E:  MOVF   FF5,W
0560:  MOVWF  FF9
0562:  DATA 82,04
0564:  DATA 98,04
0566:  DATA D2,04
0568:  DATA 0C,05
.................... 
.................... #list
.................... 
.................... #device      adc=10
.................... #fuses       nowdt,put,hs,noprotect,nolvp,cpudiv1
.................... #use         delay(clock=20000000)
*
0100:  CLRF   FEA
0102:  MOVLW  2F
0104:  MOVWF  FE9
0106:  MOVF   FEF,W
0108:  BZ    0124
010A:  MOVLW  06
010C:  MOVWF  01
010E:  CLRF   00
0110:  DECFSZ 00,F
0112:  BRA    0110
0114:  DECFSZ 01,F
0116:  BRA    010E
0118:  MOVLW  7B
011A:  MOVWF  00
011C:  DECFSZ 00,F
011E:  BRA    011C
0120:  DECFSZ FEF,F
0122:  BRA    010A
0124:  RETURN 0
.................... #use         rs232(baud=9600, xmit=pin_c6,rcv=pin_c7)
.................... #include     <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit         TIM3IF                 = 0xFA1.1
.................... #bit         SSDO                   = 0xF84.2
.................... #bit         SSCK                   = 0xF84.0
.................... #define      analog_pins            an0_to_an2
.................... #define      lm35a_channel          0
.................... #define      lm35b_channel          1
.................... #define      gp2d12_channel         2
.................... #define      photoresis_channel     3
.................... #define      DCMOTOR_IN1            PIN_c1
.................... #define      TOUCH_PIN              pin_a5
.................... #define      DHT11_PIN              pin_d1
.................... #define      HX711_DO               0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      HX711_CLK              0       // khong co module nay , khai bao cho khoi bao loi
.................... #define      SRF04_TRIGER           PIN_E2
.................... #define      soft_i2c_sda           pin_b0
.................... #define      soft_i2c_scl           pin_b1
.................... #define      bt0                    pin_b5
.................... #define      bt1                    pin_b4
.................... #define      bt2                    pin_b3
.................... #define      bt3                    pin_b2
.................... #define      on                     bt0      
.................... #define      off                    bt1
.................... #define      inv                    bt2
.................... #define      up                     bt0    
.................... #define      dw                     bt1
.................... #define      clr                    bt2
.................... #define      mod                    bt3
.................... #define      stop                   bt3
.................... #define      on1                    bt0     
.................... #define      off1                   bt1
.................... #define      on2                    bt2       
.................... #define      off2                   bt3
.................... #define      S7SEG_RCK              pin_d5
.................... #define      LED32_RCK              pin_d4
.................... #define      D7SEG_RCK              pin_d6
.................... #define      ALLMODULE_G            pin_d0         //a - 4 byte
.................... #define      LCD_RCK                pin_d2         //a - 2 byte dao
.................... #define      RBDC_RCK               pin_d3         //b - 1 byte 
.................... #define      MATRIX_RCK             pin_d7         //b - 3 byte dao
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct 
.................... {
....................       int1      STEP_MOTOR_ENABLE;
....................       int1      STEP_MOTOR_IN1;
....................       int1      STEP_MOTOR_IN2;
....................       int1      STEP_MOTOR_IN3;
....................       int1      STEP_MOTOR_IN4;
....................       int1      DC_MOTOR_ENABLE;
....................       int1      PWRKEY;
....................       int1      NC_PIN1;          
....................       int1      BUZZER;
....................       int1      TRIAC_1;
....................       int1      TRIAC_2;
....................       int1      RELAY_1;
....................       int1      RELAY_2 ;
....................       int1      NC_PIN2 ;  
....................       int1      NC_PIN3;   
....................       int1      NC_PIN4;  
.................... }RBDC_STRUCT;
.................... typedef union
.................... {
....................       RBDC_STRUCT         bit;
....................       unsigned int8       xbyte[2];
.................... }RBDC_UNION;
.................... 
.................... typedef struct 
.................... {
....................     RBDC_UNION           rbdc;
....................     unsigned int8        lcddata; 
....................     unsigned int8        lcdcontrol;
....................     unsigned int8        glcddata;
....................     unsigned int8        glcdcontrol;    
.................... }SYSTEM_VAR_STRUCT;
.................... SYSTEM_VAR_STRUCT system_var={0,0,0,0,0};
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[4];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT;
.................... S7SEG_STRUCT s7seg={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff};
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on();
.................... result buzzer_off();
.................... result relay_1_on();
.................... result relay_1_off();
.................... result relay_2_on();
.................... result relay_2_off();
.................... result triac_1_on();
.................... result triac_1_off();
.................... result triac_2_on();
.................... result triac_2_off();
.................... result DCMOTOR_ENABLE();
.................... result STEPMOTOR_ENABLE();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... void SSPI_WRITE(unsigned int8 x);
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      SSPI_WRITE(led32.ledx8[3]);SSPI_WRITE(led32.ledx8[2]);
*
00B2:  MOVFF  11,37
00B6:  RCALL  0004
00B8:  MOVFF  10,37
00BC:  RCALL  0004
....................      SSPI_WRITE(led32.ledx8[1]);SSPI_WRITE(led32.ledx8[0]);
00BE:  MOVFF  0F,37
00C2:  RCALL  0004
00C4:  MOVFF  0E,37
00C8:  RCALL  0004
....................      output_high(LED32_RCK); output_low(LED32_RCK);
00CA:  BCF    F95.4
00CC:  BSF    F8C.4
00CE:  BCF    F95.4
00D0:  BCF    F8C.4
....................      return OK; 
00D2:  MOVLW  00
00D4:  MOVWF  01
00D6:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       SSPI_WRITE(d7seg.led[0]);SSPI_WRITE(d7seg.led[1]);
00D8:  MOVFF  12,37
00DC:  RCALL  0004
00DE:  MOVFF  13,37
00E2:  RCALL  0004
....................       SSPI_WRITE(d7seg.led[2]);SSPI_WRITE(d7seg.led[3]);
00E4:  MOVFF  14,37
00E8:  RCALL  0004
00EA:  MOVFF  15,37
00EE:  RCALL  0004
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
00F0:  BCF    F95.6
00F2:  BSF    F8C.6
00F4:  BCF    F95.6
00F6:  BCF    F8C.6
....................       return OK;
00F8:  MOVLW  00
00FA:  MOVWF  01
00FC:  GOTO   0240 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {
....................       for(int8 i=0x80,n=0;n<8;n++,i>>=1)
*
0126:  MOVLW  80
0128:  MOVWF  2D
012A:  CLRF   2E
012C:  MOVF   2E,W
012E:  SUBLW  07
0130:  BNC   0174
....................       {
....................             SSPI_WRITE(i);
0132:  MOVFF  2D,37
0136:  RCALL  0004
....................             SSPI_WRITE(~s7seg.led[n]);     
0138:  CLRF   03
013A:  MOVF   2E,W
013C:  ADDLW  16
013E:  MOVWF  FE9
0140:  MOVLW  00
0142:  ADDWFC 03,W
0144:  MOVWF  FEA
0146:  MOVF   FEF,W
0148:  XORLW  FF
014A:  MOVWF  2F
014C:  MOVWF  37
014E:  RCALL  0004
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK); 
0150:  BCF    F95.5
0152:  BSF    F8C.5
0154:  BCF    F95.5
0156:  BCF    F8C.5
....................             delay_ms(1);
0158:  MOVLW  01
015A:  MOVWF  2F
015C:  RCALL  0100
....................             SSPI_WRITE(~0xff);
015E:  CLRF   37
0160:  RCALL  0004
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
0162:  BCF    F95.5
0164:  BSF    F8C.5
0166:  BCF    F95.5
0168:  BCF    F8C.5
016A:  MOVF   2E,W
016C:  INCF   2E,F
016E:  BCF    FD8.0
0170:  RRCF   2D,F
0172:  BRA    012C
....................       }
....................       return OK;
0174:  MOVLW  00
0176:  MOVWF  01
0178:  GOTO   0242 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {
....................      unsigned int8 cot;
....................      for(cot=0;cot<4;cot++)
*
0284:  CLRF   2D
0286:  MOVF   2D,W
0288:  SUBLW  03
028A:  BNC   02F4
....................      {
....................         output_bit(pin_b7,cot&0x02);
028C:  BTFSC  2D.1
028E:  BRA    0294
0290:  BCF    F8A.7
0292:  BRA    0296
0294:  BSF    F8A.7
0296:  BCF    F93.7
....................         output_bit(pin_b6,cot&0x01);
0298:  BTFSC  2D.0
029A:  BRA    02A0
029C:  BCF    F8A.6
029E:  BRA    02A2
02A0:  BSF    F8A.6
02A2:  BCF    F93.6
....................         IF          (!INPUT(PIN_B2))    return (3 + cot*4);             
02A4:  BSF    F93.2
02A6:  BTFSC  F81.2
02A8:  BRA    02B8
02AA:  MOVF   2D,W
02AC:  MULLW  04
02AE:  MOVF   FF3,W
02B0:  ADDLW  03
02B2:  MOVWF  01
02B4:  BRA    02F8
02B6:  BRA    02F0
....................         ELSE    IF  (!INPUT(PIN_B3))    return (2 + cot*4);               
02B8:  BSF    F93.3
02BA:  BTFSC  F81.3
02BC:  BRA    02CC
02BE:  MOVF   2D,W
02C0:  MULLW  04
02C2:  MOVF   FF3,W
02C4:  ADDLW  02
02C6:  MOVWF  01
02C8:  BRA    02F8
02CA:  BRA    02F0
....................         ELSE    IF  (!INPUT(PIN_B4))    return (1 + cot*4);            
02CC:  BSF    F93.4
02CE:  BTFSC  F81.4
02D0:  BRA    02E0
02D2:  MOVF   2D,W
02D4:  MULLW  04
02D6:  MOVF   FF3,W
02D8:  ADDLW  01
02DA:  MOVWF  01
02DC:  BRA    02F8
02DE:  BRA    02F0
....................         ELSE    IF  (!INPUT(PIN_B5))    return (0 + cot*4);
02E0:  BSF    F93.5
02E2:  BTFSC  F81.5
02E4:  BRA    02F0
02E6:  MOVF   2D,W
02E8:  MULLW  04
02EA:  MOVFF  FF3,01
02EE:  BRA    02F8
02F0:  INCF   2D,F
02F2:  BRA    0286
....................      }
....................      return 0xff;
02F4:  MOVLW  FF
02F6:  MOVWF  01
02F8:  GOTO   0470 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LCD 20x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_glcd_lcd()
.................... {      
....................     SSPI_WRITE(system_var.glcdcontrol);             
*
017C:  MOVFF  09,37
0180:  RCALL  0004
....................     SSPI_WRITE(system_var.glcddata);
0182:  MOVFF  08,37
0186:  RCALL  0004
....................     SSPI_WRITE(system_var.lcdcontrol);       
0188:  MOVFF  07,37
018C:  RCALL  0004
....................     SSPI_WRITE(system_var.lcddata);           
018E:  MOVFF  06,37
0192:  RCALL  0004
....................     output_high(LCD_RCK);     
0194:  BCF    F95.2
0196:  BSF    F8C.2
....................     output_low(LCD_RCK);
0198:  BCF    F95.2
019A:  BCF    F8C.2
....................     return OK;
019C:  MOVLW  00
019E:  MOVWF  01
01A0:  RETURN 0
.................... }
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {     
....................     system_var.lcdcontrol = ~lcd_signal;
01A2:  MOVF   2D,W
01A4:  MOVWF  07
01A6:  COMF   07,F
....................     system_var.lcddata    = ~lcd_ins_hthi;      
01A8:  MOVFF  2E,06
01AC:  COMF   06,F
....................     private_write_glcd_lcd();
01AE:  RCALL  017C
....................     return OK;
01B0:  MOVLW  00
01B2:  MOVWF  01
01B4:  GOTO   0248 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx GLCD 128x64 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_glcd128x64(unsigned int8 glcd_signal,glcd_ins_hthi)
.................... {     
....................     system_var.glcdcontrol = ~glcd_signal;
01B8:  MOVF   2D,W
01BA:  MOVWF  09
01BC:  COMF   09,F
....................     system_var.glcddata    = ~glcd_ins_hthi;     
01BE:  MOVFF  2E,08
01C2:  COMF   08,F
....................     private_write_glcd_lcd();
01C4:  RCALL  017C
....................     return OK;
01C6:  MOVLW  00
01C8:  MOVWF  01
01CA:  GOTO   024E (RETURN)
.................... }
.................... //!//xxxxxxxxxxxxxxxxxxxxxxxxxxxxx LED Matrix xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_ledmatrix(unsigned int16 mahang,unsigned int16 macot1,
.................... unsigned int16 macot2,unsigned int16 macot3)
.................... {     
....................       SSPI_WRITE(macot3>>8);SSPI_WRITE(macot3);
01CE:  CLRF   36
01D0:  MOVFF  34,37
01D4:  RCALL  0004
01D6:  MOVFF  33,37
01DA:  RCALL  0004
....................       SSPI_WRITE(macot2>>8);SSPI_WRITE(macot2);
01DC:  CLRF   36
01DE:  MOVFF  32,37
01E2:  RCALL  0004
01E4:  MOVFF  31,37
01E8:  RCALL  0004
....................       SSPI_WRITE(macot1>>8);SSPI_WRITE(macot1);
01EA:  CLRF   36
01EC:  MOVFF  30,37
01F0:  RCALL  0004
01F2:  MOVFF  2F,37
01F6:  RCALL  0004
....................       SSPI_WRITE(mahang>>8);SSPI_WRITE(mahang);
01F8:  CLRF   36
01FA:  MOVFF  2E,37
01FE:  RCALL  0004
0200:  MOVFF  2D,37
0204:  RCALL  0004
....................       output_high(matrix_rck);
0206:  BCF    F95.7
0208:  BSF    F8C.7
....................       output_low(matrix_rck); 
020A:  BCF    F95.7
020C:  BCF    F8C.7
....................       return OK;
020E:  MOVLW  00
0210:  MOVWF  01
0212:  GOTO   0260 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result private_write_buzzer_relay()
.................... {       
....................       SSPI_WRITE(system_var.rbdc.xbyte[1]);      
*
0096:  MOVFF  05,37
009A:  RCALL  0004
....................       SSPI_WRITE(system_var.rbdc.xbyte[0]);
009C:  MOVFF  04,37
00A0:  RCALL  0004
....................       output_high(rbdc_rck);
00A2:  BCF    F95.3
00A4:  BSF    F8C.3
....................       output_low(rbdc_rck); 
00A6:  BCF    F95.3
00A8:  BCF    F8C.3
....................       return OK;
00AA:  MOVLW  00
00AC:  MOVWF  01
00AE:  GOTO   0234 (RETURN)
.................... }
.................... result buzzer_on()
.................... {    
....................       system_var.rbdc.bit.buzzer=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result buzzer_off()
.................... {     
....................       system_var.rbdc.bit.buzzer=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_1_on()
.................... {    
....................       system_var.rbdc.bit.relay_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_1_off()
.................... {    
....................       system_var.rbdc.bit.relay_1=0;
....................       private_write_buzzer_relay();  
....................       return OK;
.................... }
.................... result relay_2_on()
.................... {    
....................       system_var.rbdc.bit.relay_2=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result relay_2_off()
.................... {    
....................       system_var.rbdc.bit.relay_2=0;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_on()
.................... {    
....................       system_var.rbdc.bit.triac_1=1;
....................       private_write_buzzer_relay(); 
....................       return OK;
.................... }
.................... result triac_1_off()
.................... {    
....................       system_var.rbdc.bit.triac_1=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result triac_2_on()
.................... {    
....................       system_var.rbdc.bit.triac_2=1;
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... result triac_2_off()
.................... {    
....................       system_var.rbdc.bit.triac_2=0;
....................       private_write_buzzer_relay();   
....................       return OK;
.................... }
.................... result DCMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.DC_MOTOR_ENABLE=1;
....................       private_write_buzzer_relay();  
....................       setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................       setup_ccp1(ccp_pwm);  
....................       setup_ccp2(ccp_pwm);  
....................       return OK;
.................... }
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ set_pwm1_duty((int16)0);  set_pwm2_duty(duty);  }
....................         else      { set_pwm2_duty((int16)0);  set_pwm1_duty(duty);  }
....................      else         { set_pwm1_duty((int16)0);  set_pwm2_duty((int16)0);  }
....................      return OK;
.................... }
.................... 
.................... result STEPMOTOR_ENABLE()
.................... {
....................       system_var.rbdc.bit.step_motor_enable=1;
....................       return OK;
.................... }
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x0e,0x0a,0x0b,0x08,0x01,0x05,0x04,0x06,0x0e,0x0b,0x0d,0x07,0x0e,0x0b,0x0d,0x07};
....................       system_var.rbdc.bit.step_motor_in1=bit_test(Step_data[mode][step],0);
....................       system_var.rbdc.bit.step_motor_in2=bit_test(Step_data[mode][step],1);
....................       system_var.rbdc.bit.step_motor_in3=bit_test(Step_data[mode][step],2);
....................       system_var.rbdc.bit.step_motor_in4=bit_test(Step_data[mode][step],3);
....................       private_write_buzzer_relay();
....................       return OK;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................      output_high(ALLMODULE_G);  
*
0216:  BCF    F95.0
0218:  BSF    F8C.0
....................      set_tris_a(0xff);    set_tris_b(0x3c);                                                   
021A:  MOVLW  FF
021C:  MOVWF  F92
021E:  MOVLW  3C
0220:  MOVWF  F93
....................      set_tris_c(0xf1);    set_tris_e(0x00);                                               
0222:  MOVLW  F1
0224:  MOVWF  F94
0226:  MOVLW  00
0228:  MOVWF  F96
....................      set_tris_d(0x00);    output_d(0x00); 
022A:  MOVWF  F95
022C:  CLRF   F95
022E:  CLRF   F8C
....................      port_b_pullups(0xff); 
0230:  BCF    FF1.7
....................      private_write_buzzer_relay();
0232:  BRA    0096
....................      led32.ledx32=0;
0234:  CLRF   11
0236:  CLRF   10
0238:  CLRF   0F
023A:  CLRF   0E
....................      led32_display();
023C:  RCALL  00B2
....................      d7seg_display();
023E:  BRA    00D8
....................      s7seg_display();
0240:  BRA    0126
....................      write_lcd20x4(0xff,0xff);
0242:  SETF   2D
0244:  SETF   2E
0246:  BRA    01A2
....................      write_glcd128x64(0xff,0xff);
0248:  SETF   2D
024A:  SETF   2E
024C:  BRA    01B8
....................      write_ledmatrix(0,0,0,0); 
024E:  CLRF   2E
0250:  CLRF   2D
0252:  CLRF   30
0254:  CLRF   2F
0256:  CLRF   32
0258:  CLRF   31
025A:  CLRF   34
025C:  CLRF   33
025E:  BRA    01CE
....................      output_low(ALLMODULE_G);  
0260:  BCF    F95.0
0262:  BCF    F8C.0
....................      setup_adc(adc_clock_div_32);        
0264:  MOVF   FC0,W
0266:  ANDLW  C0
0268:  IORLW  02
026A:  MOVWF  FC0
026C:  BSF    FC0.7
026E:  BSF    FC2.0
....................      setup_adc_ports(an0_to_an2|vss_vdd);   
0270:  MOVF   FC1,W
0272:  ANDLW  C0
0274:  IORLW  0C
0276:  MOVWF  FC1
....................      setup_timer_3(t3_internal|t3_div_by_8);
0278:  MOVLW  B5
027A:  MOVWF  FB1
....................      return OK;
027C:  MOVLW  00
027E:  MOVWF  01
0280:  GOTO   08BE (RETURN)
.................... }
.................... void SSPI_WRITE(unsigned int8 x)
.................... { 
....................          if(x&0x80) ssdo=1; 
*
0004:  BTFSS  37.7
0006:  GOTO   0010
000A:  BSF    F84.2
000C:  GOTO   0012
....................          else       ssdo=0;
0010:  BCF    F84.2
....................          ssck=0;    ssck=1;   
0012:  BCF    F84.0
0014:  BSF    F84.0
....................          if(x&0x40) ssdo=1; 
0016:  BTFSS  37.6
0018:  GOTO   0022
001C:  BSF    F84.2
001E:  GOTO   0024
....................          else       ssdo=0;
0022:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0024:  BCF    F84.0
0026:  BSF    F84.0
....................          if(x&0x20) ssdo=1; 
0028:  BTFSS  37.5
002A:  GOTO   0034
002E:  BSF    F84.2
0030:  GOTO   0036
....................          else       ssdo=0;
0034:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0036:  BCF    F84.0
0038:  BSF    F84.0
....................          if(x&0x10) ssdo=1; 
003A:  BTFSS  37.4
003C:  GOTO   0046
0040:  BSF    F84.2
0042:  GOTO   0048
....................          else       ssdo=0;
0046:  BCF    F84.2
....................          ssck=0;    ssck=1;  
0048:  BCF    F84.0
004A:  BSF    F84.0
....................          if(x&0x08) ssdo=1; 
004C:  BTFSS  37.3
004E:  GOTO   0058
0052:  BSF    F84.2
0054:  GOTO   005A
....................          else       ssdo=0;
0058:  BCF    F84.2
....................          ssck=0;    ssck=1;  
005A:  BCF    F84.0
005C:  BSF    F84.0
....................          if(x&0x04) ssdo=1; 
005E:  BTFSS  37.2
0060:  GOTO   006A
0064:  BSF    F84.2
0066:  GOTO   006C
....................          else       ssdo=0;
006A:  BCF    F84.2
....................          ssck=0;    ssck=1;  
006C:  BCF    F84.0
006E:  BSF    F84.0
....................          if(x&0x02) ssdo=1; 
0070:  BTFSS  37.1
0072:  GOTO   007C
0076:  BSF    F84.2
0078:  GOTO   007E
....................          else       ssdo=0;
007C:  BCF    F84.2
....................          ssck=0;    ssck=1;  
007E:  BCF    F84.0
0080:  BSF    F84.0
....................          if(x&0x01) ssdo=1; 
0082:  BTFSS  37.0
0084:  GOTO   008E
0088:  BSF    F84.2
008A:  GOTO   0090
....................          else       ssdo=0;
008E:  BCF    F84.2
....................          ssck=0;    ssck=1;       
0090:  BCF    F84.0
0092:  BSF    F84.0
0094:  RETURN 0
.................... }
.................... #endif
.................... 
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
038A:  MOVF   FB2,W
038C:  MOVFF  FB3,03
0390:  ADDWF  0A,F
0392:  MOVF   FB3,W
0394:  ADDWFC 0B,F
0396:  MOVLW  00
0398:  ADDWFC 0C,F
039A:  ADDWFC 0D,F
039C:  CLRF   FB3
039E:  MOVLW  02
03A0:  MOVWF  FB2
03A2:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
03A4:  BTFSS  FA1.1
03A6:  BRA    03B0
03A8:  MOVLW  01
03AA:  ADDWF  0C,F
03AC:  MOVLW  00
03AE:  ADDWFC 0D,F
03B0:  BCF    FA1.1
....................       return delay.timeline/625;
03B2:  BCF    FD8.1
03B4:  MOVFF  0D,34
03B8:  MOVFF  0C,33
03BC:  MOVFF  0B,32
03C0:  MOVFF  0A,31
03C4:  CLRF   38
03C6:  CLRF   37
03C8:  MOVLW  02
03CA:  MOVWF  36
03CC:  MOVLW  71
03CE:  MOVWF  35
03D0:  RCALL  02FC
03D2:  MOVFF  01,02
03D6:  MOVFF  00,01
03DA:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
03DC:  MOVF   FB2,W
03DE:  MOVFF  FB3,03
03E2:  ADDWF  0A,F
03E4:  MOVF   FB3,W
03E6:  ADDWFC 0B,F
03E8:  MOVLW  00
03EA:  ADDWFC 0C,F
03EC:  ADDWFC 0D,F
03EE:  CLRF   FB3
03F0:  MOVLW  02
03F2:  MOVWF  FB2
03F4:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
03F6:  BTFSS  FA1.1
03F8:  BRA    0402
03FA:  MOVLW  01
03FC:  ADDWF  0C,F
03FE:  MOVLW  00
0400:  ADDWFC 0D,F
0402:  BCF    FA1.1
....................       tam = delay.timeline/625;
0404:  BCF    FD8.1
0406:  MOVFF  0D,34
040A:  MOVFF  0C,33
040E:  MOVFF  0B,32
0412:  MOVFF  0A,31
0416:  CLRF   38
0418:  CLRF   37
041A:  MOVLW  02
041C:  MOVWF  36
041E:  MOVLW  71
0420:  MOVWF  35
0422:  RCALL  02FC
0424:  MOVFF  01,30
0428:  MOVFF  00,2F
....................       if(t<=tam) return tam-t;
042C:  MOVF   2E,W
042E:  SUBWF  30,W
0430:  BNC   0450
0432:  BNZ   043A
0434:  MOVF   2D,W
0436:  SUBWF  2F,W
0438:  BNC   0450
043A:  MOVF   2D,W
043C:  SUBWF  2F,W
043E:  MOVWF  00
0440:  MOVF   2E,W
0442:  SUBWFB 30,W
0444:  MOVWF  03
0446:  MOVFF  00,01
044A:  MOVWF  02
044C:  BRA    046C
044E:  BRA    046C
....................       else       return 0xffff-t + tam;
0450:  MOVLW  FF
0452:  BSF    FD8.0
0454:  SUBFWB 2D,W
0456:  MOVWF  31
0458:  MOVLW  FF
045A:  SUBFWB 2E,W
045C:  MOVWF  32
045E:  MOVF   2F,W
0460:  ADDWF  31,W
0462:  MOVWF  01
0464:  MOVF   30,W
0466:  ADDWFC 32,W
0468:  MOVWF  03
046A:  MOVWF  02
046C:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
....................       switch (step)
....................       {
....................           case 0:
....................                  if(input(pin)==0)
....................                   {
....................                         oldpin   = pin;
....................                         t        = delay_start();
....................                         step     = 1;
....................                   }
....................                  break;
....................            case 1:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
....................                    {
....................                       t    = delay_start();
....................                       step = 2;
....................                       return OK;
....................                    }
....................                  break;
....................             case 2:
....................                  if(input(oldpin))step = 0;
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
....................                    {
....................                        t        = delay_start();
....................                        step     = 3;
....................                    } 
....................                  break;
....................             case 3:
....................                    if(input(oldpin))step = 0; 
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
....................                        {
....................                           t  = delay_start();
....................                           return OK;
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include <tv_key4x4.c>
.................... #ifndef  __TV_KEY4x4_C__
.................... #define  __TV_KEY4x4_C__
.................... #include<tv_key4x4.h>
.................... #ifndef  __TV_KEY4x4_H__
.................... #define  __TV_KEY4x4_H__
.................... typedef struct
.................... {
....................       unsigned int8 key;
.................... }KEY4x4_STRUCT;
.................... KEY4x4_STRUCT  key4x4;
.................... result key4x4_read(void);
.................... #endif
.................... 
.................... result key4x4_read()
.................... {      
....................          static unsigned int8  step=0;
....................          static unsigned int16 t;
....................          key4x4.key = KEYREAD();
046E:  BRA    0284
0470:  MOVFF  01,23
....................          switch (step)
0474:  MOVF   24,W
0476:  ADDLW  FC
0478:  BTFSC  FD8.0
047A:  BRA    0540
047C:  ADDLW  04
047E:  GOTO   0548
....................          {
....................              case 0:
....................                    if( key4x4.key!=0xff)
0482:  INCFSZ 23,W
0484:  BRA    0488
0486:  BRA    0496
....................                       {     t   = delay_start();
0488:  RCALL  038A
048A:  MOVFF  02,26
048E:  MOVFF  01,25
....................                             step=1;
0492:  MOVLW  01
0494:  MOVWF  24
....................                       } 
....................                     break;
0496:  BRA    0540
....................               case 1:
....................                     if(key4x4.key==0xff)step =0;
0498:  INCFSZ 23,W
049A:  BRA    04A0
049C:  CLRF   24
049E:  BRA    04D0
....................                     else if(delay_stop(t)>=30)
04A0:  MOVFF  26,2E
04A4:  MOVFF  25,2D
04A8:  RCALL  03DC
04AA:  MOVFF  02,2E
04AE:  MOVFF  01,2D
04B2:  MOVF   2E,F
04B4:  BNZ   04BC
04B6:  MOVF   2D,W
04B8:  SUBLW  1D
04BA:  BC    04D0
....................                     {   step = 2;
04BC:  MOVLW  02
04BE:  MOVWF  24
....................                         t    = delay_start(); 
04C0:  RCALL  038A
04C2:  MOVFF  02,26
04C6:  MOVFF  01,25
....................                         return OK;
04CA:  MOVLW  00
04CC:  MOVWF  01
04CE:  BRA    0544
....................                     }
....................                     break; 
04D0:  BRA    0540
....................               case 2:
....................                     if(key4x4.key==0xff)step =0;
04D2:  INCFSZ 23,W
04D4:  BRA    04DA
04D6:  CLRF   24
04D8:  BRA    050A
....................                     else if(delay_stop(t)>=500)
04DA:  MOVFF  26,2E
04DE:  MOVFF  25,2D
04E2:  RCALL  03DC
04E4:  MOVFF  02,2E
04E8:  MOVFF  01,2D
04EC:  MOVF   02,W
04EE:  SUBLW  00
04F0:  BC    050A
04F2:  XORLW  FF
04F4:  BNZ   04FC
04F6:  MOVF   2D,W
04F8:  SUBLW  F3
04FA:  BC    050A
....................                        {
....................                            t    = delay_start(); 
04FC:  RCALL  038A
04FE:  MOVFF  02,26
0502:  MOVFF  01,25
....................                            step = 3;
0506:  MOVLW  03
0508:  MOVWF  24
....................                        } 
....................                     break;
050A:  BRA    0540
....................               case 3:
....................                     if(key4x4.key==0xff)step =0;
050C:  INCFSZ 23,W
050E:  BRA    0514
0510:  CLRF   24
0512:  BRA    0540
....................                     else if(delay_stop(t)>=100)
0514:  MOVFF  26,2E
0518:  MOVFF  25,2D
051C:  RCALL  03DC
051E:  MOVFF  02,2E
0522:  MOVFF  01,2D
0526:  MOVF   2E,F
0528:  BNZ   0530
052A:  MOVF   2D,W
052C:  SUBLW  63
052E:  BC    0540
....................                       {
....................                          t    = delay_start(); 
0530:  RCALL  038A
0532:  MOVFF  02,26
0536:  MOVFF  01,25
....................                          return OK;
053A:  MOVLW  00
053C:  MOVWF  01
053E:  BRA    0544
....................                       }
....................                      break; 
....................          }
....................          return BUSY;
0540:  MOVLW  02
0542:  MOVWF  01
0544:  GOTO   056C (RETURN)
.................... }
.................... #endif
.................... 
.................... unsigned int8 cd=1;
.................... unsigned int8 i;
.................... unsigned int16 j,k;
.................... void kiemtra_xuli_nutnhan()
.................... {
....................    if(key4x4_read()==ok)
*
056A:  BRA    046E
056C:  MOVF   01,F
056E:  BNZ   058A
....................    {
....................      cd=key4x4.key;
0570:  MOVFF  23,27
....................      led32.ledx32=0;
0574:  CLRF   11
0576:  CLRF   10
0578:  CLRF   0F
057A:  CLRF   0E
....................      i=0;
057C:  CLRF   28
....................      j=0;
057E:  CLRF   2A
0580:  CLRF   29
....................      if(cd==0) cd=1;
0582:  MOVF   27,F
0584:  BNZ   058A
0586:  MOVLW  01
0588:  MOVWF  27
....................    }
058A:  RETURN 0
.................... }
.................... void chop_tat_led()
.................... {
....................    led32.ledx32=~led32.ledx32;
058C:  COMF   0E,F
058E:  COMF   0F,F
0590:  COMF   10,F
0592:  COMF   11,F
....................    led32_display();
0594:  RCALL  00B2
....................    for(j=0;j<=2000;j++)   kiemtra_xuli_nutnhan();
0596:  CLRF   2A
0598:  CLRF   29
059A:  MOVF   2A,W
059C:  SUBLW  07
059E:  BNC   05B2
05A0:  BNZ   05A8
05A2:  MOVF   29,W
05A4:  SUBLW  D0
05A6:  BNC   05B2
05A8:  RCALL  056A
05AA:  INCF   29,F
05AC:  BTFSC  FD8.2
05AE:  INCF   2A,F
05B0:  BRA    059A
05B2:  GOTO   08C4 (RETURN)
.................... }
.................... void sang_tat_dan_pst()
.................... {
....................    if(i<=64)
05B6:  MOVF   28,W
05B8:  SUBLW  40
05BA:  BNC   0604
....................    {
....................       if(i<32)  led32.ledx32=(led32.ledx32<<1)|1;
05BC:  MOVF   28,W
05BE:  SUBLW  1F
05C0:  BNC   05E6
05C2:  BCF    FD8.0
05C4:  RLCF   0E,W
05C6:  MOVWF  2E
05C8:  RLCF   0F,W
05CA:  MOVWF  2F
05CC:  RLCF   10,W
05CE:  MOVWF  30
05D0:  RLCF   11,W
05D2:  MOVWF  31
05D4:  MOVF   2E,W
05D6:  IORLW  01
05D8:  MOVWF  0E
05DA:  MOVFF  2F,0F
05DE:  MOVFF  30,10
05E2:  MOVFF  31,11
....................       if(i>=32) led32.ledx32=led32.ledx32<<1;
05E6:  MOVF   28,W
05E8:  SUBLW  1F
05EA:  BC    05F6
05EC:  BCF    FD8.0
05EE:  RLCF   0E,F
05F0:  RLCF   0F,F
05F2:  RLCF   10,F
05F4:  RLCF   11,F
....................       led32_display();
05F6:  RCALL  00B2
....................       delay_ms(50);
05F8:  MOVLW  32
05FA:  MOVWF  2F
05FC:  RCALL  0100
....................       i++;
05FE:  INCF   28,F
....................       kiemtra_xuli_nutnhan();
0600:  RCALL  056A
....................    }
0602:  BRA    0606
....................    else
....................       i=0;
0604:  CLRF   28
0606:  GOTO   08CC (RETURN)
.................... }
.................... void sang_tat_dan_tsp()
.................... {
....................    if(i<=64)
060A:  MOVF   28,W
060C:  SUBLW  40
060E:  BNC   0654
....................       {
....................          if(i<32)  led32.ledx32=(led32.ledx32>>1)|0x80000000;
0610:  MOVF   28,W
0612:  SUBLW  1F
0614:  BNC   0636
0616:  BCF    FD8.0
0618:  RRCF   11,W
061A:  MOVWF  31
061C:  RRCF   10,W
061E:  MOVWF  30
0620:  RRCF   0F,W
0622:  MOVWF  2F
0624:  RRCF   0E,W
0626:  MOVWF  0E
0628:  MOVFF  2F,0F
062C:  MOVFF  30,10
0630:  MOVF   31,W
0632:  IORLW  80
0634:  MOVWF  11
....................          if(i>=32) led32.ledx32=led32.ledx32>>1;
0636:  MOVF   28,W
0638:  SUBLW  1F
063A:  BC    0646
063C:  BCF    FD8.0
063E:  RRCF   11,F
0640:  RRCF   10,F
0642:  RRCF   0F,F
0644:  RRCF   0E,F
....................          led32_display();
0646:  RCALL  00B2
....................          delay_ms(50);
0648:  MOVLW  32
064A:  MOVWF  2F
064C:  RCALL  0100
....................          i++;
064E:  INCF   28,F
....................          kiemtra_xuli_nutnhan();
0650:  RCALL  056A
....................       }
0652:  BRA    0656
....................       else
....................          i=0;
0654:  CLRF   28
0656:  GOTO   08D4 (RETURN)
.................... }
.................... void sang_tat_dan_ngoai_vao()
.................... {
....................    if(i<=32)
065A:  MOVF   28,W
065C:  SUBLW  20
065E:  BNC   06AA
....................    {
....................       if(i<16) 
0660:  MOVF   28,W
0662:  SUBLW  0F
0664:  BNC   068A
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1)|0x8000;
0666:  BCF    FD8.0
0668:  RRCF   11,W
066A:  MOVWF  2E
066C:  RRCF   10,W
066E:  MOVWF  10
0670:  MOVF   2E,W
0672:  IORLW  80
0674:  MOVWF  11
....................          led32.ledx16[0]=(led32.ledx16[0]<<1)|0x0001;
0676:  BCF    FD8.0
0678:  RLCF   0E,W
067A:  MOVWF  2D
067C:  RLCF   0F,W
067E:  MOVWF  2E
0680:  MOVF   2D,W
0682:  IORLW  01
0684:  MOVWF  0E
0686:  MOVFF  2E,0F
....................       }
....................       if(i>=16) 
068A:  MOVF   28,W
068C:  SUBLW  0F
068E:  BC    069C
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]>>1);
0690:  BCF    FD8.0
0692:  RRCF   11,F
0694:  RRCF   10,F
....................          led32.ledx16[0]=(led32.ledx16[0]<<1);
0696:  BCF    FD8.0
0698:  RLCF   0E,F
069A:  RLCF   0F,F
....................       }
....................       led32_display();
069C:  RCALL  00B2
....................       delay_ms(50);
069E:  MOVLW  32
06A0:  MOVWF  2F
06A2:  RCALL  0100
....................       kiemtra_xuli_nutnhan();
06A4:  RCALL  056A
....................       i++;
06A6:  INCF   28,F
....................    }
06A8:  BRA    06AC
....................    else i=0;
06AA:  CLRF   28
06AC:  GOTO   08DC (RETURN)
.................... }
.................... void sang_tat_dan_trong_ra()
.................... {
....................    if(i<=32)
06B0:  MOVF   28,W
06B2:  SUBLW  20
06B4:  BNC   0700
....................    {
....................       if(i<16) 
06B6:  MOVF   28,W
06B8:  SUBLW  0F
06BA:  BNC   06E0
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1)|0x0001;
06BC:  BCF    FD8.0
06BE:  RLCF   10,W
06C0:  MOVWF  2D
06C2:  RLCF   11,W
06C4:  MOVWF  2E
06C6:  MOVF   2D,W
06C8:  IORLW  01
06CA:  MOVWF  10
06CC:  MOVFF  2E,11
....................          led32.ledx16[0]=(led32.ledx16[0]>>1)|0x8000;
06D0:  BCF    FD8.0
06D2:  RRCF   0F,W
06D4:  MOVWF  2E
06D6:  RRCF   0E,W
06D8:  MOVWF  0E
06DA:  MOVF   2E,W
06DC:  IORLW  80
06DE:  MOVWF  0F
....................       }
....................       if(i>=16) 
06E0:  MOVF   28,W
06E2:  SUBLW  0F
06E4:  BC    06F2
....................       {
....................          led32.ledx16[1]=(led32.ledx16[1]<<1);
06E6:  BCF    FD8.0
06E8:  RLCF   10,F
06EA:  RLCF   11,F
....................          led32.ledx16[0]=(led32.ledx16[0]>>1);
06EC:  BCF    FD8.0
06EE:  RRCF   0F,F
06F0:  RRCF   0E,F
....................       }
....................       led32_display();
06F2:  RCALL  00B2
....................       delay_ms(50);
06F4:  MOVLW  32
06F6:  MOVWF  2F
06F8:  RCALL  0100
....................       kiemtra_xuli_nutnhan();
06FA:  RCALL  056A
....................       i++;
06FC:  INCF   28,F
....................    }
06FE:  BRA    0702
....................    else i=0;
0700:  CLRF   28
0702:  GOTO   08E4 (RETURN)
.................... }
.................... void sang_don_pst()
.................... {
....................    if(i<=32)
0706:  MOVF   28,W
0708:  SUBLW  20
070A:  BNC   079E
....................    {
....................       if(j<32-i)
070C:  MOVLW  20
070E:  BSF    FD8.0
0710:  SUBFWB 28,W
0712:  MOVF   2A,F
0714:  BNZ   0796
0716:  SUBWF  29,W
0718:  BC    0796
....................       {
....................          led32.ledx32=~(0xffffffff>>i)|((int32)1<<j);
071A:  SETF   03
071C:  SETF   02
071E:  SETF   01
0720:  SETF   00
0722:  MOVF   28,W
0724:  MOVWF  2D
0726:  BZ    0736
0728:  BCF    FD8.0
072A:  RRCF   03,F
072C:  RRCF   02,F
072E:  RRCF   01,F
0730:  RRCF   00,F
0732:  DECFSZ 2D,F
0734:  BRA    0728
0736:  MOVF   00,W
0738:  MOVWF  2E
073A:  COMF   2E,F
073C:  MOVF   01,W
073E:  MOVWF  2F
0740:  COMF   2F,F
0742:  MOVF   02,W
0744:  MOVWF  30
0746:  COMF   30,F
0748:  MOVF   03,W
074A:  MOVWF  31
074C:  COMF   31,F
074E:  CLRF   03
0750:  CLRF   02
0752:  CLRF   01
0754:  MOVLW  01
0756:  MOVWF  00
0758:  MOVF   29,W
075A:  MOVWF  32
075C:  BZ    076C
075E:  BCF    FD8.0
0760:  RLCF   00,F
0762:  RLCF   01,F
0764:  RLCF   02,F
0766:  RLCF   03,F
0768:  DECFSZ 32,F
076A:  BRA    075E
076C:  MOVF   00,W
076E:  IORWF  2E,W
0770:  MOVWF  0E
0772:  MOVF   01,W
0774:  IORWF  2F,W
0776:  MOVWF  0F
0778:  MOVF   02,W
077A:  IORWF  30,W
077C:  MOVWF  10
077E:  MOVF   03,W
0780:  IORWF  31,W
0782:  MOVWF  11
....................          j++;
0784:  INCF   29,F
0786:  BTFSC  FD8.2
0788:  INCF   2A,F
....................          delay_ms(50);
078A:  MOVLW  32
078C:  MOVWF  2F
078E:  RCALL  0100
....................          led32_display();
0790:  RCALL  00B2
....................          kiemtra_xuli_nutnhan();
0792:  RCALL  056A
....................       }
0794:  BRA    079C
....................       else 
....................       {
....................          j=0;
0796:  CLRF   2A
0798:  CLRF   29
....................          i++;  
079A:  INCF   28,F
....................       }
....................    }
079C:  BRA    07A0
....................    else i=0;
079E:  CLRF   28
07A0:  GOTO   08EC (RETURN)
.................... }
.................... void sang_don_tsp()
.................... {
....................    if(i<=32)
07A4:  MOVF   28,W
07A6:  SUBLW  20
07A8:  BNC   083C
....................    {
....................       if(j<32-i)
07AA:  MOVLW  20
07AC:  BSF    FD8.0
07AE:  SUBFWB 28,W
07B0:  MOVF   2A,F
07B2:  BNZ   0834
07B4:  SUBWF  29,W
07B6:  BC    0834
....................       {
....................          led32.ledx32=~(0xffffffff<<i)|(0x80000000>>j);
07B8:  SETF   03
07BA:  SETF   02
07BC:  SETF   01
07BE:  SETF   00
07C0:  MOVF   28,W
07C2:  MOVWF  2D
07C4:  BZ    07D4
07C6:  BCF    FD8.0
07C8:  RLCF   00,F
07CA:  RLCF   01,F
07CC:  RLCF   02,F
07CE:  RLCF   03,F
07D0:  DECFSZ 2D,F
07D2:  BRA    07C6
07D4:  MOVF   00,W
07D6:  MOVWF  2E
07D8:  COMF   2E,F
07DA:  MOVF   01,W
07DC:  MOVWF  2F
07DE:  COMF   2F,F
07E0:  MOVF   02,W
07E2:  MOVWF  30
07E4:  COMF   30,F
07E6:  MOVF   03,W
07E8:  MOVWF  31
07EA:  COMF   31,F
07EC:  MOVLW  80
07EE:  MOVWF  03
07F0:  CLRF   02
07F2:  CLRF   01
07F4:  CLRF   00
07F6:  MOVF   29,W
07F8:  MOVWF  32
07FA:  BZ    080A
07FC:  BCF    FD8.0
07FE:  RRCF   03,F
0800:  RRCF   02,F
0802:  RRCF   01,F
0804:  RRCF   00,F
0806:  DECFSZ 32,F
0808:  BRA    07FC
080A:  MOVF   00,W
080C:  IORWF  2E,W
080E:  MOVWF  0E
0810:  MOVF   01,W
0812:  IORWF  2F,W
0814:  MOVWF  0F
0816:  MOVF   02,W
0818:  IORWF  30,W
081A:  MOVWF  10
081C:  MOVF   03,W
081E:  IORWF  31,W
0820:  MOVWF  11
....................          j++;
0822:  INCF   29,F
0824:  BTFSC  FD8.2
0826:  INCF   2A,F
....................          delay_ms(50);
0828:  MOVLW  32
082A:  MOVWF  2F
082C:  RCALL  0100
....................          led32_display();
082E:  RCALL  00B2
....................          kiemtra_xuli_nutnhan();
0830:  RCALL  056A
....................       }
0832:  BRA    083A
....................       else 
....................       {
....................          j=0;
0834:  CLRF   2A
0836:  CLRF   29
....................          i++;
0838:  INCF   28,F
....................       }
....................    }
083A:  BRA    083E
....................    else i=0;
083C:  CLRF   28
083E:  GOTO   08F4 (RETURN)
.................... }
.................... void main()
0842:  CLRF   FF8
0844:  BCF    FD0.7
0846:  BSF    FB8.3
0848:  MOVLW  08
084A:  MOVWF  FAF
084C:  MOVLW  02
084E:  MOVWF  FB0
0850:  MOVLW  A6
0852:  MOVWF  FAC
0854:  MOVLW  90
0856:  MOVWF  FAB
0858:  MOVLW  01
085A:  MOVWF  27
085C:  MOVF   FC1,W
085E:  ANDLW  C0
0860:  IORLW  0F
0862:  MOVWF  FC1
0864:  MOVLW  07
0866:  MOVWF  FB4
0868:  BRA    087E
086A:  DATA 06,40
086C:  DATA 04,00
086E:  DATA 0E,40
0870:  DATA 12,FF
0872:  DATA 03,80
0874:  DATA 00,00
0876:  DATA 00,03
0878:  DATA 00,24
087A:  DATA 00,00
087C:  DATA 00,00
087E:  MOVLW  00
0880:  MOVWF  FF8
0882:  MOVLW  08
0884:  MOVWF  FF7
0886:  MOVLW  6A
0888:  MOVWF  FF6
088A:  TBLRD*+
088C:  MOVF   FF5,W
088E:  MOVWF  00
0890:  XORLW  00
0892:  BZ    08BA
0894:  TBLRD*+
0896:  MOVF   FF5,W
0898:  MOVWF  01
089A:  BTFSC  FE8.7
089C:  BRA    08A8
089E:  ANDLW  3F
08A0:  MOVWF  FEA
08A2:  TBLRD*+
08A4:  MOVFF  FF5,FE9
08A8:  BTFSC  01.6
08AA:  TBLRD*+
08AC:  BTFSS  01.6
08AE:  TBLRD*+
08B0:  MOVFF  FF5,FEE
08B4:  DCFSNZ 00,F
08B6:  BRA    088A
08B8:  BRA    08AC
08BA:  CLRF   FF8
.................... {
....................    system_init();
08BC:  BRA    0216
....................    while(true)
....................    {
....................       if(cd==1) chop_tat_led();
08BE:  DECFSZ 27,W
08C0:  BRA    08C4
08C2:  BRA    058C
....................       if(cd==2) sang_tat_dan_pst();
08C4:  MOVF   27,W
08C6:  SUBLW  02
08C8:  BTFSC  FD8.2
08CA:  BRA    05B6
....................       if(cd==3) sang_tat_dan_tsp();
08CC:  MOVF   27,W
08CE:  SUBLW  03
08D0:  BTFSC  FD8.2
08D2:  BRA    060A
....................       if(cd==4) sang_tat_dan_ngoai_vao();
08D4:  MOVF   27,W
08D6:  SUBLW  04
08D8:  BTFSC  FD8.2
08DA:  BRA    065A
....................       if(cd==5) sang_tat_dan_trong_ra();
08DC:  MOVF   27,W
08DE:  SUBLW  05
08E0:  BTFSC  FD8.2
08E2:  BRA    06B0
....................       if(cd==6) sang_don_pst();
08E4:  MOVF   27,W
08E6:  SUBLW  06
08E8:  BTFSC  FD8.2
08EA:  BRA    0706
....................       if(cd==7) sang_don_tsp();
08EC:  MOVF   27,W
08EE:  SUBLW  07
08F0:  BNZ   08F4
08F2:  BRA    07A4
....................       else;
08F4:  BRA    08BE
....................    }
.................... }
.................... 
08F6:  SLEEP 

Configuration Fuses:
   Word  1: CC27   PLL12 CPUDIV1 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
