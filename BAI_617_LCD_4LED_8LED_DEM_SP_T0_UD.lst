CCS PCH C Compiler, Version 5.101, 43599               14-Mar-23 06:57

               Filename:   C:\TTVXL\TTVXL\Thuc Hanh\BAI_617_LCD_4LED_8LED_DEM_SP_T0_UD.lst

               ROM used:   2348 bytes (2%)
                           Largest free fragment is 65536
               RAM used:   36 (1%) at main() level
                           55 (1%) worst case
               Stack used: 3 locations
               Stack size: 31

*
00000:  GOTO   0776
.................... //#DEFINE BOARD D501
.................... #include<tv_boards.c>
.................... #ifndef    __TV_BOARDS_C__
.................... #define    __TV_BOARDS_C__
.................... #define    D401          1
.................... #define    D501          2
.................... #define    D503          3
.................... #define    MOPHONG       4
.................... #ifndef    BOARD
.................... #define    BOARD         MOPHONG
.................... #endif
.................... #if  BOARD ==  D401
.................... #include <TV_D401_TH.C>
.................... 
.................... #elif  BOARD ==  D501
.................... #include <TV_D501_TH.C>
....................  
.................... #elif  BOARD ==  D503
.................... #include <TV_D501_TH.C>
.................... 
.................... #else 
.................... #include <TV_MOPHONG.C>
.................... #ifndef    __TV_MOPHONG_C__
.................... #define    __TV_MOPHONG_C__
.................... #include<TV_MOPHONG.h>
.................... #ifndef    __TV_MOPHONG_H__
.................... #define    __TV_MOPHONG_H__
.................... #include    <18f6722.h>
.................... //////////// Standard Header file for the PIC18F6722 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F6722
00004:  CLRF   FF7
00006:  ADDLW  18
00008:  MOVWF  FF6
0000A:  MOVLW  00
0000C:  ADDWFC FF7,F
0000E:  MOVLW  00
00010:  MOVWF  FF8
00012:  TBLRD*+
00014:  MOVF   FF5,W
00016:  RETURN 0
00018:  DATA C0,F9
0001A:  DATA A4,B0
0001C:  DATA 99,92
0001E:  DATA 82,F8
00020:  DATA 80,90
00022:  DATA 88,83
00024:  DATA C6,A1
00026:  DATA 86,7F
00028:  CLRF   FF7
0002A:  ADDLW  3C
0002C:  MOVWF  FF6
0002E:  MOVLW  00
00030:  ADDWFC FF7,F
00032:  MOVLW  00
00034:  MOVWF  FF8
00036:  TBLRD*+
00038:  MOVF   FF5,W
0003A:  RETURN 0
0003C:  DATA 07,0F
0003E:  DATA 1F,1F
00040:  DATA 1F,1F
00042:  DATA 1F,1F
00044:  DATA 1F,1F
00046:  DATA 1F,00
00048:  DATA 00,00
0004A:  DATA 00,00
0004C:  DATA 1C,1E
0004E:  DATA 1F,1F
00050:  DATA 1F,1F
00052:  DATA 1F,1F
00054:  DATA 00,00
00056:  DATA 00,00
00058:  DATA 00,1F
0005A:  DATA 1F,1F
0005C:  DATA 1F,1F
0005E:  DATA 1F,1F
00060:  DATA 1F,1F
00062:  DATA 1E,1C
00064:  DATA 1F,1F
00066:  DATA 1F,1F
00068:  DATA 1F,1F
0006A:  DATA 0F,07
0006C:  DATA 1F,1F
0006E:  DATA 1F,00
00070:  DATA 00,00
00072:  DATA 1F,1F
00074:  DATA 1F,1F
00076:  DATA 1F,1F
00078:  DATA 1F,1F
0007A:  DATA 1F,1F
0007C:  CLRF   FF7
0007E:  ADDLW  90
00080:  MOVWF  FF6
00082:  MOVLW  00
00084:  ADDWFC FF7,F
00086:  MOVLW  00
00088:  MOVWF  FF8
0008A:  TBLRD*+
0008C:  MOVF   FF5,W
0008E:  RETURN 0
00090:  DATA 80,C0
00092:  DATA 94,D4
*
00338:  MOVF   25,W
0033A:  ANDLW  07
0033C:  MOVWF  00
0033E:  RRCF   25,W
00340:  MOVWF  01
00342:  RRCF   01,F
00344:  RRCF   01,F
00346:  MOVLW  1F
00348:  ANDWF  01,F
0034A:  MOVF   01,W
0034C:  ADDWF  27,W
0034E:  MOVWF  FE9
00350:  MOVLW  00
00352:  ADDWFC 28,W
00354:  MOVWF  FEA
00356:  CLRF   01
00358:  INCF   01,F
0035A:  INCF   00,F
0035C:  BRA    0360
0035E:  RLCF   01,F
00360:  DECFSZ 00,F
00362:  BRA    035E
00364:  MOVF   26,F
00366:  BZ    036E
00368:  MOVF   01,W
0036A:  IORWF  FEF,F
0036C:  BRA    0374
0036E:  COMF   01,F
00370:  MOVF   01,W
00372:  ANDWF  FEF,F
00374:  RETURN 0
00376:  MOVF   25,W
00378:  ANDLW  07
0037A:  MOVWF  00
0037C:  RRCF   25,W
0037E:  MOVWF  01
00380:  RRCF   01,F
00382:  RRCF   01,F
00384:  MOVLW  1F
00386:  ANDWF  01,F
00388:  MOVF   01,W
0038A:  ADDWF  26,W
0038C:  MOVWF  FE9
0038E:  MOVLW  00
00390:  ADDWFC 27,W
00392:  MOVWF  FEA
00394:  MOVFF  FEF,01
00398:  INCF   00,F
0039A:  BRA    039E
0039C:  RRCF   01,F
0039E:  DECFSZ 00,F
003A0:  BRA    039C
003A2:  MOVLW  01
003A4:  ANDWF  01,F
003A6:  RETURN 0
003A8:  BTFSC  FD8.1
003AA:  BRA    03B2
003AC:  CLRF   FEA
003AE:  MOVLW  31
003B0:  MOVWF  FE9
003B2:  CLRF   00
003B4:  CLRF   01
003B6:  CLRF   02
003B8:  CLRF   03
003BA:  CLRF   31
003BC:  CLRF   32
003BE:  CLRF   33
003C0:  CLRF   34
003C2:  MOVF   30,W
003C4:  IORWF  2F,W
003C6:  IORWF  2E,W
003C8:  IORWF  2D,W
003CA:  BZ    0424
003CC:  MOVLW  20
003CE:  MOVWF  35
003D0:  BCF    FD8.0
003D2:  RLCF   29,F
003D4:  RLCF   2A,F
003D6:  RLCF   2B,F
003D8:  RLCF   2C,F
003DA:  RLCF   31,F
003DC:  RLCF   32,F
003DE:  RLCF   33,F
003E0:  RLCF   34,F
003E2:  MOVF   30,W
003E4:  SUBWF  34,W
003E6:  BNZ   03F8
003E8:  MOVF   2F,W
003EA:  SUBWF  33,W
003EC:  BNZ   03F8
003EE:  MOVF   2E,W
003F0:  SUBWF  32,W
003F2:  BNZ   03F8
003F4:  MOVF   2D,W
003F6:  SUBWF  31,W
003F8:  BNC   0418
003FA:  MOVF   2D,W
003FC:  SUBWF  31,F
003FE:  MOVF   2E,W
00400:  BTFSS  FD8.0
00402:  INCFSZ 2E,W
00404:  SUBWF  32,F
00406:  MOVF   2F,W
00408:  BTFSS  FD8.0
0040A:  INCFSZ 2F,W
0040C:  SUBWF  33,F
0040E:  MOVF   30,W
00410:  BTFSS  FD8.0
00412:  INCFSZ 30,W
00414:  SUBWF  34,F
00416:  BSF    FD8.0
00418:  RLCF   00,F
0041A:  RLCF   01,F
0041C:  RLCF   02,F
0041E:  RLCF   03,F
00420:  DECFSZ 35,F
00422:  BRA    03D0
00424:  MOVFF  31,FEF
00428:  MOVFF  32,FEC
0042C:  MOVFF  33,FEC
00430:  MOVFF  34,FEC
00434:  RETURN 0
*
006A8:  ADDWF  FE8,W
006AA:  CLRF   FF7
006AC:  RLCF   FF7,F
006AE:  ADDLW  C9
006B0:  MOVWF  FF6
006B2:  MOVLW  06
006B4:  ADDWFC FF7,F
006B6:  MOVLW  00
006B8:  MOVWF  FF8
006BA:  MOVWF  FFB
006BC:  TBLRD*-
006BE:  MOVF   FF5,W
006C0:  MOVWF  FFA
006C2:  TBLRD*
006C4:  MOVF   FF5,W
006C6:  MOVWF  FF9
006C8:  DATA 3A,05
006CA:  DATA 76,05
006CC:  DATA DC,05
006CE:  DATA 42,06
*
0074E:  MOVF   25,W
00750:  CLRF   01
00752:  SUBWF  24,W
00754:  BC    075C
00756:  MOVFF  24,00
0075A:  BRA    0774
0075C:  CLRF   00
0075E:  MOVLW  08
00760:  MOVWF  26
00762:  RLCF   24,F
00764:  RLCF   00,F
00766:  MOVF   25,W
00768:  SUBWF  00,W
0076A:  BTFSC  FD8.0
0076C:  MOVWF  00
0076E:  RLCF   01,F
00770:  DECFSZ 26,F
00772:  BRA    0762
00774:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device     adc =10
.................... #fuses      hs,PUT, NOWDT
.................... #use        delay(clock=20M)
*
00094:  CLRF   FEA
00096:  MOVLW  25
00098:  MOVWF  FE9
0009A:  MOVF   FEF,W
0009C:  BZ    00B8
0009E:  MOVLW  06
000A0:  MOVWF  01
000A2:  CLRF   00
000A4:  DECFSZ 00,F
000A6:  BRA    00A4
000A8:  DECFSZ 01,F
000AA:  BRA    00A2
000AC:  MOVLW  7B
000AE:  MOVWF  00
000B0:  DECFSZ 00,F
000B2:  BRA    00B0
000B4:  DECFSZ FEF,F
000B6:  BRA    009E
000B8:  RETURN 0
*
0028A:  MOVLW  03
0028C:  SUBWF  27,F
0028E:  BNC   02A2
00290:  CLRF   FEA
00292:  MOVLW  27
00294:  MOVWF  FE9
00296:  MOVF   FEF,W
00298:  BZ    02A2
0029A:  BRA    029E
0029C:  BRA    029E
0029E:  DECFSZ FEF,F
002A0:  BRA    029C
002A2:  RETURN 0
.................... #USE        SPI(SPI2,STREAM = SPI_2,baud=5000000)
.................... #include    <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #bit     TIM3IF           = 0xFA1.1
.................... #define  analog_pins        an0_to_an3
.................... #define  lm35a_channel      0
.................... #define  lm35b_channel      1
.................... #define  gp2d12_channel     2
.................... #define  photoresis_channel 3
.................... #define  TOUCH_PIN        pin_c6
.................... #define  DHT11_PIN        pin_c5
.................... #define  HX711_DO         pin_d2
.................... #define  HX711_CLK        pin_d3
.................... #define  DCMOTOR_IN1      PIN_G0
.................... #define  STEPMOTOR_IN0    PIN_G1
.................... #define  STEPMOTOR_IN1    PIN_G2
.................... #define  STEPMOTOR_IN2    PIN_G3
.................... #define  STEPMOTOR_IN3    PIN_G4
.................... #define  soft_i2c_sda     pin_c4
.................... #define  soft_i2c_scl     pin_c3 
.................... #define  SRF04_TRIGER     PIN_C7
.................... #define  LCD_RS           PIN_F0
.................... #define  LCD_E            PIN_F5
.................... #define  OUTPUT_LCD       OUTPUT_E
.................... #define  LED32_RCK        pin_d5
.................... #define  D7SEG_RCK        pin_d7
.................... #define  S7SEG_RCK        pin_a5
.................... #define  TRIAC_PIN        Pin_f6
.................... #define  BUZZER_PIN       pin_f7
.................... #define  GLCD_CSA         PIN_F1   
.................... #define  GLCD_CSB         PIN_F2   
.................... #define  GLCD_CSC         PIN_F3                       
.................... #define  GLCD_RS          PIN_F0
.................... #define  GLCD_E           PIN_F4
.................... #define  output_glcd      output_e
.................... 
.................... //***** SRF04 using CCP1 (RC2) pin as ECHO pin *******************
.................... #DEFINE  BT0             PIN_b4
.................... #DEFINE  BT1             PIN_b5
.................... #DEFINE  BT2             PIN_b6
.................... #DEFINE  BT3             PIN_b7
.................... #DEFINE  ON              BT0 
.................... #DEFINE  UP              BT0  
.................... #DEFINE  ON1             BT0 
.................... #DEFINE  OFF             BT1
.................... #DEFINE  DW              BT1
.................... #DEFINE  OFF1            BT1
.................... #DEFINE  INV             BT2
.................... #DEFINE  ON2             BT2
.................... #DEFINE  CLR             BT2
.................... #DEFINE  MOD             BT3
.................... #DEFINE  STOP            BT3    
.................... #DEFINE  OFF2            BT3
.................... typedef enum 
.................... {
....................       OK    = 0,
....................       ERROR = 1,
....................       BUSY  = 2
.................... }result;
.................... typedef struct
.................... {
....................       unsigned int32 timeline;
.................... }DELAY_STRUCT;
.................... DELAY_STRUCT  delay=0;
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef union 
.................... { 
....................   int1           ledx1[32];
....................   unsigned int8  ledx8[4];
....................   unsigned int16 ledx16[2];
....................   unsigned int32 ledx32; 
.................... } LED32_UNION;
.................... LED32_UNION led32;
.................... result led32_display(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 m7d[16]= {0XC0,0XF9,0xA4,0XB0,0X99,0X92,0X82,0XF8,0X80,0X90,0x88, 0x83, 0xC6, 0xA1, 0x86, 0x7f};
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } D7SEG_STRUCT; 
.................... D7SEG_STRUCT    d7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result d7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... typedef struct 
.................... { 
....................   unsigned int8   led[8];  
.................... } S7SEG_STRUCT; 
.................... S7SEG_STRUCT    s7seg ={0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}; 
.................... result s7seg_display();
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(void);
.................... result buzzer_off(void);
.................... result triac_2_on(void);
.................... result triac_2_off(void);
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BASE FUNCTIONS xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init(void);
.................... result CHECK_MODULE();
.................... #endif
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 32 LED don xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result led32_display()
.................... {
....................      spi_write2(led32.ledx8[3]);spi_write2(led32.ledx8[2]);
*
00114:  MOVF   F66,W
00116:  MOVFF  0B,F66
0011A:  RRCF   F64,W
0011C:  BNC   011A
0011E:  MOVF   F66,W
00120:  MOVFF  0A,F66
00124:  RRCF   F64,W
00126:  BNC   0124
....................      spi_write2(led32.ledx8[1]);spi_write2(led32.ledx8[0]);
00128:  MOVF   F66,W
0012A:  MOVFF  09,F66
0012E:  RRCF   F64,W
00130:  BNC   012E
00132:  MOVF   F66,W
00134:  MOVFF  08,F66
00138:  RRCF   F64,W
0013A:  BNC   0138
....................      output_high(LED32_RCK); output_low(LED32_RCK);
0013C:  BCF    F95.5
0013E:  BSF    F8C.5
00140:  BCF    F95.5
00142:  BCF    F8C.5
....................      return OK;
00144:  MOVLW  00
00146:  MOVWF  01
00148:  GOTO   0252 (RETURN)
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN TT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result d7seg_display()
.................... {
....................       spi_write2(d7seg.led[4]);spi_write2(d7seg.led[5]);
0014C:  MOVF   F66,W
0014E:  MOVFF  10,F66
00152:  RRCF   F64,W
00154:  BNC   0152
00156:  MOVF   F66,W
00158:  MOVFF  11,F66
0015C:  RRCF   F64,W
0015E:  BNC   015C
....................       spi_write2(d7seg.led[6]);spi_write2(d7seg.led[7]);
00160:  MOVF   F66,W
00162:  MOVFF  12,F66
00166:  RRCF   F64,W
00168:  BNC   0166
0016A:  MOVF   F66,W
0016C:  MOVFF  13,F66
00170:  RRCF   F64,W
00172:  BNC   0170
....................       spi_write2(d7seg.led[0]);spi_write2(d7seg.led[1]);
00174:  MOVF   F66,W
00176:  MOVFF  0C,F66
0017A:  RRCF   F64,W
0017C:  BNC   017A
0017E:  MOVF   F66,W
00180:  MOVFF  0D,F66
00184:  RRCF   F64,W
00186:  BNC   0184
....................       spi_write2(d7seg.led[2]);spi_write2(d7seg.led[3]);
00188:  MOVF   F66,W
0018A:  MOVFF  0E,F66
0018E:  RRCF   F64,W
00190:  BNC   018E
00192:  MOVF   F66,W
00194:  MOVFF  0F,F66
00198:  RRCF   F64,W
0019A:  BNC   0198
....................       output_high(D7SEG_RCK); output_low(D7SEG_RCK);
0019C:  BCF    F95.7
0019E:  BSF    F8C.7
001A0:  BCF    F95.7
001A2:  BCF    F8C.7
....................       delay_ms(8);
001A4:  MOVLW  08
001A6:  MOVWF  25
001A8:  RCALL  0094
....................       return OK;
001AA:  MOVLW  00
001AC:  MOVWF  01
001AE:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module 7 DOAN QUET xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result s7seg_display()
.................... {    
....................       for(int8 n=0;n<8;n++)
001B0:  CLRF   23
001B2:  MOVF   23,W
001B4:  SUBLW  07
001B6:  BNC   020A
....................       {
....................             output_e(s7seg.led[n]); spi_write2(0x80>>n);
001B8:  CLRF   03
001BA:  MOVF   23,W
001BC:  ADDLW  14
001BE:  MOVWF  FE9
001C0:  MOVLW  00
001C2:  ADDWFC 03,W
001C4:  MOVWF  FEA
001C6:  MOVFF  FEF,F8D
001CA:  CLRF   F96
001CC:  MOVLW  80
001CE:  MOVWF  24
001D0:  MOVF   23,W
001D2:  MOVWF  01
001D4:  BZ    01DE
001D6:  BCF    FD8.0
001D8:  RRCF   24,F
001DA:  DECFSZ 01,F
001DC:  BRA    01D6
001DE:  MOVF   F66,W
001E0:  MOVFF  24,F66
001E4:  RRCF   F64,W
001E6:  BNC   01E4
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
001E8:  BCF    F92.5
001EA:  BSF    F89.5
001EC:  BCF    F92.5
001EE:  BCF    F89.5
....................             delay_ms(1);
001F0:  MOVLW  01
001F2:  MOVWF  25
001F4:  RCALL  0094
....................             spi_write2(0);
001F6:  MOVF   F66,W
001F8:  CLRF   F66
001FA:  RRCF   F64,W
001FC:  BNC   01FA
....................             output_high(S7SEG_RCK); output_low(S7SEG_RCK);
001FE:  BCF    F92.5
00200:  BSF    F89.5
00202:  BCF    F92.5
00204:  BCF    F89.5
00206:  INCF   23,F
00208:  BRA    01B2
....................       }
....................       return OK;
0020A:  MOVLW  00
0020C:  MOVWF  01
0020E:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module KEY4x4 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... unsigned int8 KEYREAD()
.................... {   const unsigned int8 mq[]={0xef,0xdf,0xbf,0x7f};
....................     for(int8 cot=0;cot<4;cot++)
....................     {
....................         if(mq[cot]&0x80) output_float(pin_b7);
....................         else             output_low(pin_b7);
....................         if(mq[cot]&0x40) output_float(pin_b6);
....................         else             output_low(pin_b6);
....................         if(mq[cot]&0x20) output_float(pin_b5);
....................         else             output_low(pin_b5);
....................         if(mq[cot]&0x10) output_float(pin_b4);
....................         else             output_low(pin_b4);
....................         IF          (!INPUT(pin_b0))    return 0+cot*4;             
....................         ELSE    IF  (!INPUT(pin_b1))    return 1+cot*4;                  
....................         ELSE    IF  (!INPUT(pin_b2))    return 2+cot*4;               
....................         ELSE    IF  (!INPUT(pin_b3))    return 3+cot*4;  
....................     }
....................     return 0xff;
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx Module LCD xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result write_lcd20x4(unsigned int8 lcd_signal, lcd_ins_hthi)
.................... {    
....................     output_bit(LCD_E,bit_test(lcd_signal,0));
*
00266:  BTFSC  27.0
00268:  BRA    026E
0026A:  BCF    F8E.5
0026C:  BRA    0270
0026E:  BSF    F8E.5
00270:  BCF    F97.5
....................     output_bit(LCD_RS,bit_test(lcd_signal,2));
00272:  BTFSC  27.2
00274:  BRA    027A
00276:  BCF    F8E.0
00278:  BRA    027C
0027A:  BSF    F8E.0
0027C:  BCF    F97.0
....................     output_lcd(lcd_ins_hthi);
0027E:  CLRF   F96
00280:  MOVFF  28,F8D
....................     return OK;
00284:  MOVLW  00
00286:  MOVWF  01
00288:  RETURN 0
.................... }
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx TRIAC-BUZZER xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result buzzer_on(){output_high(BUZZER_PIN);return OK;}
.................... result buzzer_off(){ output_low(BUZZER_PIN);return OK;}
*
00210:  BCF    F97.7
00212:  BCF    F8E.7
00214:  MOVLW  00
00216:  MOVWF  01
00218:  GOTO   0258 (RETURN)
.................... result triac_2_on(){output_high(TRIAC_PIN);return OK;}
.................... result triac_2_off(){output_low(TRIAC_PIN);return OK;}
0021C:  BCF    F97.6
0021E:  BCF    F8E.6
00220:  MOVLW  00
00222:  MOVWF  01
00224:  GOTO   025A (RETURN)
.................... result DCMOTOR_ENABLE()
.................... {
....................    setup_timer_2(t2_div_by_16,249,1);  // Cau hinh xung PWM T=0.8 ms, su dung PWM1
....................    setup_ccp1(ccp_pwm);  
....................    set_pwm1_duty((int16)0) ;
....................    output_low(DCMOTOR_IN1) ;
....................    return OK;
.................... }
.................... 
.................... result DCMOTOR_LOWLEVEL_CONTROL(signed int16 duty, int1 direct)
.................... {
....................      if(duty)
....................         if(direct){ output_high(DCMOTOR_IN1); set_pwm1_duty(1000-duty);  }
....................         else      { output_low(DCMOTOR_IN1) ; set_pwm1_duty(duty)     ;  }
....................      else         { output_low(DCMOTOR_IN1) ; set_pwm1_duty((int16)0) ;  }
....................      return OK;
.................... }
.................... result STEPMOTOR_ENABLE(){return OK;}
.................... result STEPMOTOR_LOWLEVEL_CONTROL(int1 mode, int8 step)
.................... {                                                                      
....................       const unsigned int8 Step_data[2][8]={0x01,0x03,0x02,0x06,0x04,0x0c,0x08,0x09,0x01,0x02,0x04,0x08,0x01,0x02,0x04,0x08};
....................       output_bit(STEPMOTOR_IN0, bit_test(step_data[mode][step],0));
....................       output_bit(STEPMOTOR_IN1, bit_test(step_data[mode][step],1));
....................       output_bit(STEPMOTOR_IN2, bit_test(step_data[mode][step],2));
....................       output_bit(STEPMOTOR_IN3, bit_test(step_data[mode][step],3));
....................       return OK;
.................... }
.................... 
.................... //xxxxxxxxxxxxxxxxxxxxxxxxxxxxx BOARD_INIT xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... result system_init()
.................... {
....................       CHECK_MODULE();
00228:  BRA    00BA
....................       set_tris_a(0xdf);
0022A:  MOVLW  DF
0022C:  MOVWF  F92
....................       set_tris_d(0x04);
0022E:  MOVLW  04
00230:  MOVWF  F95
....................       set_tris_e(0);
00232:  MOVLW  00
00234:  MOVWF  F96
....................       set_tris_f(0);
00236:  MOVWF  F97
....................       set_tris_g(0);
00238:  MOVWF  F98
....................       set_tris_c(0xff);
0023A:  MOVLW  FF
0023C:  MOVWF  F94
....................       port_b_pullups(0xFF);
0023E:  BCF    FF1.7
....................       output_g(0);
00240:  CLRF   F98
00242:  CLRF   F8F
....................       output_high(pin_g0);
00244:  BCF    F98.0
00246:  BSF    F8F.0
....................       led32.ledx32=0;
00248:  CLRF   0B
0024A:  CLRF   0A
0024C:  CLRF   09
0024E:  CLRF   08
....................       led32_display();
00250:  BRA    0114
....................       d7seg_display();
00252:  RCALL  014C
....................       s7seg_display();
00254:  RCALL  01B0
....................       buzzer_off(); 
00256:  BRA    0210
....................       triac_2_off();
00258:  BRA    021C
....................       setup_timer_3(t3_internal|t3_div_by_8|T3_CCP2_TO_5);
0025A:  MOVLW  BD
0025C:  MOVWF  FB1
....................       return OK;
0025E:  MOVLW  00
00260:  MOVWF  01
00262:  GOTO   07C6 (RETURN)
.................... }
.................... /*********************************** Check module ************************************************************/
.................... result CHECK_MODULE()
*
000BA:  BSF    23.0
.................... {
....................     int1 tt=1;
....................       unsigned int8 n;
....................       for(n=0;n<10;n++)
000BC:  CLRF   24
000BE:  MOVF   24,W
000C0:  SUBLW  09
000C2:  BNC   00EC
....................       {     output_bit(pin_d0,tt);
000C4:  BTFSC  23.0
000C6:  BRA    00CC
000C8:  BCF    F8C.0
000CA:  BRA    00CE
000CC:  BSF    F8C.0
000CE:  BCF    F95.0
....................             if(input(pin_d1) !=tt)break;
000D0:  BSF    F95.1
000D2:  MOVLW  00
000D4:  BTFSC  F83.1
000D6:  MOVLW  01
000D8:  MOVWF  26
000DA:  MOVLW  00
000DC:  BTFSC  23.0
000DE:  MOVLW  01
000E0:  SUBWF  26,W
000E2:  BTFSS  FD8.2
000E4:  BRA    00EC
....................             tt=!tt;
000E6:  BTG    23.0
000E8:  INCF   24,F
000EA:  BRA    00BE
....................       }
....................       if(n<10) while(true)
000EC:  MOVF   24,W
000EE:  SUBLW  09
000F0:  BNC   010C
....................       {    output_d(0xff);
000F2:  CLRF   F95
000F4:  SETF   F8C
....................            output_b(0xff); delay_ms(10);
000F6:  CLRF   F93
000F8:  SETF   F8A
000FA:  MOVLW  0A
000FC:  MOVWF  25
000FE:  RCALL  0094
....................            output_b(0); delay_ms(10);
00100:  CLRF   F93
00102:  CLRF   F8A
00104:  MOVLW  0A
00106:  MOVWF  25
00108:  RCALL  0094
0010A:  BRA    00F2
....................       }
....................       return OK;
0010C:  MOVLW  00
0010E:  MOVWF  01
00110:  GOTO   022A (RETURN)
.................... }
.................... #endif
.................... 
.................... #warning"Day la file mo phong, SV khong duoc nap tren board that"
.................... #endif
.................... #include <TV_LOWLEVER.C>
.................... #ifndef  __TV_LOWLEVER_C__
.................... #define  __TV_LOWLEVER_C__
.................... #include <TV_LOWLEVER.H>
.................... #ifndef  __TV_LOWLEVER_H__
.................... #define  __TV_LOWLEVER_H__
.................... unsigned int16 delay_start();
.................... unsigned int16 delay_stop(unsigned int16 t);
.................... result inputcd(int16 pin);
.................... #endif
.................... 
.................... /*********************************** Soft I2C ************************************************************/
.................... #if      BOARD == MOPHONG
.................... result soft_i2c_clk()
.................... {   
....................       output_high(soft_i2c_scl);
....................       DELAY_us(1);  
....................       output_low(soft_i2c_scl);
....................       return OK;
.................... }
.................... result soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_low(soft_i2c_sda);
....................       delay_us(1);
....................       output_low(soft_i2c_scl);   
....................       return OK;
.................... }
.................... result soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       delay_us(1);
....................       output_high(soft_i2c_sda);
....................       return OK;
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m;
....................       int1 ack;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit( soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................       output_float(soft_i2c_sda);
....................       output_high(soft_i2c_scl);  
....................       delay_us(1);
....................       ack = input(soft_i2c_sda);
....................       output_low(soft_i2c_scl);  
....................       return ack;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {      
....................             output_high(soft_i2c_scl);  
....................             delay_us(1);
....................             if(input(soft_i2c_sda))nhan=nhan|n;
....................             output_low(soft_i2c_scl);   
....................       }
....................       if(ack)  output_low(soft_i2c_sda);
....................       else     output_high(soft_i2c_sda); 
....................       soft_i2c_clk();
....................       output_high(soft_i2c_sda); 
....................       return nhan;
.................... }
.................... #else 
.................... void soft_i2c_clk()
.................... {    
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_scl);
.................... }
.................... void soft_i2c_start()
.................... {
....................       output_high(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_low(soft_i2c_scl);      
.................... }
.................... void soft_i2c_stop()
.................... {
....................       output_low(soft_i2c_scl);
....................       output_low(soft_i2c_sda);
....................       output_high(soft_i2c_scl);
....................       output_high(soft_i2c_sda);
.................... }
.................... result soft_i2c_write(unsigned int8 b)
.................... {
....................       unsigned int8 m,dem=0;
....................       for(m=0x80;m>0;m>>=1)
....................       {
....................             output_bit(soft_i2c_sda,b&m);
....................             soft_i2c_clk();
....................       }
....................      output_float(soft_i2c_sda);
....................      output_high(soft_i2c_scl);
....................      while(input(soft_i2c_sda)&(dem<5)){dem++; delay_us(1);}
....................      output_low(soft_i2c_scl);
....................      if(dem==5) return ERROR;
....................      else        return OK;
.................... }
.................... 
.................... unsigned int8 soft_i2c_read(int1 ack)
.................... { 
....................       unsigned int8 n,nhan=0;
....................       output_float(soft_i2c_sda);
....................       for(n=0x80;n>0;n>>=1)
....................       {    
....................             output_high(soft_i2c_scl);  
....................             if(input(soft_i2c_sda))nhan=nhan|n; 
....................             output_low(soft_i2c_scl);  
....................       } 
....................       output_bit(soft_i2c_sda,!ack);
....................       soft_i2c_clk();
....................       return nhan;
.................... }
.................... #endif
.................... /*********************************** Delay ************************************************************/
.................... unsigned int16 delay_start()
.................... {    
....................       delay.timeline += get_timer3() ;set_timer3(2);
*
00436:  MOVF   FB2,W
00438:  MOVFF  FB3,03
0043C:  ADDWF  04,F
0043E:  MOVF   FB3,W
00440:  ADDWFC 05,F
00442:  MOVLW  00
00444:  ADDWFC 06,F
00446:  ADDWFC 07,F
00448:  CLRF   FB3
0044A:  MOVLW  02
0044C:  MOVWF  FB2
0044E:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
00450:  BTFSS  FA1.1
00452:  BRA    045C
00454:  MOVLW  01
00456:  ADDWF  06,F
00458:  MOVLW  00
0045A:  ADDWFC 07,F
0045C:  BCF    FA1.1
....................       return delay.timeline/625;
0045E:  BCF    FD8.1
00460:  MOVFF  07,2C
00464:  MOVFF  06,2B
00468:  MOVFF  05,2A
0046C:  MOVFF  04,29
00470:  CLRF   30
00472:  CLRF   2F
00474:  MOVLW  02
00476:  MOVWF  2E
00478:  MOVLW  71
0047A:  MOVWF  2D
0047C:  RCALL  03A8
0047E:  MOVFF  01,02
00482:  MOVFF  00,01
00486:  RETURN 0
.................... }
.................... 
.................... unsigned int16 delay_stop(unsigned int16 t)
.................... {    
....................       unsigned int16 tam;
....................       delay.timeline += get_timer3() ;set_timer3(2);
00488:  MOVF   FB2,W
0048A:  MOVFF  FB3,03
0048E:  ADDWF  04,F
00490:  MOVF   FB3,W
00492:  ADDWFC 05,F
00494:  MOVLW  00
00496:  ADDWFC 06,F
00498:  ADDWFC 07,F
0049A:  CLRF   FB3
0049C:  MOVLW  02
0049E:  MOVWF  FB2
004A0:  NOP   
....................       if(TIM3IF) delay.timeline +=65536;TIM3IF=0;
004A2:  BTFSS  FA1.1
004A4:  BRA    04AE
004A6:  MOVLW  01
004A8:  ADDWF  06,F
004AA:  MOVLW  00
004AC:  ADDWFC 07,F
004AE:  BCF    FA1.1
....................       tam = delay.timeline/625;
004B0:  BCF    FD8.1
004B2:  MOVFF  07,2C
004B6:  MOVFF  06,2B
004BA:  MOVFF  05,2A
004BE:  MOVFF  04,29
004C2:  CLRF   30
004C4:  CLRF   2F
004C6:  MOVLW  02
004C8:  MOVWF  2E
004CA:  MOVLW  71
004CC:  MOVWF  2D
004CE:  RCALL  03A8
004D0:  MOVFF  01,28
004D4:  MOVFF  00,27
....................       if(t<=tam) return tam-t;
004D8:  MOVF   26,W
004DA:  SUBWF  28,W
004DC:  BNC   04FC
004DE:  BNZ   04E6
004E0:  MOVF   25,W
004E2:  SUBWF  27,W
004E4:  BNC   04FC
004E6:  MOVF   25,W
004E8:  SUBWF  27,W
004EA:  MOVWF  00
004EC:  MOVF   26,W
004EE:  SUBWFB 28,W
004F0:  MOVWF  03
004F2:  MOVFF  00,01
004F6:  MOVWF  02
004F8:  BRA    0518
004FA:  BRA    0518
....................       else       return 0xffff-t + tam;
004FC:  MOVLW  FF
004FE:  BSF    FD8.0
00500:  SUBFWB 25,W
00502:  MOVWF  29
00504:  MOVLW  FF
00506:  SUBFWB 26,W
00508:  MOVWF  2A
0050A:  MOVF   27,W
0050C:  ADDWF  29,W
0050E:  MOVWF  01
00510:  MOVF   28,W
00512:  ADDWFC 2A,W
00514:  MOVWF  03
00516:  MOVWF  02
00518:  RETURN 0
.................... }
.................... /*********************************** Button ************************************************************/
.................... result inputcd(int16 pin)
.................... {
....................       static unsigned int16 oldpin=0xffff;
....................       static unsigned int16 t; 
....................       static unsigned int8 step=0;
....................       output_float(pin);
0051A:  MOVFF  23,25
0051E:  MOVLW  01
00520:  MOVWF  26
00522:  MOVLW  0F
00524:  MOVWF  28
00526:  MOVLW  92
00528:  MOVWF  27
0052A:  RCALL  0338
....................       switch (step)
0052C:  MOVF   20,W
0052E:  ADDLW  FC
00530:  BTFSC  FD8.0
00532:  BRA    06A2
00534:  ADDLW  04
00536:  GOTO   06A8
....................       {
....................           case 0:
....................                  if(input(pin)==0)
0053A:  MOVFF  23,25
0053E:  MOVLW  01
00540:  MOVWF  26
00542:  MOVLW  0F
00544:  MOVWF  28
00546:  MOVLW  92
00548:  MOVWF  27
0054A:  RCALL  0338
0054C:  MOVFF  23,25
00550:  MOVLW  0F
00552:  MOVWF  27
00554:  MOVLW  80
00556:  MOVWF  26
00558:  RCALL  0376
0055A:  BTFSC  01.0
0055C:  BRA    0574
....................                   {
....................                         oldpin   = pin;
0055E:  MOVFF  24,1D
00562:  MOVFF  23,1C
....................                         t        = delay_start();
00566:  RCALL  0436
00568:  MOVFF  02,1F
0056C:  MOVFF  01,1E
....................                         step     = 1;
00570:  MOVLW  01
00572:  MOVWF  20
....................                   }
....................                  break;
00574:  BRA    06A2
....................            case 1:
....................                  if(input(oldpin))step = 0;
00576:  MOVFF  1C,25
0057A:  MOVLW  01
0057C:  MOVWF  26
0057E:  MOVLW  0F
00580:  MOVWF  28
00582:  MOVLW  92
00584:  MOVWF  27
00586:  RCALL  0338
00588:  MOVFF  1C,25
0058C:  MOVLW  0F
0058E:  MOVWF  27
00590:  MOVLW  80
00592:  MOVWF  26
00594:  RCALL  0376
00596:  BTFSS  01.0
00598:  BRA    059E
0059A:  CLRF   20
0059C:  BRA    05DA
....................                  else if((pin==oldpin)&&(delay_stop(t)>=30))
0059E:  MOVF   1C,W
005A0:  SUBWF  23,W
005A2:  BNZ   05DA
005A4:  MOVF   1D,W
005A6:  SUBWF  24,W
005A8:  BNZ   05DA
005AA:  MOVFF  1F,26
005AE:  MOVFF  1E,25
005B2:  RCALL  0488
005B4:  MOVFF  02,26
005B8:  MOVFF  01,25
005BC:  MOVF   26,F
005BE:  BNZ   05C6
005C0:  MOVF   25,W
005C2:  SUBLW  1D
005C4:  BC    05DA
....................                    {
....................                       t    = delay_start();
005C6:  RCALL  0436
005C8:  MOVFF  02,1F
005CC:  MOVFF  01,1E
....................                       step = 2;
005D0:  MOVLW  02
005D2:  MOVWF  20
....................                       return OK;
005D4:  MOVLW  00
005D6:  MOVWF  01
005D8:  BRA    06A6
....................                    }
....................                  break;
005DA:  BRA    06A2
....................             case 2:
....................                  if(input(oldpin))step = 0;
005DC:  MOVFF  1C,25
005E0:  MOVLW  01
005E2:  MOVWF  26
005E4:  MOVLW  0F
005E6:  MOVWF  28
005E8:  MOVLW  92
005EA:  MOVWF  27
005EC:  RCALL  0338
005EE:  MOVFF  1C,25
005F2:  MOVLW  0F
005F4:  MOVWF  27
005F6:  MOVLW  80
005F8:  MOVWF  26
005FA:  RCALL  0376
005FC:  BTFSS  01.0
005FE:  BRA    0604
00600:  CLRF   20
00602:  BRA    0640
....................                  else if((pin==oldpin)&&(delay_stop(t)>=500))
00604:  MOVF   1C,W
00606:  SUBWF  23,W
00608:  BNZ   0640
0060A:  MOVF   1D,W
0060C:  SUBWF  24,W
0060E:  BNZ   0640
00610:  MOVFF  1F,26
00614:  MOVFF  1E,25
00618:  RCALL  0488
0061A:  MOVFF  02,26
0061E:  MOVFF  01,25
00622:  MOVF   02,W
00624:  SUBLW  00
00626:  BC    0640
00628:  XORLW  FF
0062A:  BNZ   0632
0062C:  MOVF   25,W
0062E:  SUBLW  F3
00630:  BC    0640
....................                    {
....................                        t        = delay_start();
00632:  RCALL  0436
00634:  MOVFF  02,1F
00638:  MOVFF  01,1E
....................                        step     = 3;
0063C:  MOVLW  03
0063E:  MOVWF  20
....................                    } 
....................                  break;
00640:  BRA    06A2
....................             case 3:
....................                    if(input(oldpin))step = 0; 
00642:  MOVFF  1C,25
00646:  MOVLW  01
00648:  MOVWF  26
0064A:  MOVLW  0F
0064C:  MOVWF  28
0064E:  MOVLW  92
00650:  MOVWF  27
00652:  RCALL  0338
00654:  MOVFF  1C,25
00658:  MOVLW  0F
0065A:  MOVWF  27
0065C:  MOVLW  80
0065E:  MOVWF  26
00660:  RCALL  0376
00662:  BTFSS  01.0
00664:  BRA    066A
00666:  CLRF   20
00668:  BRA    06A2
....................                    else if((pin==oldpin)&&(delay_stop(t)>=100))
0066A:  MOVF   1C,W
0066C:  SUBWF  23,W
0066E:  BNZ   06A2
00670:  MOVF   1D,W
00672:  SUBWF  24,W
00674:  BNZ   06A2
00676:  MOVFF  1F,26
0067A:  MOVFF  1E,25
0067E:  RCALL  0488
00680:  MOVFF  02,26
00684:  MOVFF  01,25
00688:  MOVF   26,F
0068A:  BNZ   0692
0068C:  MOVF   25,W
0068E:  SUBLW  63
00690:  BC    06A2
....................                        {
....................                           t  = delay_start();
00692:  RCALL  0436
00694:  MOVFF  02,1F
00698:  MOVFF  01,1E
....................                           return OK;
0069C:  MOVLW  00
0069E:  MOVWF  01
006A0:  BRA    06A6
....................                        }
....................                  break;
....................       }   
....................       return BUSY; 
006A2:  MOVLW  02
006A4:  MOVWF  01
006A6:  RETURN 0
.................... }
.................... #endif
.................... 
.................... #ignore_warnings 202
.................... #endif
.................... 
.................... #include<tv_lcd.c>
.................... #ifndef  __TV_LCD_C__
.................... #define  __TV_LCD_C__
.................... #include<TV_LCD.h>
.................... #ifndef __tv_lcd_h__
.................... #define __tv_lcd_h__
.................... typedef enum 
.................... {
....................       lcd_clear_display  = 0x01,
....................       lcd_shift_left     = 0x18,
....................       lcd_shift_right    = 0x1c,
.................... }LCD_COMMANDS;
.................... result lcd_command(int8 command);
.................... result lcd_data(int8 data);
.................... result lcd_setup(void);
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) ; 
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2);
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17);
.................... //xxxxxxxxxxxxxxxxxxxxxxxx Font xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
.................... const unsigned int8 LCD_SO_X[11][6] ={       // Font 3x2
....................                   0,1,2,5,3,4,               // SO 0
....................                   1,2,32,3,7,3,              // SO 1
....................                   6,6,2,5,3,3,               // SO 2
....................                   6,6,2,3,3,4,               // SO 3
....................                   5,3,7,32,32,7,             // SO 4
....................                   7,6,6,3,3,4,               // SO 5
....................                   0,6,6,5,3,4,               // SO 6
....................                   1,1,7,32,32,7,             // SO 7
....................                   0,6,2,5,3,4,               // SO 8
....................                   0,6,2,3,3,4,               // SO 9
....................                   32,32,32,32,32,32          // XOA
....................                   };             
.................... const unsigned int8 LCD_SO_X1[11][12] ={           //Font 3x4
....................                   0,1,2,7,32,7,7,32,7,5,3,4,       //0   
....................                   1,2,32,32,7,32,32,7,32,3,7,3,    //1  
....................                   1,1,2,3,3,7,7,32,32,5,3,3,       //2           
....................                   0,1,2,32,3,4,32,32,2,5,3,4,      //3
....................                   7,32,7,5,3,7,32,32,7,32,32,7,    //4             
....................                   7,1,1,7,3,3,32,32,7,5,3,4,       //5           
....................                   0,1,2,7,3,3,7,32,7,5,3,4,        //6             
....................                   1,1,7,32,32,4,32,0,32,32,7,32,   //7             
....................                   0,1,2,5,3,4,0,32,2,5,3,4,        //8     
....................                   0,1,2,5,3,7,32,32,7,5,3,4,       //9 
....................                   32,32,32,32,32,32,32,32,32,32,32,32}; //XOA                  
....................                   
.................... const unsigned int8 LCD_MA_8DOAN[] = {
....................                   0x07,0x0F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0X00,0X00,  
....................                   0x1C,0x1E,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, 
....................                   0X00,0X00,0X00,0X00,0X00,0x1F,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1E,0x1C,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x0F,0x07, 
....................                   0x1F,0x1F,0x1F,0X00,0X00,0X00,0x1F,0x1F,  
....................                   0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F,0x1F}; 
....................    
.................... const unsigned char LCD_MA_TRAITAO[]={
....................                0,0,0,0x0c,0x1f,0x1f,0x1f,0x1f,
....................                0x0e,0x1c,0x10,0x06,0x1f,0x1f,0x1f,0x1f
....................                ,0x0f,0x07,0x03,0,0,0,0,0,
....................                0x1e,0x1c,0x18,0,0,0,0,0};
.................... #endif
.................... 
.................... result  lcd_command(int8 command)
.................... {    
....................       write_lcd20x4(0x01,command);     
*
002A4:  MOVLW  01
002A6:  MOVWF  27
002A8:  MOVFF  26,28
002AC:  RCALL  0266
....................       write_lcd20x4(0x00,command); 
002AE:  CLRF   27
002B0:  MOVFF  26,28
002B4:  RCALL  0266
....................       delay_us(200);
002B6:  MOVLW  C8
002B8:  MOVWF  27
002BA:  RCALL  028A
....................       return OK;
002BC:  MOVLW  00
002BE:  MOVWF  01
002C0:  RETURN 0
.................... }
.................... result lcd_data(int8 data)
.................... {
....................       write_lcd20x4(0x05,data);     
002C2:  MOVLW  05
002C4:  MOVWF  27
002C6:  MOVFF  25,28
002CA:  RCALL  0266
....................       write_lcd20x4(0x04,data); 
002CC:  MOVLW  04
002CE:  MOVWF  27
002D0:  MOVFF  25,28
002D4:  RCALL  0266
....................       delay_us(200);
002D6:  MOVLW  C8
002D8:  MOVWF  27
002DA:  RCALL  028A
....................       return OK;
002DC:  MOVLW  00
002DE:  MOVWF  01
002E0:  RETURN 0
.................... }
.................... result lcd_setup()
.................... {
....................       int8 n;
....................       lcd_command(0x3c);  delay_ms(5);
002E2:  MOVLW  3C
002E4:  MOVWF  26
002E6:  RCALL  02A4
002E8:  MOVLW  05
002EA:  MOVWF  25
002EC:  RCALL  0094
....................       lcd_command(0x3c);  delay_ms(5);
002EE:  MOVLW  3C
002F0:  MOVWF  26
002F2:  RCALL  02A4
002F4:  MOVLW  05
002F6:  MOVWF  25
002F8:  RCALL  0094
....................       lcd_command(0x0c);    
002FA:  MOVLW  0C
002FC:  MOVWF  26
002FE:  RCALL  02A4
....................       lcd_command(0x06); 
00300:  MOVLW  06
00302:  MOVWF  26
00304:  RCALL  02A4
....................       lcd_command(0x40);                             // di chuyen den dia chi dau vung nho CGRAM
00306:  MOVLW  40
00308:  MOVWF  26
0030A:  RCALL  02A4
....................       for(n=0;n<64;n++) lcd_data(LCD_MA_8DOAN[n]);   // ghi ma cua ky tu moi tao vao CGRAM
0030C:  CLRF   23
0030E:  MOVF   23,W
00310:  SUBLW  3F
00312:  BNC   0324
00314:  CLRF   03
00316:  MOVF   23,W
00318:  RCALL  0028
0031A:  MOVWF  24
0031C:  MOVWF  25
0031E:  RCALL  02C2
00320:  INCF   23,F
00322:  BRA    030E
....................       lcd_command(lcd_clear_display); delay_ms(2);
00324:  MOVLW  01
00326:  MOVWF  26
00328:  RCALL  02A4
0032A:  MOVLW  02
0032C:  MOVWF  25
0032E:  RCALL  0094
....................       return OK;
00330:  MOVLW  00
00332:  MOVWF  01
00334:  GOTO   07C8 (RETURN)
.................... }
.................... result lcd_goto( int8 colum_0_19, int8 row_0_3) 
.................... {
....................       const unsigned int8 dc[]={0x80,0xc0,0x94,0xd4};
....................        lcd_command(dc[row_0_3]+colum_0_19);
*
0073A:  CLRF   03
0073C:  MOVF   24,W
0073E:  RCALL  007C
00740:  ADDWF  23,W
00742:  MOVWF  25
00744:  MOVWF  26
00746:  RCALL  02A4
....................        return OK;
00748:  MOVLW  00
0074A:  MOVWF  01
0074C:  RETURN 0
.................... }
.................... result lcd_write_2x3_num(signed int8 num_0_9, int8 colum_0_17, int8 row_0_2)
.................... {     
....................       lcd_goto(colum_0_17,row_0_2);
....................       for (int8 i=0;i<6;i++)     
....................       {                  
....................         if (i==3)   lcd_goto(colum_0_17,row_0_2+1);             
....................         lcd_data(lcd_so_x[num_0_9][i]);     
....................       } 
....................       return OK;
.................... }
.................... 
.................... result lcd_write_4x3_num(signed int8 num_0_9, int8 colum_0_17)
.................... {
....................       for(int8 n=0;n<12;n++)
....................       {
....................             if(n%3==0)LCD_GOTO(colum_0_17,n/3); 
....................             LCD_DATA(LCD_SO_X1[num_0_9][n]);
....................       }
....................       return OK;
.................... }
.................... #endif
.................... 
.................... unsigned int8 dem,gt_cai=1;
.................... void kt_nutnhan()
.................... {
....................    if(inputcd(clr)==0)
*
006D0:  MOVLW  7C
006D2:  MOVWF  24
006D4:  MOVLW  0E
006D6:  MOVWF  23
006D8:  RCALL  051A
006DA:  MOVF   01,F
006DC:  BNZ   06E8
....................    {
....................       gt_cai=1;
006DE:  MOVLW  01
006E0:  MOVWF  22
....................       set_timer0(0);
006E2:  CLRF   FD7
006E4:  CLRF   FD6
006E6:  NOP   
....................    }
....................    if(inputcd(up)==0)
006E8:  MOVLW  7C
006EA:  MOVWF  24
006EC:  MOVLW  0C
006EE:  MOVWF  23
006F0:  RCALL  051A
006F2:  MOVF   01,F
006F4:  BNZ   0710
....................    {
....................       gt_cai++;
006F6:  INCF   22,F
....................       if(gt_cai>=100) gt_cai=1;
006F8:  MOVF   22,W
006FA:  SUBLW  63
006FC:  BC    0702
006FE:  MOVLW  01
00700:  MOVWF  22
....................       if(dem>gt_cai) set_timer0(1);
00702:  MOVF   21,W
00704:  SUBWF  22,W
00706:  BC    0710
00708:  CLRF   FD7
0070A:  MOVLW  01
0070C:  MOVWF  FD6
0070E:  NOP   
....................    }
....................    if(inputcd(dw)==0)
00710:  MOVLW  7C
00712:  MOVWF  24
00714:  MOVLW  0D
00716:  MOVWF  23
00718:  RCALL  051A
0071A:  MOVF   01,F
0071C:  BNZ   0736
....................    {
....................       gt_cai--;
0071E:  DECF   22,F
....................       if(gt_cai<=0) gt_cai=99;
00720:  MOVF   22,F
00722:  BNZ   0728
00724:  MOVLW  63
00726:  MOVWF  22
....................       if(dem>gt_cai) set_timer0(1);
00728:  MOVF   21,W
0072A:  SUBWF  22,W
0072C:  BC    0736
0072E:  CLRF   FD7
00730:  MOVLW  01
00732:  MOVWF  FD6
00734:  NOP   
....................    }
00736:  GOTO   07E6 (RETURN)
.................... }
.................... void main()
*
00776:  CLRF   FF8
00778:  BCF    FD0.7
0077A:  BCF    F63.5
0077C:  MOVLW  00
0077E:  MOVWF  F64
00780:  MOVLW  20
00782:  MOVWF  F63
00784:  BCF    F95.4
00786:  BSF    F95.5
00788:  BCF    F95.6
0078A:  MOVLW  01
0078C:  MOVWF  22
0078E:  MOVF   FC1,W
00790:  ANDLW  C0
00792:  IORLW  0F
00794:  MOVWF  FC1
00796:  MOVLW  07
00798:  MOVWF  FB4
0079A:  SETF   0C
0079C:  SETF   0D
0079E:  SETF   0E
007A0:  SETF   0F
007A2:  SETF   10
007A4:  SETF   11
007A6:  SETF   12
007A8:  SETF   13
007AA:  SETF   14
007AC:  SETF   15
007AE:  SETF   16
007B0:  SETF   17
007B2:  SETF   18
007B4:  SETF   19
007B6:  SETF   1A
007B8:  SETF   1B
007BA:  SETF   1C
007BC:  SETF   1D
007BE:  CLRF   1E
007C0:  CLRF   1F
007C2:  CLRF   20
.................... {
....................    system_init();
007C4:  BRA    0228
....................    lcd_setup();
007C6:  BRA    02E2
....................    setup_timer_0(T0_EXT_L_TO_H| T0_DIV_1);
007C8:  MOVLW  A8
007CA:  MOVWF  FD5
....................    set_timer0(0);
007CC:  CLRF   FD7
007CE:  CLRF   FD6
007D0:  NOP   
....................    while(true)
....................    {
....................       dem=get_timer0();
007D2:  MOVF   FD6,W
007D4:  MOVWF  21
....................       if(dem>gt_cai) set_timer0(1);
007D6:  MOVF   21,W
007D8:  SUBWF  22,W
007DA:  BC    07E4
007DC:  CLRF   FD7
007DE:  MOVLW  01
007E0:  MOVWF  FD6
007E2:  NOP   
....................       kt_nutnhan();
007E4:  BRA    06D0
....................       lcd_goto(9,0);
007E6:  MOVLW  09
007E8:  MOVWF  23
007EA:  CLRF   24
007EC:  RCALL  073A
....................       lcd_data(gt_cai/10%10+48);
007EE:  MOVFF  22,24
007F2:  MOVLW  0A
007F4:  MOVWF  25
007F6:  RCALL  074E
007F8:  MOVFF  01,24
007FC:  MOVLW  0A
007FE:  MOVWF  25
00800:  RCALL  074E
00802:  MOVLW  30
00804:  ADDWF  00,W
00806:  MOVWF  23
00808:  MOVWF  25
0080A:  RCALL  02C2
....................       lcd_data(gt_cai%10+48);
0080C:  MOVFF  22,24
00810:  MOVLW  0A
00812:  MOVWF  25
00814:  RCALL  074E
00816:  MOVLW  30
00818:  ADDWF  00,W
0081A:  MOVWF  23
0081C:  MOVWF  25
0081E:  RCALL  02C2
....................       lcd_goto(9,1);
00820:  MOVLW  09
00822:  MOVWF  23
00824:  MOVLW  01
00826:  MOVWF  24
00828:  RCALL  073A
....................       lcd_data(dem/10%10+48);
0082A:  MOVFF  21,24
0082E:  MOVLW  0A
00830:  MOVWF  25
00832:  RCALL  074E
00834:  MOVFF  01,24
00838:  MOVLW  0A
0083A:  MOVWF  25
0083C:  RCALL  074E
0083E:  MOVLW  30
00840:  ADDWF  00,W
00842:  MOVWF  23
00844:  MOVWF  25
00846:  RCALL  02C2
....................       lcd_data(dem%10+48);
00848:  MOVFF  21,24
0084C:  MOVLW  0A
0084E:  MOVWF  25
00850:  RCALL  074E
00852:  MOVLW  30
00854:  ADDWF  00,W
00856:  MOVWF  23
00858:  MOVWF  25
0085A:  RCALL  02C2
....................       d7seg.led[0]=m7d[dem%10];
0085C:  MOVFF  21,24
00860:  MOVLW  0A
00862:  MOVWF  25
00864:  RCALL  074E
00866:  CLRF   03
00868:  MOVF   00,W
0086A:  CALL   0004
0086E:  MOVWF  0C
....................       d7seg.led[1]=m7d[dem/10%10];
00870:  MOVFF  21,24
00874:  MOVLW  0A
00876:  MOVWF  25
00878:  RCALL  074E
0087A:  MOVFF  01,24
0087E:  MOVLW  0A
00880:  MOVWF  25
00882:  RCALL  074E
00884:  CLRF   03
00886:  MOVF   00,W
00888:  CALL   0004
0088C:  MOVWF  0D
....................       d7seg.led[2]=m7d[gt_cai%10];
0088E:  MOVFF  22,24
00892:  MOVLW  0A
00894:  MOVWF  25
00896:  RCALL  074E
00898:  CLRF   03
0089A:  MOVF   00,W
0089C:  CALL   0004
008A0:  MOVWF  0E
....................       d7seg.led[3]=m7d[gt_cai/10%10];
008A2:  MOVFF  22,24
008A6:  MOVLW  0A
008A8:  MOVWF  25
008AA:  RCALL  074E
008AC:  MOVFF  01,24
008B0:  MOVLW  0A
008B2:  MOVWF  25
008B4:  RCALL  074E
008B6:  CLRF   03
008B8:  MOVF   00,W
008BA:  CALL   0004
008BE:  MOVWF  0F
....................       d7seg_display();
008C0:  RCALL  014C
....................       s7seg.led[0]=m7d[dem%10];
008C2:  MOVFF  21,24
008C6:  MOVLW  0A
008C8:  MOVWF  25
008CA:  RCALL  074E
008CC:  CLRF   03
008CE:  MOVF   00,W
008D0:  CALL   0004
008D4:  MOVWF  14
....................       s7seg.led[1]=m7d[dem/10%10];
008D6:  MOVFF  21,24
008DA:  MOVLW  0A
008DC:  MOVWF  25
008DE:  RCALL  074E
008E0:  MOVFF  01,24
008E4:  MOVLW  0A
008E6:  MOVWF  25
008E8:  RCALL  074E
008EA:  CLRF   03
008EC:  MOVF   00,W
008EE:  CALL   0004
008F2:  MOVWF  15
....................       s7seg.led[6]=m7d[gt_cai%10];
008F4:  MOVFF  22,24
008F8:  MOVLW  0A
008FA:  MOVWF  25
008FC:  RCALL  074E
008FE:  CLRF   03
00900:  MOVF   00,W
00902:  CALL   0004
00906:  MOVWF  1A
....................       s7seg.led[7]=m7d[gt_cai/10%10];
00908:  MOVFF  22,24
0090C:  MOVLW  0A
0090E:  MOVWF  25
00910:  RCALL  074E
00912:  MOVFF  01,24
00916:  MOVLW  0A
00918:  MOVWF  25
0091A:  RCALL  074E
0091C:  CLRF   03
0091E:  MOVF   00,W
00920:  CALL   0004
00924:  MOVWF  1B
....................       s7seg_display();
00926:  RCALL  01B0
00928:  BRA    07D2
....................    }
.................... }
0092A:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 85F3   CCP2C1 LPT1OSC MCLR
   Word  4: 00B1   STVREN NOLVP NOXINST NODEBUG
   Word  5: C0FF   NOPROTECT NOCPB NOCPD
   Word  6: E0FF   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 40FF   NOEBTR NOEBTRB
